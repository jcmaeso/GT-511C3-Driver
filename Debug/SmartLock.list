
SmartLock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003494  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08003554  08003554  00013554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080036b0  080036b0  000136b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080036b4  080036b4  000136b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  080036b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b8  20000068  08003720  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000c00  20000120  08003720  00020120  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b64f  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ab2  00000000  00000000  0002b6df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000618  00000000  00000000  0002d198  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000550  00000000  00000000  0002d7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000eda0  00000000  00000000  0002dd00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000062f8  00000000  00000000  0003caa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0004e177  00000000  00000000  00042d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00090f0f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001c30  00000000  00000000  00090f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000009c  00000000  00000000  00092bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  00092c58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800353c 	.word	0x0800353c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800353c 	.word	0x0800353c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	4a07      	ldr	r2, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000228:	6812      	ldr	r2, [r2, #0]
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f001 fdb5 	bl	8001da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f000 fef2 	bl	8001038 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f8e8 	bl	8000438 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8cb 	bl	800040c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	200000a8 	.word	0x200000a8

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	200000a8 	.word	0x200000a8

080002ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b4:	f7ff fff0 	bl	8000298 <HAL_GetTick>
 80002b8:	0003      	movs	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	d002      	beq.n	80002cc <HAL_Delay+0x20>
  {
     wait++;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	f7ff ffe3 	bl	8000298 <HAL_GetTick>
 80002d2:	0002      	movs	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d3f7      	bcc.n	80002ce <HAL_Delay+0x22>
  {
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b5b0      	push	{r4, r5, r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0002      	movs	r2, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b7f      	cmp	r3, #127	; 0x7f
 80002fc:	d932      	bls.n	8000364 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fe:	4c2f      	ldr	r4, [pc, #188]	; (80003bc <NVIC_SetPriority+0xd4>)
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	001a      	movs	r2, r3
 8000306:	230f      	movs	r3, #15
 8000308:	4013      	ands	r3, r2
 800030a:	3b08      	subs	r3, #8
 800030c:	0899      	lsrs	r1, r3, #2
 800030e:	4a2b      	ldr	r2, [pc, #172]	; (80003bc <NVIC_SetPriority+0xd4>)
 8000310:	1dfb      	adds	r3, r7, #7
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	0018      	movs	r0, r3
 8000316:	230f      	movs	r3, #15
 8000318:	4003      	ands	r3, r0
 800031a:	3b08      	subs	r3, #8
 800031c:	089b      	lsrs	r3, r3, #2
 800031e:	3306      	adds	r3, #6
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	18d3      	adds	r3, r2, r3
 8000324:	3304      	adds	r3, #4
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	1dfa      	adds	r2, r7, #7
 800032a:	7812      	ldrb	r2, [r2, #0]
 800032c:	0010      	movs	r0, r2
 800032e:	2203      	movs	r2, #3
 8000330:	4002      	ands	r2, r0
 8000332:	00d2      	lsls	r2, r2, #3
 8000334:	20ff      	movs	r0, #255	; 0xff
 8000336:	4090      	lsls	r0, r2
 8000338:	0002      	movs	r2, r0
 800033a:	43d2      	mvns	r2, r2
 800033c:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	019b      	lsls	r3, r3, #6
 8000342:	20ff      	movs	r0, #255	; 0xff
 8000344:	4018      	ands	r0, r3
 8000346:	1dfb      	adds	r3, r7, #7
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	001d      	movs	r5, r3
 800034c:	2303      	movs	r3, #3
 800034e:	402b      	ands	r3, r5
 8000350:	00db      	lsls	r3, r3, #3
 8000352:	4098      	lsls	r0, r3
 8000354:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000356:	431a      	orrs	r2, r3
 8000358:	1d8b      	adds	r3, r1, #6
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	18e3      	adds	r3, r4, r3
 800035e:	3304      	adds	r3, #4
 8000360:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000362:	e027      	b.n	80003b4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000364:	4c16      	ldr	r4, [pc, #88]	; (80003c0 <NVIC_SetPriority+0xd8>)
 8000366:	1dfb      	adds	r3, r7, #7
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	b25b      	sxtb	r3, r3
 800036c:	089b      	lsrs	r3, r3, #2
 800036e:	4914      	ldr	r1, [pc, #80]	; (80003c0 <NVIC_SetPriority+0xd8>)
 8000370:	1dfa      	adds	r2, r7, #7
 8000372:	7812      	ldrb	r2, [r2, #0]
 8000374:	b252      	sxtb	r2, r2
 8000376:	0892      	lsrs	r2, r2, #2
 8000378:	32c0      	adds	r2, #192	; 0xc0
 800037a:	0092      	lsls	r2, r2, #2
 800037c:	5852      	ldr	r2, [r2, r1]
 800037e:	1df9      	adds	r1, r7, #7
 8000380:	7809      	ldrb	r1, [r1, #0]
 8000382:	0008      	movs	r0, r1
 8000384:	2103      	movs	r1, #3
 8000386:	4001      	ands	r1, r0
 8000388:	00c9      	lsls	r1, r1, #3
 800038a:	20ff      	movs	r0, #255	; 0xff
 800038c:	4088      	lsls	r0, r1
 800038e:	0001      	movs	r1, r0
 8000390:	43c9      	mvns	r1, r1
 8000392:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000394:	683a      	ldr	r2, [r7, #0]
 8000396:	0192      	lsls	r2, r2, #6
 8000398:	20ff      	movs	r0, #255	; 0xff
 800039a:	4010      	ands	r0, r2
 800039c:	1dfa      	adds	r2, r7, #7
 800039e:	7812      	ldrb	r2, [r2, #0]
 80003a0:	0015      	movs	r5, r2
 80003a2:	2203      	movs	r2, #3
 80003a4:	402a      	ands	r2, r5
 80003a6:	00d2      	lsls	r2, r2, #3
 80003a8:	4090      	lsls	r0, r2
 80003aa:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003ac:	430a      	orrs	r2, r1
 80003ae:	33c0      	adds	r3, #192	; 0xc0
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	511a      	str	r2, [r3, r4]
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b002      	add	sp, #8
 80003ba:	bdb0      	pop	{r4, r5, r7, pc}
 80003bc:	e000ed00 	.word	0xe000ed00
 80003c0:	e000e100 	.word	0xe000e100

080003c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <SysTick_Config+0x40>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d901      	bls.n	80003da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003d6:	2301      	movs	r3, #1
 80003d8:	e010      	b.n	80003fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <SysTick_Config+0x44>)
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	3a01      	subs	r2, #1
 80003e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003e2:	2301      	movs	r3, #1
 80003e4:	425b      	negs	r3, r3
 80003e6:	2103      	movs	r1, #3
 80003e8:	0018      	movs	r0, r3
 80003ea:	f7ff ff7d 	bl	80002e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <SysTick_Config+0x44>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <SysTick_Config+0x44>)
 80003f6:	2207      	movs	r2, #7
 80003f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003fa:	2300      	movs	r3, #0
}
 80003fc:	0018      	movs	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	b002      	add	sp, #8
 8000402:	bd80      	pop	{r7, pc}
 8000404:	00ffffff 	.word	0x00ffffff
 8000408:	e000e010 	.word	0xe000e010

0800040c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	60b9      	str	r1, [r7, #8]
 8000414:	607a      	str	r2, [r7, #4]
 8000416:	230f      	movs	r3, #15
 8000418:	18fb      	adds	r3, r7, r3
 800041a:	1c02      	adds	r2, r0, #0
 800041c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800041e:	68ba      	ldr	r2, [r7, #8]
 8000420:	230f      	movs	r3, #15
 8000422:	18fb      	adds	r3, r7, r3
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	b25b      	sxtb	r3, r3
 8000428:	0011      	movs	r1, r2
 800042a:	0018      	movs	r0, r3
 800042c:	f7ff ff5c 	bl	80002e8 <NVIC_SetPriority>
}
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	b004      	add	sp, #16
 8000436:	bd80      	pop	{r7, pc}

08000438 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	0018      	movs	r0, r3
 8000444:	f7ff ffbe 	bl	80003c4 <SysTick_Config>
 8000448:	0003      	movs	r3, r0
}
 800044a:	0018      	movs	r0, r3
 800044c:	46bd      	mov	sp, r7
 800044e:	b002      	add	sp, #8
 8000450:	bd80      	pop	{r7, pc}
	...

08000454 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2b04      	cmp	r3, #4
 8000460:	d106      	bne.n	8000470 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000464:	4a07      	ldr	r2, [pc, #28]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000466:	6812      	ldr	r2, [r2, #0]
 8000468:	2104      	movs	r1, #4
 800046a:	430a      	orrs	r2, r1
 800046c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800046e:	e005      	b.n	800047c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000470:	4b04      	ldr	r3, [pc, #16]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000472:	4a04      	ldr	r2, [pc, #16]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000474:	6812      	ldr	r2, [r2, #0]
 8000476:	2104      	movs	r1, #4
 8000478:	438a      	bics	r2, r1
 800047a:	601a      	str	r2, [r3, #0]
}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	b002      	add	sp, #8
 8000482:	bd80      	pop	{r7, pc}
 8000484:	e000e010 	.word	0xe000e010

08000488 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800048c:	f000 f803 	bl	8000496 <HAL_SYSTICK_Callback>
}
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004b2:	2300      	movs	r3, #0
 80004b4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004b6:	e14f      	b.n	8000758 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2101      	movs	r1, #1
 80004be:	697a      	ldr	r2, [r7, #20]
 80004c0:	4091      	lsls	r1, r2
 80004c2:	000a      	movs	r2, r1
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d100      	bne.n	80004d0 <HAL_GPIO_Init+0x30>
 80004ce:	e140      	b.n	8000752 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	2b02      	cmp	r3, #2
 80004d6:	d003      	beq.n	80004e0 <HAL_GPIO_Init+0x40>
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	2b12      	cmp	r3, #18
 80004de:	d123      	bne.n	8000528 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	08da      	lsrs	r2, r3, #3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	3208      	adds	r2, #8
 80004e8:	0092      	lsls	r2, r2, #2
 80004ea:	58d3      	ldr	r3, [r2, r3]
 80004ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	2207      	movs	r2, #7
 80004f2:	4013      	ands	r3, r2
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	220f      	movs	r2, #15
 80004f8:	409a      	lsls	r2, r3
 80004fa:	0013      	movs	r3, r2
 80004fc:	43da      	mvns	r2, r3
 80004fe:	693b      	ldr	r3, [r7, #16]
 8000500:	4013      	ands	r3, r2
 8000502:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	691a      	ldr	r2, [r3, #16]
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	2107      	movs	r1, #7
 800050c:	400b      	ands	r3, r1
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	409a      	lsls	r2, r3
 8000512:	0013      	movs	r3, r2
 8000514:	693a      	ldr	r2, [r7, #16]
 8000516:	4313      	orrs	r3, r2
 8000518:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	08da      	lsrs	r2, r3, #3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3208      	adds	r2, #8
 8000522:	0092      	lsls	r2, r2, #2
 8000524:	6939      	ldr	r1, [r7, #16]
 8000526:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	2203      	movs	r2, #3
 8000534:	409a      	lsls	r2, r3
 8000536:	0013      	movs	r3, r2
 8000538:	43da      	mvns	r2, r3
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	4013      	ands	r3, r2
 800053e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	2203      	movs	r2, #3
 8000546:	401a      	ands	r2, r3
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	409a      	lsls	r2, r3
 800054e:	0013      	movs	r3, r2
 8000550:	693a      	ldr	r2, [r7, #16]
 8000552:	4313      	orrs	r3, r2
 8000554:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	693a      	ldr	r2, [r7, #16]
 800055a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d00b      	beq.n	800057c <HAL_GPIO_Init+0xdc>
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d007      	beq.n	800057c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000570:	2b11      	cmp	r3, #17
 8000572:	d003      	beq.n	800057c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	2b12      	cmp	r3, #18
 800057a:	d130      	bne.n	80005de <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	2203      	movs	r2, #3
 8000588:	409a      	lsls	r2, r3
 800058a:	0013      	movs	r3, r2
 800058c:	43da      	mvns	r2, r3
 800058e:	693b      	ldr	r3, [r7, #16]
 8000590:	4013      	ands	r3, r2
 8000592:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	68da      	ldr	r2, [r3, #12]
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	409a      	lsls	r2, r3
 800059e:	0013      	movs	r3, r2
 80005a0:	693a      	ldr	r2, [r7, #16]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	693a      	ldr	r2, [r7, #16]
 80005aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80005b2:	2201      	movs	r2, #1
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	409a      	lsls	r2, r3
 80005b8:	0013      	movs	r3, r2
 80005ba:	43da      	mvns	r2, r3
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	4013      	ands	r3, r2
 80005c0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	091b      	lsrs	r3, r3, #4
 80005c8:	2201      	movs	r2, #1
 80005ca:	401a      	ands	r2, r3
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	409a      	lsls	r2, r3
 80005d0:	0013      	movs	r3, r2
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	693a      	ldr	r2, [r7, #16]
 80005dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	2203      	movs	r2, #3
 80005ea:	409a      	lsls	r2, r3
 80005ec:	0013      	movs	r3, r2
 80005ee:	43da      	mvns	r2, r3
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	4013      	ands	r3, r2
 80005f4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	689a      	ldr	r2, [r3, #8]
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	409a      	lsls	r2, r3
 8000600:	0013      	movs	r3, r2
 8000602:	693a      	ldr	r2, [r7, #16]
 8000604:	4313      	orrs	r3, r2
 8000606:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	055b      	lsls	r3, r3, #21
 8000616:	4013      	ands	r3, r2
 8000618:	d100      	bne.n	800061c <HAL_GPIO_Init+0x17c>
 800061a:	e09a      	b.n	8000752 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061c:	4b54      	ldr	r3, [pc, #336]	; (8000770 <HAL_GPIO_Init+0x2d0>)
 800061e:	4a54      	ldr	r2, [pc, #336]	; (8000770 <HAL_GPIO_Init+0x2d0>)
 8000620:	6992      	ldr	r2, [r2, #24]
 8000622:	2101      	movs	r1, #1
 8000624:	430a      	orrs	r2, r1
 8000626:	619a      	str	r2, [r3, #24]
 8000628:	4b51      	ldr	r3, [pc, #324]	; (8000770 <HAL_GPIO_Init+0x2d0>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	2201      	movs	r2, #1
 800062e:	4013      	ands	r3, r2
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000634:	4a4f      	ldr	r2, [pc, #316]	; (8000774 <HAL_GPIO_Init+0x2d4>)
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	089b      	lsrs	r3, r3, #2
 800063a:	3302      	adds	r3, #2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	589b      	ldr	r3, [r3, r2]
 8000640:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	2203      	movs	r2, #3
 8000646:	4013      	ands	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	220f      	movs	r2, #15
 800064c:	409a      	lsls	r2, r3
 800064e:	0013      	movs	r3, r2
 8000650:	43da      	mvns	r2, r3
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	4013      	ands	r3, r2
 8000656:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	2390      	movs	r3, #144	; 0x90
 800065c:	05db      	lsls	r3, r3, #23
 800065e:	429a      	cmp	r2, r3
 8000660:	d013      	beq.n	800068a <HAL_GPIO_Init+0x1ea>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a44      	ldr	r2, [pc, #272]	; (8000778 <HAL_GPIO_Init+0x2d8>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d00d      	beq.n	8000686 <HAL_GPIO_Init+0x1e6>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a43      	ldr	r2, [pc, #268]	; (800077c <HAL_GPIO_Init+0x2dc>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d007      	beq.n	8000682 <HAL_GPIO_Init+0x1e2>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a42      	ldr	r2, [pc, #264]	; (8000780 <HAL_GPIO_Init+0x2e0>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d101      	bne.n	800067e <HAL_GPIO_Init+0x1de>
 800067a:	2303      	movs	r3, #3
 800067c:	e006      	b.n	800068c <HAL_GPIO_Init+0x1ec>
 800067e:	2305      	movs	r3, #5
 8000680:	e004      	b.n	800068c <HAL_GPIO_Init+0x1ec>
 8000682:	2302      	movs	r3, #2
 8000684:	e002      	b.n	800068c <HAL_GPIO_Init+0x1ec>
 8000686:	2301      	movs	r3, #1
 8000688:	e000      	b.n	800068c <HAL_GPIO_Init+0x1ec>
 800068a:	2300      	movs	r3, #0
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	2103      	movs	r1, #3
 8000690:	400a      	ands	r2, r1
 8000692:	0092      	lsls	r2, r2, #2
 8000694:	4093      	lsls	r3, r2
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	4313      	orrs	r3, r2
 800069a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800069c:	4935      	ldr	r1, [pc, #212]	; (8000774 <HAL_GPIO_Init+0x2d4>)
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	089b      	lsrs	r3, r3, #2
 80006a2:	3302      	adds	r3, #2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	693a      	ldr	r2, [r7, #16]
 80006a8:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006aa:	4b36      	ldr	r3, [pc, #216]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	43da      	mvns	r2, r3
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	4013      	ands	r3, r2
 80006b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	025b      	lsls	r3, r3, #9
 80006c2:	4013      	ands	r3, r2
 80006c4:	d003      	beq.n	80006ce <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80006d4:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	43da      	mvns	r2, r3
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	4013      	ands	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	029b      	lsls	r3, r3, #10
 80006ec:	4013      	ands	r3, r2
 80006ee:	d003      	beq.n	80006f8 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80006f0:	693a      	ldr	r2, [r7, #16]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	43da      	mvns	r2, r3
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	4013      	ands	r3, r2
 800070c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	035b      	lsls	r3, r3, #13
 8000716:	4013      	ands	r3, r2
 8000718:	d003      	beq.n	8000722 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4313      	orrs	r3, r2
 8000720:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 8000724:	693a      	ldr	r2, [r7, #16]
 8000726:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	43da      	mvns	r2, r3
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	4013      	ands	r3, r2
 8000736:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	685a      	ldr	r2, [r3, #4]
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	039b      	lsls	r3, r3, #14
 8000740:	4013      	ands	r3, r2
 8000742:	d003      	beq.n	800074c <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4313      	orrs	r3, r2
 800074a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3301      	adds	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	40da      	lsrs	r2, r3
 8000760:	1e13      	subs	r3, r2, #0
 8000762:	d000      	beq.n	8000766 <HAL_GPIO_Init+0x2c6>
 8000764:	e6a8      	b.n	80004b8 <HAL_GPIO_Init+0x18>
  } 
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b006      	add	sp, #24
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	40021000 	.word	0x40021000
 8000774:	40010000 	.word	0x40010000
 8000778:	48000400 	.word	0x48000400
 800077c:	48000800 	.word	0x48000800
 8000780:	48000c00 	.word	0x48000c00
 8000784:	40010400 	.word	0x40010400

08000788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	0008      	movs	r0, r1
 8000792:	0011      	movs	r1, r2
 8000794:	1cbb      	adds	r3, r7, #2
 8000796:	1c02      	adds	r2, r0, #0
 8000798:	801a      	strh	r2, [r3, #0]
 800079a:	1c7b      	adds	r3, r7, #1
 800079c:	1c0a      	adds	r2, r1, #0
 800079e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007a0:	1c7b      	adds	r3, r7, #1
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d004      	beq.n	80007b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007a8:	1cbb      	adds	r3, r7, #2
 80007aa:	881a      	ldrh	r2, [r3, #0]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007b0:	e003      	b.n	80007ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007b2:	1cbb      	adds	r3, r7, #2
 80007b4:	881a      	ldrh	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2201      	movs	r2, #1
 80007d6:	4013      	ands	r3, r2
 80007d8:	d100      	bne.n	80007dc <HAL_RCC_OscConfig+0x18>
 80007da:	e08d      	b.n	80008f8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007dc:	4bc3      	ldr	r3, [pc, #780]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	220c      	movs	r2, #12
 80007e2:	4013      	ands	r3, r2
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d00e      	beq.n	8000806 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007e8:	4bc0      	ldr	r3, [pc, #768]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	220c      	movs	r2, #12
 80007ee:	4013      	ands	r3, r2
 80007f0:	2b08      	cmp	r3, #8
 80007f2:	d116      	bne.n	8000822 <HAL_RCC_OscConfig+0x5e>
 80007f4:	4bbd      	ldr	r3, [pc, #756]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 80007f6:	685a      	ldr	r2, [r3, #4]
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	025b      	lsls	r3, r3, #9
 80007fc:	401a      	ands	r2, r3
 80007fe:	2380      	movs	r3, #128	; 0x80
 8000800:	025b      	lsls	r3, r3, #9
 8000802:	429a      	cmp	r2, r3
 8000804:	d10d      	bne.n	8000822 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000806:	4bb9      	ldr	r3, [pc, #740]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	029b      	lsls	r3, r3, #10
 800080e:	4013      	ands	r3, r2
 8000810:	d100      	bne.n	8000814 <HAL_RCC_OscConfig+0x50>
 8000812:	e070      	b.n	80008f6 <HAL_RCC_OscConfig+0x132>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d000      	beq.n	800081e <HAL_RCC_OscConfig+0x5a>
 800081c:	e06b      	b.n	80008f6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
 8000820:	e2b5      	b.n	8000d8e <HAL_RCC_OscConfig+0x5ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d107      	bne.n	800083a <HAL_RCC_OscConfig+0x76>
 800082a:	4bb0      	ldr	r3, [pc, #704]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 800082c:	4aaf      	ldr	r2, [pc, #700]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 800082e:	6812      	ldr	r2, [r2, #0]
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	0249      	lsls	r1, r1, #9
 8000834:	430a      	orrs	r2, r1
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	e02f      	b.n	800089a <HAL_RCC_OscConfig+0xd6>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d10c      	bne.n	800085c <HAL_RCC_OscConfig+0x98>
 8000842:	4baa      	ldr	r3, [pc, #680]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000844:	4aa9      	ldr	r2, [pc, #676]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000846:	6812      	ldr	r2, [r2, #0]
 8000848:	49a9      	ldr	r1, [pc, #676]	; (8000af0 <HAL_RCC_OscConfig+0x32c>)
 800084a:	400a      	ands	r2, r1
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	4ba7      	ldr	r3, [pc, #668]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000850:	4aa6      	ldr	r2, [pc, #664]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000852:	6812      	ldr	r2, [r2, #0]
 8000854:	49a7      	ldr	r1, [pc, #668]	; (8000af4 <HAL_RCC_OscConfig+0x330>)
 8000856:	400a      	ands	r2, r1
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	e01e      	b.n	800089a <HAL_RCC_OscConfig+0xd6>
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	2b05      	cmp	r3, #5
 8000862:	d10e      	bne.n	8000882 <HAL_RCC_OscConfig+0xbe>
 8000864:	4ba1      	ldr	r3, [pc, #644]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000866:	4aa1      	ldr	r2, [pc, #644]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000868:	6812      	ldr	r2, [r2, #0]
 800086a:	2180      	movs	r1, #128	; 0x80
 800086c:	02c9      	lsls	r1, r1, #11
 800086e:	430a      	orrs	r2, r1
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	4b9e      	ldr	r3, [pc, #632]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000874:	4a9d      	ldr	r2, [pc, #628]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000876:	6812      	ldr	r2, [r2, #0]
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	0249      	lsls	r1, r1, #9
 800087c:	430a      	orrs	r2, r1
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	e00b      	b.n	800089a <HAL_RCC_OscConfig+0xd6>
 8000882:	4b9a      	ldr	r3, [pc, #616]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000884:	4a99      	ldr	r2, [pc, #612]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000886:	6812      	ldr	r2, [r2, #0]
 8000888:	4999      	ldr	r1, [pc, #612]	; (8000af0 <HAL_RCC_OscConfig+0x32c>)
 800088a:	400a      	ands	r2, r1
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	4b97      	ldr	r3, [pc, #604]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000890:	4a96      	ldr	r2, [pc, #600]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000892:	6812      	ldr	r2, [r2, #0]
 8000894:	4997      	ldr	r1, [pc, #604]	; (8000af4 <HAL_RCC_OscConfig+0x330>)
 8000896:	400a      	ands	r2, r1
 8000898:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d014      	beq.n	80008cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008a2:	f7ff fcf9 	bl	8000298 <HAL_GetTick>
 80008a6:	0003      	movs	r3, r0
 80008a8:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008aa:	e008      	b.n	80008be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008ac:	f7ff fcf4 	bl	8000298 <HAL_GetTick>
 80008b0:	0002      	movs	r2, r0
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	2b64      	cmp	r3, #100	; 0x64
 80008b8:	d901      	bls.n	80008be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80008ba:	2303      	movs	r3, #3
 80008bc:	e267      	b.n	8000d8e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008be:	4b8b      	ldr	r3, [pc, #556]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	2380      	movs	r3, #128	; 0x80
 80008c4:	029b      	lsls	r3, r3, #10
 80008c6:	4013      	ands	r3, r2
 80008c8:	d0f0      	beq.n	80008ac <HAL_RCC_OscConfig+0xe8>
 80008ca:	e015      	b.n	80008f8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008cc:	f7ff fce4 	bl	8000298 <HAL_GetTick>
 80008d0:	0003      	movs	r3, r0
 80008d2:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008d4:	e008      	b.n	80008e8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008d6:	f7ff fcdf 	bl	8000298 <HAL_GetTick>
 80008da:	0002      	movs	r2, r0
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	1ad3      	subs	r3, r2, r3
 80008e0:	2b64      	cmp	r3, #100	; 0x64
 80008e2:	d901      	bls.n	80008e8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80008e4:	2303      	movs	r3, #3
 80008e6:	e252      	b.n	8000d8e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008e8:	4b80      	ldr	r3, [pc, #512]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	029b      	lsls	r3, r3, #10
 80008f0:	4013      	ands	r3, r2
 80008f2:	d1f0      	bne.n	80008d6 <HAL_RCC_OscConfig+0x112>
 80008f4:	e000      	b.n	80008f8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2202      	movs	r2, #2
 80008fe:	4013      	ands	r3, r2
 8000900:	d100      	bne.n	8000904 <HAL_RCC_OscConfig+0x140>
 8000902:	e069      	b.n	80009d8 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000904:	4b79      	ldr	r3, [pc, #484]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	220c      	movs	r2, #12
 800090a:	4013      	ands	r3, r2
 800090c:	d00b      	beq.n	8000926 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800090e:	4b77      	ldr	r3, [pc, #476]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	220c      	movs	r2, #12
 8000914:	4013      	ands	r3, r2
 8000916:	2b08      	cmp	r3, #8
 8000918:	d11c      	bne.n	8000954 <HAL_RCC_OscConfig+0x190>
 800091a:	4b74      	ldr	r3, [pc, #464]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	4013      	ands	r3, r2
 8000924:	d116      	bne.n	8000954 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000926:	4b71      	ldr	r3, [pc, #452]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2202      	movs	r2, #2
 800092c:	4013      	ands	r3, r2
 800092e:	d005      	beq.n	800093c <HAL_RCC_OscConfig+0x178>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d001      	beq.n	800093c <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	e228      	b.n	8000d8e <HAL_RCC_OscConfig+0x5ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800093c:	4a6b      	ldr	r2, [pc, #428]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 800093e:	4b6b      	ldr	r3, [pc, #428]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	21f8      	movs	r1, #248	; 0xf8
 8000944:	438b      	bics	r3, r1
 8000946:	0019      	movs	r1, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	691b      	ldr	r3, [r3, #16]
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	430b      	orrs	r3, r1
 8000950:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000952:	e041      	b.n	80009d8 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d024      	beq.n	80009a6 <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800095c:	4b63      	ldr	r3, [pc, #396]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 800095e:	4a63      	ldr	r2, [pc, #396]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000960:	6812      	ldr	r2, [r2, #0]
 8000962:	2101      	movs	r1, #1
 8000964:	430a      	orrs	r2, r1
 8000966:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000968:	f7ff fc96 	bl	8000298 <HAL_GetTick>
 800096c:	0003      	movs	r3, r0
 800096e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000970:	e008      	b.n	8000984 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000972:	f7ff fc91 	bl	8000298 <HAL_GetTick>
 8000976:	0002      	movs	r2, r0
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	2b02      	cmp	r3, #2
 800097e:	d901      	bls.n	8000984 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8000980:	2303      	movs	r3, #3
 8000982:	e204      	b.n	8000d8e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000984:	4b59      	ldr	r3, [pc, #356]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2202      	movs	r2, #2
 800098a:	4013      	ands	r3, r2
 800098c:	d0f1      	beq.n	8000972 <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800098e:	4a57      	ldr	r2, [pc, #348]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000990:	4b56      	ldr	r3, [pc, #344]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	21f8      	movs	r1, #248	; 0xf8
 8000996:	438b      	bics	r3, r1
 8000998:	0019      	movs	r1, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	691b      	ldr	r3, [r3, #16]
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	430b      	orrs	r3, r1
 80009a2:	6013      	str	r3, [r2, #0]
 80009a4:	e018      	b.n	80009d8 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009a6:	4b51      	ldr	r3, [pc, #324]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 80009a8:	4a50      	ldr	r2, [pc, #320]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 80009aa:	6812      	ldr	r2, [r2, #0]
 80009ac:	2101      	movs	r1, #1
 80009ae:	438a      	bics	r2, r1
 80009b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009b2:	f7ff fc71 	bl	8000298 <HAL_GetTick>
 80009b6:	0003      	movs	r3, r0
 80009b8:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009ba:	e008      	b.n	80009ce <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009bc:	f7ff fc6c 	bl	8000298 <HAL_GetTick>
 80009c0:	0002      	movs	r2, r0
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d901      	bls.n	80009ce <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 80009ca:	2303      	movs	r3, #3
 80009cc:	e1df      	b.n	8000d8e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009ce:	4b47      	ldr	r3, [pc, #284]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2202      	movs	r2, #2
 80009d4:	4013      	ands	r3, r2
 80009d6:	d1f1      	bne.n	80009bc <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2208      	movs	r2, #8
 80009de:	4013      	ands	r3, r2
 80009e0:	d036      	beq.n	8000a50 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d019      	beq.n	8000a1e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009ea:	4b40      	ldr	r3, [pc, #256]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 80009ec:	4a3f      	ldr	r2, [pc, #252]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 80009ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80009f0:	2101      	movs	r1, #1
 80009f2:	430a      	orrs	r2, r1
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009f6:	f7ff fc4f 	bl	8000298 <HAL_GetTick>
 80009fa:	0003      	movs	r3, r0
 80009fc:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009fe:	e008      	b.n	8000a12 <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a00:	f7ff fc4a 	bl	8000298 <HAL_GetTick>
 8000a04:	0002      	movs	r2, r0
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d901      	bls.n	8000a12 <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	e1bd      	b.n	8000d8e <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a12:	4b36      	ldr	r3, [pc, #216]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a16:	2202      	movs	r2, #2
 8000a18:	4013      	ands	r3, r2
 8000a1a:	d0f1      	beq.n	8000a00 <HAL_RCC_OscConfig+0x23c>
 8000a1c:	e018      	b.n	8000a50 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a1e:	4b33      	ldr	r3, [pc, #204]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000a20:	4a32      	ldr	r2, [pc, #200]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000a22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000a24:	2101      	movs	r1, #1
 8000a26:	438a      	bics	r2, r1
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a2a:	f7ff fc35 	bl	8000298 <HAL_GetTick>
 8000a2e:	0003      	movs	r3, r0
 8000a30:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a32:	e008      	b.n	8000a46 <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a34:	f7ff fc30 	bl	8000298 <HAL_GetTick>
 8000a38:	0002      	movs	r2, r0
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d901      	bls.n	8000a46 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8000a42:	2303      	movs	r3, #3
 8000a44:	e1a3      	b.n	8000d8e <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a46:	4b29      	ldr	r3, [pc, #164]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	d1f1      	bne.n	8000a34 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2204      	movs	r2, #4
 8000a56:	4013      	ands	r3, r2
 8000a58:	d100      	bne.n	8000a5c <HAL_RCC_OscConfig+0x298>
 8000a5a:	e0b5      	b.n	8000bc8 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a5c:	2317      	movs	r3, #23
 8000a5e:	18fb      	adds	r3, r7, r3
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a64:	4b21      	ldr	r3, [pc, #132]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000a66:	69da      	ldr	r2, [r3, #28]
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	055b      	lsls	r3, r3, #21
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	d111      	bne.n	8000a94 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000a72:	4a1e      	ldr	r2, [pc, #120]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000a74:	69d2      	ldr	r2, [r2, #28]
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	0549      	lsls	r1, r1, #21
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	61da      	str	r2, [r3, #28]
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000a80:	69da      	ldr	r2, [r3, #28]
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	055b      	lsls	r3, r3, #21
 8000a86:	4013      	ands	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000a8c:	2317      	movs	r3, #23
 8000a8e:	18fb      	adds	r3, r7, r3
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_RCC_OscConfig+0x334>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	d11a      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_RCC_OscConfig+0x334>)
 8000aa2:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <HAL_RCC_OscConfig+0x334>)
 8000aa4:	6812      	ldr	r2, [r2, #0]
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	0049      	lsls	r1, r1, #1
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000aae:	f7ff fbf3 	bl	8000298 <HAL_GetTick>
 8000ab2:	0003      	movs	r3, r0
 8000ab4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ab6:	e008      	b.n	8000aca <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ab8:	f7ff fbee 	bl	8000298 <HAL_GetTick>
 8000abc:	0002      	movs	r2, r0
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	2b64      	cmp	r3, #100	; 0x64
 8000ac4:	d901      	bls.n	8000aca <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	e161      	b.n	8000d8e <HAL_RCC_OscConfig+0x5ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_RCC_OscConfig+0x334>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	2380      	movs	r3, #128	; 0x80
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	d0f0      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d10e      	bne.n	8000afc <HAL_RCC_OscConfig+0x338>
 8000ade:	4b03      	ldr	r3, [pc, #12]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000ae0:	4a02      	ldr	r2, [pc, #8]	; (8000aec <HAL_RCC_OscConfig+0x328>)
 8000ae2:	6a12      	ldr	r2, [r2, #32]
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	621a      	str	r2, [r3, #32]
 8000aea:	e035      	b.n	8000b58 <HAL_RCC_OscConfig+0x394>
 8000aec:	40021000 	.word	0x40021000
 8000af0:	fffeffff 	.word	0xfffeffff
 8000af4:	fffbffff 	.word	0xfffbffff
 8000af8:	40007000 	.word	0x40007000
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d10c      	bne.n	8000b1e <HAL_RCC_OscConfig+0x35a>
 8000b04:	4ba4      	ldr	r3, [pc, #656]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000b06:	4aa4      	ldr	r2, [pc, #656]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000b08:	6a12      	ldr	r2, [r2, #32]
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	438a      	bics	r2, r1
 8000b0e:	621a      	str	r2, [r3, #32]
 8000b10:	4ba1      	ldr	r3, [pc, #644]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000b12:	4aa1      	ldr	r2, [pc, #644]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000b14:	6a12      	ldr	r2, [r2, #32]
 8000b16:	2104      	movs	r1, #4
 8000b18:	438a      	bics	r2, r1
 8000b1a:	621a      	str	r2, [r3, #32]
 8000b1c:	e01c      	b.n	8000b58 <HAL_RCC_OscConfig+0x394>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	2b05      	cmp	r3, #5
 8000b24:	d10c      	bne.n	8000b40 <HAL_RCC_OscConfig+0x37c>
 8000b26:	4b9c      	ldr	r3, [pc, #624]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000b28:	4a9b      	ldr	r2, [pc, #620]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000b2a:	6a12      	ldr	r2, [r2, #32]
 8000b2c:	2104      	movs	r1, #4
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	621a      	str	r2, [r3, #32]
 8000b32:	4b99      	ldr	r3, [pc, #612]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000b34:	4a98      	ldr	r2, [pc, #608]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000b36:	6a12      	ldr	r2, [r2, #32]
 8000b38:	2101      	movs	r1, #1
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	621a      	str	r2, [r3, #32]
 8000b3e:	e00b      	b.n	8000b58 <HAL_RCC_OscConfig+0x394>
 8000b40:	4b95      	ldr	r3, [pc, #596]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000b42:	4a95      	ldr	r2, [pc, #596]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000b44:	6a12      	ldr	r2, [r2, #32]
 8000b46:	2101      	movs	r1, #1
 8000b48:	438a      	bics	r2, r1
 8000b4a:	621a      	str	r2, [r3, #32]
 8000b4c:	4b92      	ldr	r3, [pc, #584]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000b4e:	4a92      	ldr	r2, [pc, #584]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000b50:	6a12      	ldr	r2, [r2, #32]
 8000b52:	2104      	movs	r1, #4
 8000b54:	438a      	bics	r2, r1
 8000b56:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d014      	beq.n	8000b8a <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b60:	f7ff fb9a 	bl	8000298 <HAL_GetTick>
 8000b64:	0003      	movs	r3, r0
 8000b66:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b68:	e009      	b.n	8000b7e <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b6a:	f7ff fb95 	bl	8000298 <HAL_GetTick>
 8000b6e:	0002      	movs	r2, r0
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	4a89      	ldr	r2, [pc, #548]	; (8000d9c <HAL_RCC_OscConfig+0x5d8>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d901      	bls.n	8000b7e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e107      	b.n	8000d8e <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b7e:	4b86      	ldr	r3, [pc, #536]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000b80:	6a1b      	ldr	r3, [r3, #32]
 8000b82:	2202      	movs	r2, #2
 8000b84:	4013      	ands	r3, r2
 8000b86:	d0f0      	beq.n	8000b6a <HAL_RCC_OscConfig+0x3a6>
 8000b88:	e013      	b.n	8000bb2 <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b8a:	f7ff fb85 	bl	8000298 <HAL_GetTick>
 8000b8e:	0003      	movs	r3, r0
 8000b90:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b92:	e009      	b.n	8000ba8 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b94:	f7ff fb80 	bl	8000298 <HAL_GetTick>
 8000b98:	0002      	movs	r2, r0
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	4a7f      	ldr	r2, [pc, #508]	; (8000d9c <HAL_RCC_OscConfig+0x5d8>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d901      	bls.n	8000ba8 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	e0f2      	b.n	8000d8e <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ba8:	4b7b      	ldr	r3, [pc, #492]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000baa:	6a1b      	ldr	r3, [r3, #32]
 8000bac:	2202      	movs	r2, #2
 8000bae:	4013      	ands	r3, r2
 8000bb0:	d1f0      	bne.n	8000b94 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000bb2:	2317      	movs	r3, #23
 8000bb4:	18fb      	adds	r3, r7, r3
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d105      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bbc:	4b76      	ldr	r3, [pc, #472]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000bbe:	4a76      	ldr	r2, [pc, #472]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000bc0:	69d2      	ldr	r2, [r2, #28]
 8000bc2:	4977      	ldr	r1, [pc, #476]	; (8000da0 <HAL_RCC_OscConfig+0x5dc>)
 8000bc4:	400a      	ands	r2, r1
 8000bc6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2210      	movs	r2, #16
 8000bce:	4013      	ands	r3, r2
 8000bd0:	d063      	beq.n	8000c9a <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d12a      	bne.n	8000c30 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bda:	4b6f      	ldr	r3, [pc, #444]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000bdc:	4a6e      	ldr	r2, [pc, #440]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000bde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000be0:	2104      	movs	r1, #4
 8000be2:	430a      	orrs	r2, r1
 8000be4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000be6:	4b6c      	ldr	r3, [pc, #432]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000be8:	4a6b      	ldr	r2, [pc, #428]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000bea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000bec:	2101      	movs	r1, #1
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bf2:	f7ff fb51 	bl	8000298 <HAL_GetTick>
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000bfa:	e008      	b.n	8000c0e <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000bfc:	f7ff fb4c 	bl	8000298 <HAL_GetTick>
 8000c00:	0002      	movs	r2, r0
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d901      	bls.n	8000c0e <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	e0bf      	b.n	8000d8e <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c0e:	4b62      	ldr	r3, [pc, #392]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c12:	2202      	movs	r2, #2
 8000c14:	4013      	ands	r3, r2
 8000c16:	d0f1      	beq.n	8000bfc <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c18:	4a5f      	ldr	r2, [pc, #380]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000c1a:	4b5f      	ldr	r3, [pc, #380]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1e:	21f8      	movs	r1, #248	; 0xf8
 8000c20:	438b      	bics	r3, r1
 8000c22:	0019      	movs	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	430b      	orrs	r3, r1
 8000c2c:	6353      	str	r3, [r2, #52]	; 0x34
 8000c2e:	e034      	b.n	8000c9a <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	3305      	adds	r3, #5
 8000c36:	d111      	bne.n	8000c5c <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c38:	4b57      	ldr	r3, [pc, #348]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000c3a:	4a57      	ldr	r2, [pc, #348]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000c3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c3e:	2104      	movs	r1, #4
 8000c40:	438a      	bics	r2, r1
 8000c42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c44:	4a54      	ldr	r2, [pc, #336]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000c46:	4b54      	ldr	r3, [pc, #336]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c4a:	21f8      	movs	r1, #248	; 0xf8
 8000c4c:	438b      	bics	r3, r1
 8000c4e:	0019      	movs	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	430b      	orrs	r3, r1
 8000c58:	6353      	str	r3, [r2, #52]	; 0x34
 8000c5a:	e01e      	b.n	8000c9a <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c5c:	4b4e      	ldr	r3, [pc, #312]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000c5e:	4a4e      	ldr	r2, [pc, #312]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000c60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c62:	2104      	movs	r1, #4
 8000c64:	430a      	orrs	r2, r1
 8000c66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000c68:	4b4b      	ldr	r3, [pc, #300]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000c6a:	4a4b      	ldr	r2, [pc, #300]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000c6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c6e:	2101      	movs	r1, #1
 8000c70:	438a      	bics	r2, r1
 8000c72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c74:	f7ff fb10 	bl	8000298 <HAL_GetTick>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c7c:	e008      	b.n	8000c90 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c7e:	f7ff fb0b 	bl	8000298 <HAL_GetTick>
 8000c82:	0002      	movs	r2, r0
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d901      	bls.n	8000c90 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	e07e      	b.n	8000d8e <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c90:	4b41      	ldr	r3, [pc, #260]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c94:	2202      	movs	r2, #2
 8000c96:	4013      	ands	r3, r2
 8000c98:	d1f1      	bne.n	8000c7e <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a1b      	ldr	r3, [r3, #32]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x4e0>
 8000ca2:	e073      	b.n	8000d8c <HAL_RCC_OscConfig+0x5c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ca4:	4b3c      	ldr	r3, [pc, #240]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	220c      	movs	r2, #12
 8000caa:	4013      	ands	r3, r2
 8000cac:	2b08      	cmp	r3, #8
 8000cae:	d100      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x4ee>
 8000cb0:	e06a      	b.n	8000d88 <HAL_RCC_OscConfig+0x5c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a1b      	ldr	r3, [r3, #32]
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d14b      	bne.n	8000d52 <HAL_RCC_OscConfig+0x58e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cba:	4b37      	ldr	r3, [pc, #220]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000cbc:	4a36      	ldr	r2, [pc, #216]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000cbe:	6812      	ldr	r2, [r2, #0]
 8000cc0:	4938      	ldr	r1, [pc, #224]	; (8000da4 <HAL_RCC_OscConfig+0x5e0>)
 8000cc2:	400a      	ands	r2, r1
 8000cc4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc6:	f7ff fae7 	bl	8000298 <HAL_GetTick>
 8000cca:	0003      	movs	r3, r0
 8000ccc:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cd0:	f7ff fae2 	bl	8000298 <HAL_GetTick>
 8000cd4:	0002      	movs	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e055      	b.n	8000d8e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	049b      	lsls	r3, r3, #18
 8000cea:	4013      	ands	r3, r2
 8000cec:	d1f0      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cee:	4a2a      	ldr	r2, [pc, #168]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000cf0:	4b29      	ldr	r3, [pc, #164]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf4:	210f      	movs	r1, #15
 8000cf6:	438b      	bics	r3, r1
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfe:	430b      	orrs	r3, r1
 8000d00:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d02:	4a25      	ldr	r2, [pc, #148]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000d04:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	4927      	ldr	r1, [pc, #156]	; (8000da8 <HAL_RCC_OscConfig+0x5e4>)
 8000d0a:	4019      	ands	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d14:	4303      	orrs	r3, r0
 8000d16:	430b      	orrs	r3, r1
 8000d18:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000d1c:	4a1e      	ldr	r2, [pc, #120]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000d1e:	6812      	ldr	r2, [r2, #0]
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	0449      	lsls	r1, r1, #17
 8000d24:	430a      	orrs	r2, r1
 8000d26:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d28:	f7ff fab6 	bl	8000298 <HAL_GetTick>
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d30:	e008      	b.n	8000d44 <HAL_RCC_OscConfig+0x580>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d32:	f7ff fab1 	bl	8000298 <HAL_GetTick>
 8000d36:	0002      	movs	r2, r0
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d901      	bls.n	8000d44 <HAL_RCC_OscConfig+0x580>
          {
            return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e024      	b.n	8000d8e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	049b      	lsls	r3, r3, #18
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d0f0      	beq.n	8000d32 <HAL_RCC_OscConfig+0x56e>
 8000d50:	e01c      	b.n	8000d8c <HAL_RCC_OscConfig+0x5c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000d54:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000d56:	6812      	ldr	r2, [r2, #0]
 8000d58:	4912      	ldr	r1, [pc, #72]	; (8000da4 <HAL_RCC_OscConfig+0x5e0>)
 8000d5a:	400a      	ands	r2, r1
 8000d5c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5e:	f7ff fa9b 	bl	8000298 <HAL_GetTick>
 8000d62:	0003      	movs	r3, r0
 8000d64:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d66:	e008      	b.n	8000d7a <HAL_RCC_OscConfig+0x5b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d68:	f7ff fa96 	bl	8000298 <HAL_GetTick>
 8000d6c:	0002      	movs	r2, r0
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d901      	bls.n	8000d7a <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_TIMEOUT;
 8000d76:	2303      	movs	r3, #3
 8000d78:	e009      	b.n	8000d8e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <HAL_RCC_OscConfig+0x5d4>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	049b      	lsls	r3, r3, #18
 8000d82:	4013      	ands	r3, r2
 8000d84:	d1f0      	bne.n	8000d68 <HAL_RCC_OscConfig+0x5a4>
 8000d86:	e001      	b.n	8000d8c <HAL_RCC_OscConfig+0x5c8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e000      	b.n	8000d8e <HAL_RCC_OscConfig+0x5ca>
    }
  }
  
  return HAL_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	0018      	movs	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b006      	add	sp, #24
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	00001388 	.word	0x00001388
 8000da0:	efffffff 	.word	0xefffffff
 8000da4:	feffffff 	.word	0xfeffffff
 8000da8:	ffc2ffff 	.word	0xffc2ffff

08000dac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dba:	4b69      	ldr	r3, [pc, #420]	; (8000f60 <HAL_RCC_ClockConfig+0x1b4>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d211      	bcs.n	8000dec <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dc8:	4b65      	ldr	r3, [pc, #404]	; (8000f60 <HAL_RCC_ClockConfig+0x1b4>)
 8000dca:	4a65      	ldr	r2, [pc, #404]	; (8000f60 <HAL_RCC_ClockConfig+0x1b4>)
 8000dcc:	6812      	ldr	r2, [r2, #0]
 8000dce:	2101      	movs	r1, #1
 8000dd0:	438a      	bics	r2, r1
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000dda:	4b61      	ldr	r3, [pc, #388]	; (8000f60 <HAL_RCC_ClockConfig+0x1b4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2201      	movs	r2, #1
 8000de0:	401a      	ands	r2, r3
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d001      	beq.n	8000dec <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e0b5      	b.n	8000f58 <HAL_RCC_ClockConfig+0x1ac>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2202      	movs	r2, #2
 8000df2:	4013      	ands	r3, r2
 8000df4:	d009      	beq.n	8000e0a <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000df6:	4a5b      	ldr	r2, [pc, #364]	; (8000f64 <HAL_RCC_ClockConfig+0x1b8>)
 8000df8:	4b5a      	ldr	r3, [pc, #360]	; (8000f64 <HAL_RCC_ClockConfig+0x1b8>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	21f0      	movs	r1, #240	; 0xf0
 8000dfe:	438b      	bics	r3, r1
 8000e00:	0019      	movs	r1, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	430b      	orrs	r3, r1
 8000e08:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4013      	ands	r3, r2
 8000e12:	d100      	bne.n	8000e16 <HAL_RCC_ClockConfig+0x6a>
 8000e14:	e067      	b.n	8000ee6 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d107      	bne.n	8000e2e <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1e:	4b51      	ldr	r3, [pc, #324]	; (8000f64 <HAL_RCC_ClockConfig+0x1b8>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	029b      	lsls	r3, r3, #10
 8000e26:	4013      	ands	r3, r2
 8000e28:	d114      	bne.n	8000e54 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e094      	b.n	8000f58 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d107      	bne.n	8000e46 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e36:	4b4b      	ldr	r3, [pc, #300]	; (8000f64 <HAL_RCC_ClockConfig+0x1b8>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	049b      	lsls	r3, r3, #18
 8000e3e:	4013      	ands	r3, r2
 8000e40:	d108      	bne.n	8000e54 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e088      	b.n	8000f58 <HAL_RCC_ClockConfig+0x1ac>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e46:	4b47      	ldr	r3, [pc, #284]	; (8000f64 <HAL_RCC_ClockConfig+0x1b8>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	d101      	bne.n	8000e54 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e081      	b.n	8000f58 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e54:	4a43      	ldr	r2, [pc, #268]	; (8000f64 <HAL_RCC_ClockConfig+0x1b8>)
 8000e56:	4b43      	ldr	r3, [pc, #268]	; (8000f64 <HAL_RCC_ClockConfig+0x1b8>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2103      	movs	r1, #3
 8000e5c:	438b      	bics	r3, r1
 8000e5e:	0019      	movs	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	430b      	orrs	r3, r1
 8000e66:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e68:	f7ff fa16 	bl	8000298 <HAL_GetTick>
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d111      	bne.n	8000e9c <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e78:	e009      	b.n	8000e8e <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e7a:	f7ff fa0d 	bl	8000298 <HAL_GetTick>
 8000e7e:	0002      	movs	r2, r0
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	4a38      	ldr	r2, [pc, #224]	; (8000f68 <HAL_RCC_ClockConfig+0x1bc>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e064      	b.n	8000f58 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e8e:	4b35      	ldr	r3, [pc, #212]	; (8000f64 <HAL_RCC_ClockConfig+0x1b8>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	220c      	movs	r2, #12
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	d1ef      	bne.n	8000e7a <HAL_RCC_ClockConfig+0xce>
 8000e9a:	e024      	b.n	8000ee6 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d11b      	bne.n	8000edc <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ea4:	e009      	b.n	8000eba <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ea6:	f7ff f9f7 	bl	8000298 <HAL_GetTick>
 8000eaa:	0002      	movs	r2, r0
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	4a2d      	ldr	r2, [pc, #180]	; (8000f68 <HAL_RCC_ClockConfig+0x1bc>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e04e      	b.n	8000f58 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000eba:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <HAL_RCC_ClockConfig+0x1b8>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b08      	cmp	r3, #8
 8000ec4:	d1ef      	bne.n	8000ea6 <HAL_RCC_ClockConfig+0xfa>
 8000ec6:	e00e      	b.n	8000ee6 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ec8:	f7ff f9e6 	bl	8000298 <HAL_GetTick>
 8000ecc:	0002      	movs	r2, r0
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	4a25      	ldr	r2, [pc, #148]	; (8000f68 <HAL_RCC_ClockConfig+0x1bc>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e03d      	b.n	8000f58 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000edc:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <HAL_RCC_ClockConfig+0x1b8>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	220c      	movs	r2, #12
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d1f0      	bne.n	8000ec8 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <HAL_RCC_ClockConfig+0x1b4>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2201      	movs	r2, #1
 8000eec:	401a      	ands	r2, r3
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d911      	bls.n	8000f18 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <HAL_RCC_ClockConfig+0x1b4>)
 8000ef6:	4a1a      	ldr	r2, [pc, #104]	; (8000f60 <HAL_RCC_ClockConfig+0x1b4>)
 8000ef8:	6812      	ldr	r2, [r2, #0]
 8000efa:	2101      	movs	r1, #1
 8000efc:	438a      	bics	r2, r1
 8000efe:	0011      	movs	r1, r2
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	430a      	orrs	r2, r1
 8000f04:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_RCC_ClockConfig+0x1b4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d001      	beq.n	8000f18 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e01f      	b.n	8000f58 <HAL_RCC_ClockConfig+0x1ac>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2204      	movs	r2, #4
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d008      	beq.n	8000f34 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000f22:	4a10      	ldr	r2, [pc, #64]	; (8000f64 <HAL_RCC_ClockConfig+0x1b8>)
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <HAL_RCC_ClockConfig+0x1b8>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	4910      	ldr	r1, [pc, #64]	; (8000f6c <HAL_RCC_ClockConfig+0x1c0>)
 8000f2a:	4019      	ands	r1, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	430b      	orrs	r3, r1
 8000f32:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000f34:	f000 f820 	bl	8000f78 <HAL_RCC_GetSysClockFreq>
 8000f38:	0001      	movs	r1, r0
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_RCC_ClockConfig+0x1b8>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	091b      	lsrs	r3, r3, #4
 8000f40:	220f      	movs	r2, #15
 8000f42:	4013      	ands	r3, r2
 8000f44:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <HAL_RCC_ClockConfig+0x1c4>)
 8000f46:	5cd3      	ldrb	r3, [r2, r3]
 8000f48:	000a      	movs	r2, r1
 8000f4a:	40da      	lsrs	r2, r3
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_RCC_ClockConfig+0x1c8>)
 8000f4e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff f979 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b004      	add	sp, #16
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40022000 	.word	0x40022000
 8000f64:	40021000 	.word	0x40021000
 8000f68:	00001388 	.word	0x00001388
 8000f6c:	fffff8ff 	.word	0xfffff8ff
 8000f70:	08003594 	.word	0x08003594
 8000f74:	20000000 	.word	0x20000000

08000f78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b08f      	sub	sp, #60	; 0x3c
 8000f7c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000f7e:	2314      	movs	r3, #20
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	4a28      	ldr	r2, [pc, #160]	; (8001024 <HAL_RCC_GetSysClockFreq+0xac>)
 8000f84:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f86:	c313      	stmia	r3!, {r0, r1, r4}
 8000f88:	6812      	ldr	r2, [r2, #0]
 8000f8a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	4a26      	ldr	r2, [pc, #152]	; (8001028 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f90:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f92:	c313      	stmia	r3!, {r0, r1, r4}
 8000f94:	6812      	ldr	r2, [r2, #0]
 8000f96:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb4:	220c      	movs	r2, #12
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d002      	beq.n	8000fc2 <HAL_RCC_GetSysClockFreq+0x4a>
 8000fbc:	2b08      	cmp	r3, #8
 8000fbe:	d003      	beq.n	8000fc8 <HAL_RCC_GetSysClockFreq+0x50>
 8000fc0:	e027      	b.n	8001012 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000fc6:	e027      	b.n	8001018 <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fca:	0c9b      	lsrs	r3, r3, #18
 8000fcc:	220f      	movs	r2, #15
 8000fce:	4013      	ands	r3, r2
 8000fd0:	2214      	movs	r2, #20
 8000fd2:	18ba      	adds	r2, r7, r2
 8000fd4:	5cd3      	ldrb	r3, [r2, r3]
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fdc:	220f      	movs	r2, #15
 8000fde:	4013      	ands	r3, r2
 8000fe0:	1d3a      	adds	r2, r7, #4
 8000fe2:	5cd3      	ldrb	r3, [r2, r3]
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	025b      	lsls	r3, r3, #9
 8000fec:	4013      	ands	r3, r2
 8000fee:	d009      	beq.n	8001004 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000ff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ff2:	480f      	ldr	r0, [pc, #60]	; (8001030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000ff4:	f7ff f888 	bl	8000108 <__udivsi3>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	001a      	movs	r2, r3
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	4353      	muls	r3, r2
 8001000:	637b      	str	r3, [r7, #52]	; 0x34
 8001002:	e003      	b.n	800100c <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001008:	4353      	muls	r3, r2
 800100a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800100c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001010:	e002      	b.n	8001018 <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001014:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001016:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800101a:	0018      	movs	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	b00f      	add	sp, #60	; 0x3c
 8001020:	bd90      	pop	{r4, r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	08003554 	.word	0x08003554
 8001028:	08003564 	.word	0x08003564
 800102c:	40021000 	.word	0x40021000
 8001030:	007a1200 	.word	0x007a1200
 8001034:	003d0900 	.word	0x003d0900

08001038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800103c:	4b02      	ldr	r3, [pc, #8]	; (8001048 <HAL_RCC_GetHCLKFreq+0x10>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	0018      	movs	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	20000000 	.word	0x20000000

0800104c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001050:	f7ff fff2 	bl	8001038 <HAL_RCC_GetHCLKFreq>
 8001054:	0001      	movs	r1, r0
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	0a1b      	lsrs	r3, r3, #8
 800105c:	2207      	movs	r2, #7
 800105e:	4013      	ands	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001062:	5cd3      	ldrb	r3, [r2, r3]
 8001064:	40d9      	lsrs	r1, r3
 8001066:	000b      	movs	r3, r1
}    
 8001068:	0018      	movs	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	40021000 	.word	0x40021000
 8001074:	080035a4 	.word	0x080035a4

08001078 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	025b      	lsls	r3, r3, #9
 8001090:	4013      	ands	r3, r2
 8001092:	d100      	bne.n	8001096 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001094:	e08e      	b.n	80011b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001096:	2317      	movs	r3, #23
 8001098:	18fb      	adds	r3, r7, r3
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800109e:	4b5f      	ldr	r3, [pc, #380]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80010a0:	69da      	ldr	r2, [r3, #28]
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	055b      	lsls	r3, r3, #21
 80010a6:	4013      	ands	r3, r2
 80010a8:	d111      	bne.n	80010ce <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	4b5c      	ldr	r3, [pc, #368]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80010ac:	4a5b      	ldr	r2, [pc, #364]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80010ae:	69d2      	ldr	r2, [r2, #28]
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	0549      	lsls	r1, r1, #21
 80010b4:	430a      	orrs	r2, r1
 80010b6:	61da      	str	r2, [r3, #28]
 80010b8:	4b58      	ldr	r3, [pc, #352]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80010ba:	69da      	ldr	r2, [r3, #28]
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	055b      	lsls	r3, r3, #21
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010c6:	2317      	movs	r3, #23
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ce:	4b54      	ldr	r3, [pc, #336]	; (8001220 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	2380      	movs	r3, #128	; 0x80
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4013      	ands	r3, r2
 80010d8:	d11a      	bne.n	8001110 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010da:	4b51      	ldr	r3, [pc, #324]	; (8001220 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80010dc:	4a50      	ldr	r2, [pc, #320]	; (8001220 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	0049      	lsls	r1, r1, #1
 80010e4:	430a      	orrs	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010e8:	f7ff f8d6 	bl	8000298 <HAL_GetTick>
 80010ec:	0003      	movs	r3, r0
 80010ee:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f0:	e008      	b.n	8001104 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f2:	f7ff f8d1 	bl	8000298 <HAL_GetTick>
 80010f6:	0002      	movs	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b64      	cmp	r3, #100	; 0x64
 80010fe:	d901      	bls.n	8001104 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e086      	b.n	8001212 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001104:	4b46      	ldr	r3, [pc, #280]	; (8001220 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4013      	ands	r3, r2
 800110e:	d0f0      	beq.n	80010f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001110:	4b42      	ldr	r3, [pc, #264]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001112:	6a1a      	ldr	r2, [r3, #32]
 8001114:	23c0      	movs	r3, #192	; 0xc0
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4013      	ands	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d034      	beq.n	800118c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	23c0      	movs	r3, #192	; 0xc0
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	401a      	ands	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	429a      	cmp	r2, r3
 8001130:	d02c      	beq.n	800118c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001132:	4b3a      	ldr	r3, [pc, #232]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	4a3b      	ldr	r2, [pc, #236]	; (8001224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001138:	4013      	ands	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800113c:	4b37      	ldr	r3, [pc, #220]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800113e:	4a37      	ldr	r2, [pc, #220]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001140:	6a12      	ldr	r2, [r2, #32]
 8001142:	2180      	movs	r1, #128	; 0x80
 8001144:	0249      	lsls	r1, r1, #9
 8001146:	430a      	orrs	r2, r1
 8001148:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800114a:	4b34      	ldr	r3, [pc, #208]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800114c:	4a33      	ldr	r2, [pc, #204]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800114e:	6a12      	ldr	r2, [r2, #32]
 8001150:	4935      	ldr	r1, [pc, #212]	; (8001228 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001152:	400a      	ands	r2, r1
 8001154:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001156:	4b31      	ldr	r3, [pc, #196]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2201      	movs	r2, #1
 8001160:	4013      	ands	r3, r2
 8001162:	d013      	beq.n	800118c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff f898 	bl	8000298 <HAL_GetTick>
 8001168:	0003      	movs	r3, r0
 800116a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800116c:	e009      	b.n	8001182 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800116e:	f7ff f893 	bl	8000298 <HAL_GetTick>
 8001172:	0002      	movs	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	4a2c      	ldr	r2, [pc, #176]	; (800122c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d901      	bls.n	8001182 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e047      	b.n	8001212 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001182:	4b26      	ldr	r3, [pc, #152]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001184:	6a1b      	ldr	r3, [r3, #32]
 8001186:	2202      	movs	r2, #2
 8001188:	4013      	ands	r3, r2
 800118a:	d0f0      	beq.n	800116e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800118c:	4a23      	ldr	r2, [pc, #140]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800118e:	4b23      	ldr	r3, [pc, #140]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001190:	6a1b      	ldr	r3, [r3, #32]
 8001192:	4924      	ldr	r1, [pc, #144]	; (8001224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001194:	4019      	ands	r1, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	430b      	orrs	r3, r1
 800119c:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800119e:	2317      	movs	r3, #23
 80011a0:	18fb      	adds	r3, r7, r3
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d105      	bne.n	80011b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80011aa:	4a1c      	ldr	r2, [pc, #112]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80011ac:	69d2      	ldr	r2, [r2, #28]
 80011ae:	4920      	ldr	r1, [pc, #128]	; (8001230 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80011b0:	400a      	ands	r2, r1
 80011b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2201      	movs	r2, #1
 80011ba:	4013      	ands	r3, r2
 80011bc:	d009      	beq.n	80011d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80011be:	4a17      	ldr	r2, [pc, #92]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	2103      	movs	r1, #3
 80011c6:	438b      	bics	r3, r1
 80011c8:	0019      	movs	r1, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	430b      	orrs	r3, r1
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2220      	movs	r2, #32
 80011d8:	4013      	ands	r3, r2
 80011da:	d009      	beq.n	80011f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80011dc:	4a0f      	ldr	r2, [pc, #60]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	2110      	movs	r1, #16
 80011e4:	438b      	bics	r3, r1
 80011e6:	0019      	movs	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	430b      	orrs	r3, r1
 80011ee:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4013      	ands	r3, r2
 80011fa:	d009      	beq.n	8001210 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80011fc:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	2140      	movs	r1, #64	; 0x40
 8001204:	438b      	bics	r3, r1
 8001206:	0019      	movs	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	430b      	orrs	r3, r1
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	0018      	movs	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	b006      	add	sp, #24
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	40021000 	.word	0x40021000
 8001220:	40007000 	.word	0x40007000
 8001224:	fffffcff 	.word	0xfffffcff
 8001228:	fffeffff 	.word	0xfffeffff
 800122c:	00001388 	.word	0x00001388
 8001230:	efffffff 	.word	0xefffffff

08001234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e047      	b.n	80012d6 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2269      	movs	r2, #105	; 0x69
 800124a:	5c9b      	ldrb	r3, [r3, r2]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d107      	bne.n	8001262 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2268      	movs	r2, #104	; 0x68
 8001256:	2100      	movs	r1, #0
 8001258:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	0018      	movs	r0, r3
 800125e:	f000 fdd9 	bl	8001e14 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2269      	movs	r2, #105	; 0x69
 8001266:	2124      	movs	r1, #36	; 0x24
 8001268:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	6812      	ldr	r2, [r2, #0]
 8001274:	2101      	movs	r1, #1
 8001276:	438a      	bics	r2, r1
 8001278:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	0018      	movs	r0, r3
 800127e:	f000 f9a3 	bl	80015c8 <UART_SetConfig>
 8001282:	0003      	movs	r3, r0
 8001284:	2b01      	cmp	r3, #1
 8001286:	d101      	bne.n	800128c <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e024      	b.n	80012d6 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	0018      	movs	r0, r3
 8001298:	f000 fb0c 	bl	80018b4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	6852      	ldr	r2, [r2, #4]
 80012a6:	490e      	ldr	r1, [pc, #56]	; (80012e0 <HAL_UART_Init+0xac>)
 80012a8:	400a      	ands	r2, r1
 80012aa:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	6892      	ldr	r2, [r2, #8]
 80012b6:	212a      	movs	r1, #42	; 0x2a
 80012b8:	438a      	bics	r2, r1
 80012ba:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	2101      	movs	r1, #1
 80012c8:	430a      	orrs	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	0018      	movs	r0, r3
 80012d0:	f000 fb9c 	bl	8001a0c <UART_CheckIdleState>
 80012d4:	0003      	movs	r3, r0
}
 80012d6:	0018      	movs	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	ffffb7ff 	.word	0xffffb7ff

080012e4 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	1dbb      	adds	r3, r7, #6
 80012f2:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2269      	movs	r2, #105	; 0x69
 80012fc:	5c9b      	ldrb	r3, [r3, r2]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b20      	cmp	r3, #32
 8001302:	d000      	beq.n	8001306 <HAL_UART_Transmit+0x22>
 8001304:	e08c      	b.n	8001420 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_UART_Transmit+0x30>
 800130c:	1dbb      	adds	r3, r7, #6
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e084      	b.n	8001422 <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	015b      	lsls	r3, r3, #5
 8001320:	429a      	cmp	r2, r3
 8001322:	d109      	bne.n	8001338 <HAL_UART_Transmit+0x54>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d105      	bne.n	8001338 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	2201      	movs	r2, #1
 8001330:	4013      	ands	r3, r2
 8001332:	d001      	beq.n	8001338 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e074      	b.n	8001422 <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2268      	movs	r2, #104	; 0x68
 800133c:	5c9b      	ldrb	r3, [r3, r2]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d101      	bne.n	8001346 <HAL_UART_Transmit+0x62>
 8001342:	2302      	movs	r3, #2
 8001344:	e06d      	b.n	8001422 <HAL_UART_Transmit+0x13e>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2268      	movs	r2, #104	; 0x68
 800134a:	2101      	movs	r1, #1
 800134c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2200      	movs	r2, #0
 8001352:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2269      	movs	r2, #105	; 0x69
 8001358:	2121      	movs	r1, #33	; 0x21
 800135a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800135c:	f7fe ff9c 	bl	8000298 <HAL_GetTick>
 8001360:	0003      	movs	r3, r0
 8001362:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	1dba      	adds	r2, r7, #6
 8001368:	2150      	movs	r1, #80	; 0x50
 800136a:	8812      	ldrh	r2, [r2, #0]
 800136c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1dba      	adds	r2, r7, #6
 8001372:	2152      	movs	r1, #82	; 0x52
 8001374:	8812      	ldrh	r2, [r2, #0]
 8001376:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8001378:	e035      	b.n	80013e6 <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2252      	movs	r2, #82	; 0x52
 800137e:	5a9b      	ldrh	r3, [r3, r2]
 8001380:	b29b      	uxth	r3, r3
 8001382:	3b01      	subs	r3, #1
 8001384:	b299      	uxth	r1, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2252      	movs	r2, #82	; 0x52
 800138a:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	0013      	movs	r3, r2
 8001396:	2200      	movs	r2, #0
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	f000 fb89 	bl	8001ab0 <UART_WaitOnFlagUntilTimeout>
 800139e:	1e03      	subs	r3, r0, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e03d      	b.n	8001422 <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	015b      	lsls	r3, r3, #5
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d111      	bne.n	80013d6 <HAL_UART_Transmit+0xf2>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10d      	bne.n	80013d6 <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	8812      	ldrh	r2, [r2, #0]
 80013c6:	05d2      	lsls	r2, r2, #23
 80013c8:	0dd2      	lsrs	r2, r2, #23
 80013ca:	b292      	uxth	r2, r2
 80013cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3302      	adds	r3, #2
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	e007      	b.n	80013e6 <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1c59      	adds	r1, r3, #1
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2252      	movs	r2, #82	; 0x52
 80013ea:	5a9b      	ldrh	r3, [r3, r2]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1c3      	bne.n	800137a <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	0013      	movs	r3, r2
 80013fc:	2200      	movs	r2, #0
 80013fe:	2140      	movs	r1, #64	; 0x40
 8001400:	f000 fb56 	bl	8001ab0 <UART_WaitOnFlagUntilTimeout>
 8001404:	1e03      	subs	r3, r0, #0
 8001406:	d001      	beq.n	800140c <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e00a      	b.n	8001422 <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2269      	movs	r2, #105	; 0x69
 8001410:	2120      	movs	r1, #32
 8001412:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2268      	movs	r2, #104	; 0x68
 8001418:	2100      	movs	r1, #0
 800141a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	e000      	b.n	8001422 <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8001420:	2302      	movs	r3, #2
  }
}
 8001422:	0018      	movs	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	b006      	add	sp, #24
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af02      	add	r7, sp, #8
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	1dbb      	adds	r3, r7, #6
 800143a:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	226a      	movs	r2, #106	; 0x6a
 8001444:	5c9b      	ldrb	r3, [r3, r2]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b20      	cmp	r3, #32
 800144a:	d000      	beq.n	800144e <HAL_UART_Receive+0x22>
 800144c:	e0b4      	b.n	80015b8 <HAL_UART_Receive+0x18c>
  {
    if((pData == NULL ) || (Size == 0U))
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_UART_Receive+0x30>
 8001454:	1dbb      	adds	r3, r7, #6
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_UART_Receive+0x34>
    {
      return  HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0ac      	b.n	80015ba <HAL_UART_Receive+0x18e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	015b      	lsls	r3, r3, #5
 8001468:	429a      	cmp	r2, r3
 800146a:	d109      	bne.n	8001480 <HAL_UART_Receive+0x54>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d105      	bne.n	8001480 <HAL_UART_Receive+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	2201      	movs	r2, #1
 8001478:	4013      	ands	r3, r2
 800147a:	d001      	beq.n	8001480 <HAL_UART_Receive+0x54>
      {
        return  HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e09c      	b.n	80015ba <HAL_UART_Receive+0x18e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2268      	movs	r2, #104	; 0x68
 8001484:	5c9b      	ldrb	r3, [r3, r2]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <HAL_UART_Receive+0x62>
 800148a:	2302      	movs	r3, #2
 800148c:	e095      	b.n	80015ba <HAL_UART_Receive+0x18e>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2268      	movs	r2, #104	; 0x68
 8001492:	2101      	movs	r1, #1
 8001494:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	226a      	movs	r2, #106	; 0x6a
 80014a0:	2122      	movs	r1, #34	; 0x22
 80014a2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80014a4:	f7fe fef8 	bl	8000298 <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	61fb      	str	r3, [r7, #28]

    huart->RxXferSize = Size;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1dba      	adds	r2, r7, #6
 80014b0:	2158      	movs	r1, #88	; 0x58
 80014b2:	8812      	ldrh	r2, [r2, #0]
 80014b4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	1dba      	adds	r2, r7, #6
 80014ba:	215a      	movs	r1, #90	; 0x5a
 80014bc:	8812      	ldrh	r2, [r2, #0]
 80014be:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	015b      	lsls	r3, r3, #5
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d10d      	bne.n	80014e8 <HAL_UART_Receive+0xbc>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d104      	bne.n	80014de <HAL_UART_Receive+0xb2>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	225c      	movs	r2, #92	; 0x5c
 80014d8:	493a      	ldr	r1, [pc, #232]	; (80015c4 <HAL_UART_Receive+0x198>)
 80014da:	5299      	strh	r1, [r3, r2]
 80014dc:	e015      	b.n	800150a <HAL_UART_Receive+0xde>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	225c      	movs	r2, #92	; 0x5c
 80014e2:	21ff      	movs	r1, #255	; 0xff
 80014e4:	5299      	strh	r1, [r3, r2]
 80014e6:	e010      	b.n	800150a <HAL_UART_Receive+0xde>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10c      	bne.n	800150a <HAL_UART_Receive+0xde>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d104      	bne.n	8001502 <HAL_UART_Receive+0xd6>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	225c      	movs	r2, #92	; 0x5c
 80014fc:	21ff      	movs	r1, #255	; 0xff
 80014fe:	5299      	strh	r1, [r3, r2]
 8001500:	e003      	b.n	800150a <HAL_UART_Receive+0xde>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	225c      	movs	r2, #92	; 0x5c
 8001506:	217f      	movs	r1, #127	; 0x7f
 8001508:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800150a:	231a      	movs	r3, #26
 800150c:	18fb      	adds	r3, r7, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	215c      	movs	r1, #92	; 0x5c
 8001512:	5a52      	ldrh	r2, [r2, r1]
 8001514:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8001516:	e03f      	b.n	8001598 <HAL_UART_Receive+0x16c>
    {
      huart->RxXferCount--;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	225a      	movs	r2, #90	; 0x5a
 800151c:	5a9b      	ldrh	r3, [r3, r2]
 800151e:	b29b      	uxth	r3, r3
 8001520:	3b01      	subs	r3, #1
 8001522:	b299      	uxth	r1, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	225a      	movs	r2, #90	; 0x5a
 8001528:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	0013      	movs	r3, r2
 8001534:	2200      	movs	r2, #0
 8001536:	2120      	movs	r1, #32
 8001538:	f000 faba 	bl	8001ab0 <UART_WaitOnFlagUntilTimeout>
 800153c:	1e03      	subs	r3, r0, #0
 800153e:	d001      	beq.n	8001544 <HAL_UART_Receive+0x118>
      {
        return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e03a      	b.n	80015ba <HAL_UART_Receive+0x18e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	015b      	lsls	r3, r3, #5
 800154c:	429a      	cmp	r2, r3
 800154e:	d114      	bne.n	800157a <HAL_UART_Receive+0x14e>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d110      	bne.n	800157a <HAL_UART_Receive+0x14e>
      {
        tmp = (uint16_t*) pData ;
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001562:	b29b      	uxth	r3, r3
 8001564:	221a      	movs	r2, #26
 8001566:	18ba      	adds	r2, r7, r2
 8001568:	8812      	ldrh	r2, [r2, #0]
 800156a:	4013      	ands	r3, r2
 800156c:	b29a      	uxth	r2, r3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3302      	adds	r3, #2
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	e00e      	b.n	8001598 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	60ba      	str	r2, [r7, #8]
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001586:	b292      	uxth	r2, r2
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	211a      	movs	r1, #26
 800158c:	1879      	adds	r1, r7, r1
 800158e:	8809      	ldrh	r1, [r1, #0]
 8001590:	b2c9      	uxtb	r1, r1
 8001592:	400a      	ands	r2, r1
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	225a      	movs	r2, #90	; 0x5a
 800159c:	5a9b      	ldrh	r3, [r3, r2]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1b9      	bne.n	8001518 <HAL_UART_Receive+0xec>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	226a      	movs	r2, #106	; 0x6a
 80015a8:	2120      	movs	r1, #32
 80015aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2268      	movs	r2, #104	; 0x68
 80015b0:	2100      	movs	r1, #0
 80015b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e000      	b.n	80015ba <HAL_UART_Receive+0x18e>
  }
  else
  {
    return HAL_BUSY;
 80015b8:	2302      	movs	r3, #2
  }
}
 80015ba:	0018      	movs	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	b008      	add	sp, #32
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	000001ff 	.word	0x000001ff

080015c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80015d4:	2317      	movs	r3, #23
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	2210      	movs	r2, #16
 80015da:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 80015dc:	230a      	movs	r3, #10
 80015de:	18fb      	adds	r3, r7, r3
 80015e0:	2200      	movs	r2, #0
 80015e2:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 80015e4:	2314      	movs	r3, #20
 80015e6:	18fb      	adds	r3, r7, r3
 80015e8:	2200      	movs	r2, #0
 80015ea:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 80015ec:	2313      	movs	r3, #19
 80015ee:	18fb      	adds	r3, r7, r3
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	4313      	orrs	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	499f      	ldr	r1, [pc, #636]	; (8001894 <UART_SetConfig+0x2cc>)
 8001618:	4011      	ands	r1, r2
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	6852      	ldr	r2, [r2, #4]
 800162a:	499b      	ldr	r1, [pc, #620]	; (8001898 <UART_SetConfig+0x2d0>)
 800162c:	4011      	ands	r1, r2
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68d2      	ldr	r2, [r2, #12]
 8001632:	430a      	orrs	r2, r1
 8001634:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699a      	ldr	r2, [r3, #24]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4313      	orrs	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	6892      	ldr	r2, [r2, #8]
 800164c:	4993      	ldr	r1, [pc, #588]	; (800189c <UART_SetConfig+0x2d4>)
 800164e:	4011      	ands	r1, r2
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	430a      	orrs	r2, r1
 8001654:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a91      	ldr	r2, [pc, #580]	; (80018a0 <UART_SetConfig+0x2d8>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d125      	bne.n	80016ac <UART_SetConfig+0xe4>
 8001660:	4b90      	ldr	r3, [pc, #576]	; (80018a4 <UART_SetConfig+0x2dc>)
 8001662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001664:	2203      	movs	r2, #3
 8001666:	4013      	ands	r3, r2
 8001668:	2b01      	cmp	r3, #1
 800166a:	d00f      	beq.n	800168c <UART_SetConfig+0xc4>
 800166c:	d304      	bcc.n	8001678 <UART_SetConfig+0xb0>
 800166e:	2b02      	cmp	r3, #2
 8001670:	d011      	beq.n	8001696 <UART_SetConfig+0xce>
 8001672:	2b03      	cmp	r3, #3
 8001674:	d005      	beq.n	8001682 <UART_SetConfig+0xba>
 8001676:	e013      	b.n	80016a0 <UART_SetConfig+0xd8>
 8001678:	2317      	movs	r3, #23
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
 8001680:	e022      	b.n	80016c8 <UART_SetConfig+0x100>
 8001682:	2317      	movs	r3, #23
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	2202      	movs	r2, #2
 8001688:	701a      	strb	r2, [r3, #0]
 800168a:	e01d      	b.n	80016c8 <UART_SetConfig+0x100>
 800168c:	2317      	movs	r3, #23
 800168e:	18fb      	adds	r3, r7, r3
 8001690:	2204      	movs	r2, #4
 8001692:	701a      	strb	r2, [r3, #0]
 8001694:	e018      	b.n	80016c8 <UART_SetConfig+0x100>
 8001696:	2317      	movs	r3, #23
 8001698:	18fb      	adds	r3, r7, r3
 800169a:	2208      	movs	r2, #8
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	e013      	b.n	80016c8 <UART_SetConfig+0x100>
 80016a0:	2317      	movs	r3, #23
 80016a2:	18fb      	adds	r3, r7, r3
 80016a4:	2210      	movs	r2, #16
 80016a6:	701a      	strb	r2, [r3, #0]
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	e00d      	b.n	80016c8 <UART_SetConfig+0x100>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a7d      	ldr	r2, [pc, #500]	; (80018a8 <UART_SetConfig+0x2e0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d104      	bne.n	80016c0 <UART_SetConfig+0xf8>
 80016b6:	2317      	movs	r3, #23
 80016b8:	18fb      	adds	r3, r7, r3
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
 80016be:	e003      	b.n	80016c8 <UART_SetConfig+0x100>
 80016c0:	2317      	movs	r3, #23
 80016c2:	18fb      	adds	r3, r7, r3
 80016c4:	2210      	movs	r2, #16
 80016c6:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69da      	ldr	r2, [r3, #28]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d000      	beq.n	80016d6 <UART_SetConfig+0x10e>
 80016d4:	e07b      	b.n	80017ce <UART_SetConfig+0x206>
  {
    switch (clocksource)
 80016d6:	2317      	movs	r3, #23
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d01c      	beq.n	800171a <UART_SetConfig+0x152>
 80016e0:	dc02      	bgt.n	80016e8 <UART_SetConfig+0x120>
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <UART_SetConfig+0x12a>
 80016e6:	e04f      	b.n	8001788 <UART_SetConfig+0x1c0>
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d027      	beq.n	800173c <UART_SetConfig+0x174>
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d039      	beq.n	8001764 <UART_SetConfig+0x19c>
 80016f0:	e04a      	b.n	8001788 <UART_SetConfig+0x1c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80016f2:	f7ff fcab 	bl	800104c <HAL_RCC_GetPCLK1Freq>
 80016f6:	0003      	movs	r3, r0
 80016f8:	005a      	lsls	r2, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	085b      	lsrs	r3, r3, #1
 8001700:	18d2      	adds	r2, r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	0019      	movs	r1, r3
 8001708:	0010      	movs	r0, r2
 800170a:	f7fe fcfd 	bl	8000108 <__udivsi3>
 800170e:	0003      	movs	r3, r0
 8001710:	001a      	movs	r2, r3
 8001712:	2314      	movs	r3, #20
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	801a      	strh	r2, [r3, #0]
        break;
 8001718:	e03b      	b.n	8001792 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	085b      	lsrs	r3, r3, #1
 8001720:	4a62      	ldr	r2, [pc, #392]	; (80018ac <UART_SetConfig+0x2e4>)
 8001722:	189a      	adds	r2, r3, r2
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	0019      	movs	r1, r3
 800172a:	0010      	movs	r0, r2
 800172c:	f7fe fcec 	bl	8000108 <__udivsi3>
 8001730:	0003      	movs	r3, r0
 8001732:	001a      	movs	r2, r3
 8001734:	2314      	movs	r3, #20
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	801a      	strh	r2, [r3, #0]
        break;
 800173a:	e02a      	b.n	8001792 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800173c:	f7ff fc1c 	bl	8000f78 <HAL_RCC_GetSysClockFreq>
 8001740:	0003      	movs	r3, r0
 8001742:	005a      	lsls	r2, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	085b      	lsrs	r3, r3, #1
 800174a:	18d2      	adds	r2, r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	0019      	movs	r1, r3
 8001752:	0010      	movs	r0, r2
 8001754:	f7fe fcd8 	bl	8000108 <__udivsi3>
 8001758:	0003      	movs	r3, r0
 800175a:	001a      	movs	r2, r3
 800175c:	2314      	movs	r3, #20
 800175e:	18fb      	adds	r3, r7, r3
 8001760:	801a      	strh	r2, [r3, #0]
        break;
 8001762:	e016      	b.n	8001792 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	2280      	movs	r2, #128	; 0x80
 800176c:	0252      	lsls	r2, r2, #9
 800176e:	189a      	adds	r2, r3, r2
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	0019      	movs	r1, r3
 8001776:	0010      	movs	r0, r2
 8001778:	f7fe fcc6 	bl	8000108 <__udivsi3>
 800177c:	0003      	movs	r3, r0
 800177e:	001a      	movs	r2, r3
 8001780:	2314      	movs	r3, #20
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	801a      	strh	r2, [r3, #0]
        break;
 8001786:	e004      	b.n	8001792 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001788:	2313      	movs	r3, #19
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
        break;
 8001790:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001792:	230a      	movs	r3, #10
 8001794:	18fb      	adds	r3, r7, r3
 8001796:	2214      	movs	r2, #20
 8001798:	18ba      	adds	r2, r7, r2
 800179a:	8812      	ldrh	r2, [r2, #0]
 800179c:	210f      	movs	r1, #15
 800179e:	438a      	bics	r2, r1
 80017a0:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80017a2:	2314      	movs	r3, #20
 80017a4:	18fb      	adds	r3, r7, r3
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	105b      	asrs	r3, r3, #1
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	2207      	movs	r2, #7
 80017ae:	4013      	ands	r3, r2
 80017b0:	b299      	uxth	r1, r3
 80017b2:	230a      	movs	r3, #10
 80017b4:	18fb      	adds	r3, r7, r3
 80017b6:	220a      	movs	r2, #10
 80017b8:	18ba      	adds	r2, r7, r2
 80017ba:	8812      	ldrh	r2, [r2, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	220a      	movs	r2, #10
 80017c6:	18ba      	adds	r2, r7, r2
 80017c8:	8812      	ldrh	r2, [r2, #0]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	e05b      	b.n	8001886 <UART_SetConfig+0x2be>
  }
  else
  {
    switch (clocksource)
 80017ce:	2317      	movs	r3, #23
 80017d0:	18fb      	adds	r3, r7, r3
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d01b      	beq.n	8001810 <UART_SetConfig+0x248>
 80017d8:	dc02      	bgt.n	80017e0 <UART_SetConfig+0x218>
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <UART_SetConfig+0x222>
 80017de:	e04d      	b.n	800187c <UART_SetConfig+0x2b4>
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d026      	beq.n	8001832 <UART_SetConfig+0x26a>
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d037      	beq.n	8001858 <UART_SetConfig+0x290>
 80017e8:	e048      	b.n	800187c <UART_SetConfig+0x2b4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681c      	ldr	r4, [r3, #0]
 80017ee:	f7ff fc2d 	bl	800104c <HAL_RCC_GetPCLK1Freq>
 80017f2:	0002      	movs	r2, r0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	085b      	lsrs	r3, r3, #1
 80017fa:	18d2      	adds	r2, r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	0019      	movs	r1, r3
 8001802:	0010      	movs	r0, r2
 8001804:	f7fe fc80 	bl	8000108 <__udivsi3>
 8001808:	0003      	movs	r3, r0
 800180a:	b29b      	uxth	r3, r3
 800180c:	60e3      	str	r3, [r4, #12]
        break;
 800180e:	e03a      	b.n	8001886 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681c      	ldr	r4, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	085b      	lsrs	r3, r3, #1
 800181a:	4a25      	ldr	r2, [pc, #148]	; (80018b0 <UART_SetConfig+0x2e8>)
 800181c:	189a      	adds	r2, r3, r2
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	0019      	movs	r1, r3
 8001824:	0010      	movs	r0, r2
 8001826:	f7fe fc6f 	bl	8000108 <__udivsi3>
 800182a:	0003      	movs	r3, r0
 800182c:	b29b      	uxth	r3, r3
 800182e:	60e3      	str	r3, [r4, #12]
        break;
 8001830:	e029      	b.n	8001886 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681c      	ldr	r4, [r3, #0]
 8001836:	f7ff fb9f 	bl	8000f78 <HAL_RCC_GetSysClockFreq>
 800183a:	0002      	movs	r2, r0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	085b      	lsrs	r3, r3, #1
 8001842:	18d2      	adds	r2, r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	0019      	movs	r1, r3
 800184a:	0010      	movs	r0, r2
 800184c:	f7fe fc5c 	bl	8000108 <__udivsi3>
 8001850:	0003      	movs	r3, r0
 8001852:	b29b      	uxth	r3, r3
 8001854:	60e3      	str	r3, [r4, #12]
        break;
 8001856:	e016      	b.n	8001886 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681c      	ldr	r4, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	085b      	lsrs	r3, r3, #1
 8001862:	2280      	movs	r2, #128	; 0x80
 8001864:	0212      	lsls	r2, r2, #8
 8001866:	189a      	adds	r2, r3, r2
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	0019      	movs	r1, r3
 800186e:	0010      	movs	r0, r2
 8001870:	f7fe fc4a 	bl	8000108 <__udivsi3>
 8001874:	0003      	movs	r3, r0
 8001876:	b29b      	uxth	r3, r3
 8001878:	60e3      	str	r3, [r4, #12]
        break;
 800187a:	e004      	b.n	8001886 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800187c:	2313      	movs	r3, #19
 800187e:	18fb      	adds	r3, r7, r3
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
        break;
 8001884:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8001886:	2313      	movs	r3, #19
 8001888:	18fb      	adds	r3, r7, r3
 800188a:	781b      	ldrb	r3, [r3, #0]

}
 800188c:	0018      	movs	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	b007      	add	sp, #28
 8001892:	bd90      	pop	{r4, r7, pc}
 8001894:	ffff69f3 	.word	0xffff69f3
 8001898:	ffffcfff 	.word	0xffffcfff
 800189c:	fffff4ff 	.word	0xfffff4ff
 80018a0:	40013800 	.word	0x40013800
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40004400 	.word	0x40004400
 80018ac:	00f42400 	.word	0x00f42400
 80018b0:	007a1200 	.word	0x007a1200

080018b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	2201      	movs	r2, #1
 80018c2:	4013      	ands	r3, r2
 80018c4:	d00a      	beq.n	80018dc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	6852      	ldr	r2, [r2, #4]
 80018d0:	4945      	ldr	r1, [pc, #276]	; (80019e8 <UART_AdvFeatureConfig+0x134>)
 80018d2:	4011      	ands	r1, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80018d8:	430a      	orrs	r2, r1
 80018da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	2202      	movs	r2, #2
 80018e2:	4013      	ands	r3, r2
 80018e4:	d00a      	beq.n	80018fc <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	6852      	ldr	r2, [r2, #4]
 80018f0:	493e      	ldr	r1, [pc, #248]	; (80019ec <UART_AdvFeatureConfig+0x138>)
 80018f2:	4011      	ands	r1, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80018f8:	430a      	orrs	r2, r1
 80018fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	2204      	movs	r2, #4
 8001902:	4013      	ands	r3, r2
 8001904:	d00a      	beq.n	800191c <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	6852      	ldr	r2, [r2, #4]
 8001910:	4937      	ldr	r1, [pc, #220]	; (80019f0 <UART_AdvFeatureConfig+0x13c>)
 8001912:	4011      	ands	r1, r2
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001918:	430a      	orrs	r2, r1
 800191a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	2208      	movs	r2, #8
 8001922:	4013      	ands	r3, r2
 8001924:	d00a      	beq.n	800193c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6812      	ldr	r2, [r2, #0]
 800192e:	6852      	ldr	r2, [r2, #4]
 8001930:	4930      	ldr	r1, [pc, #192]	; (80019f4 <UART_AdvFeatureConfig+0x140>)
 8001932:	4011      	ands	r1, r2
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001938:	430a      	orrs	r2, r1
 800193a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	2210      	movs	r2, #16
 8001942:	4013      	ands	r3, r2
 8001944:	d00a      	beq.n	800195c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	6892      	ldr	r2, [r2, #8]
 8001950:	4929      	ldr	r1, [pc, #164]	; (80019f8 <UART_AdvFeatureConfig+0x144>)
 8001952:	4011      	ands	r1, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001958:	430a      	orrs	r2, r1
 800195a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	2220      	movs	r2, #32
 8001962:	4013      	ands	r3, r2
 8001964:	d00a      	beq.n	800197c <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	6892      	ldr	r2, [r2, #8]
 8001970:	4922      	ldr	r1, [pc, #136]	; (80019fc <UART_AdvFeatureConfig+0x148>)
 8001972:	4011      	ands	r1, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001978:	430a      	orrs	r2, r1
 800197a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	2240      	movs	r2, #64	; 0x40
 8001982:	4013      	ands	r3, r2
 8001984:	d01b      	beq.n	80019be <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	6852      	ldr	r2, [r2, #4]
 8001990:	491b      	ldr	r1, [pc, #108]	; (8001a00 <UART_AdvFeatureConfig+0x14c>)
 8001992:	4011      	ands	r1, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001998:	430a      	orrs	r2, r1
 800199a:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	035b      	lsls	r3, r3, #13
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d10a      	bne.n	80019be <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	6852      	ldr	r2, [r2, #4]
 80019b2:	4914      	ldr	r1, [pc, #80]	; (8001a04 <UART_AdvFeatureConfig+0x150>)
 80019b4:	4011      	ands	r1, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019ba:	430a      	orrs	r2, r1
 80019bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	2280      	movs	r2, #128	; 0x80
 80019c4:	4013      	ands	r3, r2
 80019c6:	d00a      	beq.n	80019de <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	6852      	ldr	r2, [r2, #4]
 80019d2:	490d      	ldr	r1, [pc, #52]	; (8001a08 <UART_AdvFeatureConfig+0x154>)
 80019d4:	4011      	ands	r1, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019da:	430a      	orrs	r2, r1
 80019dc:	605a      	str	r2, [r3, #4]
  }
}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b002      	add	sp, #8
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	fffdffff 	.word	0xfffdffff
 80019ec:	fffeffff 	.word	0xfffeffff
 80019f0:	fffbffff 	.word	0xfffbffff
 80019f4:	ffff7fff 	.word	0xffff7fff
 80019f8:	ffffefff 	.word	0xffffefff
 80019fc:	ffffdfff 	.word	0xffffdfff
 8001a00:	ffefffff 	.word	0xffefffff
 8001a04:	ff9fffff 	.word	0xff9fffff
 8001a08:	fff7ffff 	.word	0xfff7ffff

08001a0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001a1e:	f7fe fc3b 	bl	8000298 <HAL_GetTick>
 8001a22:	0003      	movs	r3, r0
 8001a24:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a1f      	ldr	r2, [pc, #124]	; (8001aa8 <UART_CheckIdleState+0x9c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d129      	bne.n	8001a84 <UART_CheckIdleState+0x78>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2208      	movs	r2, #8
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d10d      	bne.n	8001a5a <UART_CheckIdleState+0x4e>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	0399      	lsls	r1, r3, #14
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <UART_CheckIdleState+0xa0>)
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	0013      	movs	r3, r2
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f000 f82f 	bl	8001ab0 <UART_WaitOnFlagUntilTimeout>
 8001a52:	1e03      	subs	r3, r0, #0
 8001a54:	d001      	beq.n	8001a5a <UART_CheckIdleState+0x4e>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e021      	b.n	8001a9e <UART_CheckIdleState+0x92>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2204      	movs	r2, #4
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d10d      	bne.n	8001a84 <UART_CheckIdleState+0x78>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	03d9      	lsls	r1, r3, #15
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <UART_CheckIdleState+0xa0>)
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	0013      	movs	r3, r2
 8001a76:	2200      	movs	r2, #0
 8001a78:	f000 f81a 	bl	8001ab0 <UART_WaitOnFlagUntilTimeout>
 8001a7c:	1e03      	subs	r3, r0, #0
 8001a7e:	d001      	beq.n	8001a84 <UART_CheckIdleState+0x78>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e00c      	b.n	8001a9e <UART_CheckIdleState+0x92>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2269      	movs	r2, #105	; 0x69
 8001a88:	2120      	movs	r1, #32
 8001a8a:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	226a      	movs	r2, #106	; 0x6a
 8001a90:	2120      	movs	r1, #32
 8001a92:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2268      	movs	r2, #104	; 0x68
 8001a98:	2100      	movs	r1, #0
 8001a9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b004      	add	sp, #16
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	40013800 	.word	0x40013800
 8001aac:	01ffffff 	.word	0x01ffffff

08001ab0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	1dfb      	adds	r3, r7, #7
 8001abe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ac0:	e02b      	b.n	8001b1a <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	d028      	beq.n	8001b1a <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d007      	beq.n	8001ade <UART_WaitOnFlagUntilTimeout+0x2e>
 8001ace:	f7fe fbe3 	bl	8000298 <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	1ad2      	subs	r2, r2, r3
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d91d      	bls.n	8001b1a <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	4916      	ldr	r1, [pc, #88]	; (8001b44 <UART_WaitOnFlagUntilTimeout+0x94>)
 8001aea:	400a      	ands	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	6892      	ldr	r2, [r2, #8]
 8001af8:	2101      	movs	r1, #1
 8001afa:	438a      	bics	r2, r1
 8001afc:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2269      	movs	r2, #105	; 0x69
 8001b02:	2120      	movs	r1, #32
 8001b04:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	226a      	movs	r2, #106	; 0x6a
 8001b0a:	2120      	movs	r1, #32
 8001b0c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2268      	movs	r2, #104	; 0x68
 8001b12:	2100      	movs	r1, #0
 8001b14:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e00f      	b.n	8001b3a <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	401a      	ands	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	425a      	negs	r2, r3
 8001b2a:	4153      	adcs	r3, r2
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	001a      	movs	r2, r3
 8001b30:	1dfb      	adds	r3, r7, #7
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d0c4      	beq.n	8001ac2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b004      	add	sp, #16
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	fffffe5f 	.word	0xfffffe5f

08001b48 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b4c:	f7fe fb68 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b50:	f000 f81a 	bl	8001b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b54:	f000 f8c4 	bl	8001ce0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001b58:	f000 f88c 	bl	8001c74 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  touch_open(0);
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f000 fb11 	bl	8002184 <touch_open>
  touch_bakcklight(1);
 8001b62:	2001      	movs	r0, #1
 8001b64:	f000 fb5a 	bl	800221c <touch_bakcklight>
  printf("Touch Connected");
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <main+0x38>)
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f000 fdcc 	bl	8002708 <iprintf>
//		  while(touch_is_press_finger()){
//			  HAL_Delay(100);
//		  }
		//	  touch_enrolled_count();
//	  identification_check();
	  identification_enroll_user();
 8001b70:	f000 f9f4 	bl	8001f5c <identification_enroll_user>
	  HAL_Delay(3000);
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <main+0x3c>)
 8001b76:	0018      	movs	r0, r3
 8001b78:	f7fe fb98 	bl	80002ac <HAL_Delay>
	  identification_enroll_user();
 8001b7c:	e7f8      	b.n	8001b70 <main+0x28>
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	08003574 	.word	0x08003574
 8001b84:	00000bb8 	.word	0x00000bb8

08001b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b096      	sub	sp, #88	; 0x58
 8001b8c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b8e:	2328      	movs	r3, #40	; 0x28
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	2202      	movs	r2, #2
 8001b94:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b96:	2328      	movs	r3, #40	; 0x28
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001b9e:	2328      	movs	r3, #40	; 0x28
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	2210      	movs	r2, #16
 8001ba4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba6:	2328      	movs	r3, #40	; 0x28
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	2202      	movs	r2, #2
 8001bac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bae:	2328      	movs	r3, #40	; 0x28
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001bb6:	2328      	movs	r3, #40	; 0x28
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	22a0      	movs	r2, #160	; 0xa0
 8001bbc:	0392      	lsls	r2, r2, #14
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001bc0:	2328      	movs	r3, #40	; 0x28
 8001bc2:	18fb      	adds	r3, r7, r3
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc8:	2328      	movs	r3, #40	; 0x28
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7fe fdf9 	bl	80007c4 <HAL_RCC_OscConfig>
 8001bd2:	1e03      	subs	r3, r0, #0
 8001bd4:	d004      	beq.n	8001be0 <SystemClock_Config+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <SystemClock_Config+0xe8>)
 8001bd8:	21ae      	movs	r1, #174	; 0xae
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f000 f8dc 	bl	8001d98 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be0:	2318      	movs	r3, #24
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	2207      	movs	r2, #7
 8001be6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001be8:	2318      	movs	r3, #24
 8001bea:	18fb      	adds	r3, r7, r3
 8001bec:	2202      	movs	r2, #2
 8001bee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf0:	2318      	movs	r3, #24
 8001bf2:	18fb      	adds	r3, r7, r3
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bf8:	2318      	movs	r3, #24
 8001bfa:	18fb      	adds	r3, r7, r3
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c00:	2318      	movs	r3, #24
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	2101      	movs	r1, #1
 8001c06:	0018      	movs	r0, r3
 8001c08:	f7ff f8d0 	bl	8000dac <HAL_RCC_ClockConfig>
 8001c0c:	1e03      	subs	r3, r0, #0
 8001c0e:	d004      	beq.n	8001c1a <SystemClock_Config+0x92>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <SystemClock_Config+0xe8>)
 8001c12:	21bb      	movs	r1, #187	; 0xbb
 8001c14:	0018      	movs	r0, r3
 8001c16:	f000 f8bf 	bl	8001d98 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7ff fa25 	bl	8001078 <HAL_RCCEx_PeriphCLKConfig>
 8001c2e:	1e03      	subs	r3, r0, #0
 8001c30:	d004      	beq.n	8001c3c <SystemClock_Config+0xb4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <SystemClock_Config+0xe8>)
 8001c34:	21c2      	movs	r1, #194	; 0xc2
 8001c36:	0018      	movs	r0, r3
 8001c38:	f000 f8ae 	bl	8001d98 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001c3c:	f7ff f9fc 	bl	8001038 <HAL_RCC_GetHCLKFreq>
 8001c40:	0002      	movs	r2, r0
 8001c42:	23fa      	movs	r3, #250	; 0xfa
 8001c44:	0099      	lsls	r1, r3, #2
 8001c46:	0010      	movs	r0, r2
 8001c48:	f7fe fa5e 	bl	8000108 <__udivsi3>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f7fe fbf2 	bl	8000438 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001c54:	2004      	movs	r0, #4
 8001c56:	f7fe fbfd 	bl	8000454 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	425b      	negs	r3, r3
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	0018      	movs	r0, r3
 8001c64:	f7fe fbd2 	bl	800040c <HAL_NVIC_SetPriority>
}
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b016      	add	sp, #88	; 0x58
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	08003584 	.word	0x08003584

08001c74 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <MX_USART1_UART_Init+0x60>)
 8001c7a:	4a17      	ldr	r2, [pc, #92]	; (8001cd8 <MX_USART1_UART_Init+0x64>)
 8001c7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <MX_USART1_UART_Init+0x60>)
 8001c80:	2296      	movs	r2, #150	; 0x96
 8001c82:	0192      	lsls	r2, r2, #6
 8001c84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <MX_USART1_UART_Init+0x60>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <MX_USART1_UART_Init+0x60>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <MX_USART1_UART_Init+0x60>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c98:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <MX_USART1_UART_Init+0x60>)
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <MX_USART1_UART_Init+0x60>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <MX_USART1_UART_Init+0x60>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <MX_USART1_UART_Init+0x60>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <MX_USART1_UART_Init+0x60>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <MX_USART1_UART_Init+0x60>)
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f7ff fabb 	bl	8001234 <HAL_UART_Init>
 8001cbe:	1e03      	subs	r3, r0, #0
 8001cc0:	d004      	beq.n	8001ccc <MX_USART1_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <MX_USART1_UART_Init+0x68>)
 8001cc4:	21e1      	movs	r1, #225	; 0xe1
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f000 f866 	bl	8001d98 <_Error_Handler>
  }

}
 8001ccc:	46c0      	nop			; (mov r8, r8)
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	200000ac 	.word	0x200000ac
 8001cd8:	40013800 	.word	0x40013800
 8001cdc:	08003584 	.word	0x08003584

08001ce0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <MX_GPIO_Init+0xac>)
 8001ce8:	4a28      	ldr	r2, [pc, #160]	; (8001d8c <MX_GPIO_Init+0xac>)
 8001cea:	6952      	ldr	r2, [r2, #20]
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	0289      	lsls	r1, r1, #10
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	615a      	str	r2, [r3, #20]
 8001cf4:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <MX_GPIO_Init+0xac>)
 8001cf6:	695a      	ldr	r2, [r3, #20]
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	029b      	lsls	r3, r3, #10
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d02:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <MX_GPIO_Init+0xac>)
 8001d04:	4a21      	ldr	r2, [pc, #132]	; (8001d8c <MX_GPIO_Init+0xac>)
 8001d06:	6952      	ldr	r2, [r2, #20]
 8001d08:	2180      	movs	r1, #128	; 0x80
 8001d0a:	0309      	lsls	r1, r1, #12
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	615a      	str	r2, [r3, #20]
 8001d10:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <MX_GPIO_Init+0xac>)
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	031b      	lsls	r3, r3, #12
 8001d18:	4013      	ands	r3, r2
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001d1e:	23c0      	movs	r3, #192	; 0xc0
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	481b      	ldr	r0, [pc, #108]	; (8001d90 <MX_GPIO_Init+0xb0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	0019      	movs	r1, r3
 8001d28:	f7fe fd2e 	bl	8000788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d2c:	230c      	movs	r3, #12
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d34:	230c      	movs	r3, #12
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	4a16      	ldr	r2, [pc, #88]	; (8001d94 <MX_GPIO_Init+0xb4>)
 8001d3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	230c      	movs	r3, #12
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d44:	230c      	movs	r3, #12
 8001d46:	18fa      	adds	r2, r7, r3
 8001d48:	2390      	movs	r3, #144	; 0x90
 8001d4a:	05db      	lsls	r3, r3, #23
 8001d4c:	0011      	movs	r1, r2
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f7fe fba6 	bl	80004a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8001d54:	230c      	movs	r3, #12
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	22c0      	movs	r2, #192	; 0xc0
 8001d5a:	0092      	lsls	r2, r2, #2
 8001d5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5e:	230c      	movs	r3, #12
 8001d60:	18fb      	adds	r3, r7, r3
 8001d62:	2201      	movs	r2, #1
 8001d64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	230c      	movs	r3, #12
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	230c      	movs	r3, #12
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d76:	230c      	movs	r3, #12
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <MX_GPIO_Init+0xb0>)
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	0010      	movs	r0, r2
 8001d80:	f7fe fb8e 	bl	80004a0 <HAL_GPIO_Init>

}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b008      	add	sp, #32
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	48000800 	.word	0x48000800
 8001d94:	10120000 	.word	0x10120000

08001d98 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001da2:	e7fe      	b.n	8001da2 <_Error_Handler+0xa>

08001da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_MspInit+0x6c>)
 8001dac:	4a18      	ldr	r2, [pc, #96]	; (8001e10 <HAL_MspInit+0x6c>)
 8001dae:	6992      	ldr	r2, [r2, #24]
 8001db0:	2101      	movs	r1, #1
 8001db2:	430a      	orrs	r2, r1
 8001db4:	619a      	str	r2, [r3, #24]
 8001db6:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <HAL_MspInit+0x6c>)
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <HAL_MspInit+0x6c>)
 8001dc4:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <HAL_MspInit+0x6c>)
 8001dc6:	69d2      	ldr	r2, [r2, #28]
 8001dc8:	2180      	movs	r1, #128	; 0x80
 8001dca:	0549      	lsls	r1, r1, #21
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	61da      	str	r2, [r3, #28]
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <HAL_MspInit+0x6c>)
 8001dd2:	69da      	ldr	r2, [r3, #28]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	055b      	lsls	r3, r3, #21
 8001dd8:	4013      	ands	r3, r2
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001dde:	2305      	movs	r3, #5
 8001de0:	425b      	negs	r3, r3
 8001de2:	2200      	movs	r2, #0
 8001de4:	2100      	movs	r1, #0
 8001de6:	0018      	movs	r0, r3
 8001de8:	f7fe fb10 	bl	800040c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001dec:	2302      	movs	r3, #2
 8001dee:	425b      	negs	r3, r3
 8001df0:	2200      	movs	r2, #0
 8001df2:	2100      	movs	r1, #0
 8001df4:	0018      	movs	r0, r3
 8001df6:	f7fe fb09 	bl	800040c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	425b      	negs	r3, r3
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	0018      	movs	r0, r3
 8001e04:	f7fe fb02 	bl	800040c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b002      	add	sp, #8
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000

08001e14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <HAL_UART_MspInit+0x70>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d12a      	bne.n	8001e7c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <HAL_UART_MspInit+0x74>)
 8001e28:	4a17      	ldr	r2, [pc, #92]	; (8001e88 <HAL_UART_MspInit+0x74>)
 8001e2a:	6992      	ldr	r2, [r2, #24]
 8001e2c:	2180      	movs	r1, #128	; 0x80
 8001e2e:	01c9      	lsls	r1, r1, #7
 8001e30:	430a      	orrs	r2, r1
 8001e32:	619a      	str	r2, [r3, #24]
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <HAL_UART_MspInit+0x74>)
 8001e36:	699a      	ldr	r2, [r3, #24]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	01db      	lsls	r3, r3, #7
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e42:	230c      	movs	r3, #12
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	22c0      	movs	r2, #192	; 0xc0
 8001e48:	00d2      	lsls	r2, r2, #3
 8001e4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	230c      	movs	r3, #12
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	2202      	movs	r2, #2
 8001e52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	230c      	movs	r3, #12
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e5c:	230c      	movs	r3, #12
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	2203      	movs	r2, #3
 8001e62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001e64:	230c      	movs	r3, #12
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	2201      	movs	r2, #1
 8001e6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	230c      	movs	r3, #12
 8001e6e:	18fa      	adds	r2, r7, r3
 8001e70:	2390      	movs	r3, #144	; 0x90
 8001e72:	05db      	lsls	r3, r3, #23
 8001e74:	0011      	movs	r1, r2
 8001e76:	0018      	movs	r0, r3
 8001e78:	f7fe fb12 	bl	80004a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b008      	add	sp, #32
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40013800 	.word	0x40013800
 8001e88:	40021000 	.word	0x40021000

08001e8c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e90:	f7fe f9f6 	bl	8000280 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001e94:	f7fe faf8 	bl	8000488 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <SystemInit+0x70>)
 8001ea6:	4a1a      	ldr	r2, [pc, #104]	; (8001f10 <SystemInit+0x70>)
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	2101      	movs	r1, #1
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8001eb0:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <SystemInit+0x70>)
 8001eb2:	4a17      	ldr	r2, [pc, #92]	; (8001f10 <SystemInit+0x70>)
 8001eb4:	6852      	ldr	r2, [r2, #4]
 8001eb6:	4917      	ldr	r1, [pc, #92]	; (8001f14 <SystemInit+0x74>)
 8001eb8:	400a      	ands	r2, r1
 8001eba:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <SystemInit+0x70>)
 8001ebe:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <SystemInit+0x70>)
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	4915      	ldr	r1, [pc, #84]	; (8001f18 <SystemInit+0x78>)
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <SystemInit+0x70>)
 8001eca:	4a11      	ldr	r2, [pc, #68]	; (8001f10 <SystemInit+0x70>)
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	4913      	ldr	r1, [pc, #76]	; (8001f1c <SystemInit+0x7c>)
 8001ed0:	400a      	ands	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <SystemInit+0x70>)
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <SystemInit+0x70>)
 8001ed8:	6852      	ldr	r2, [r2, #4]
 8001eda:	4911      	ldr	r1, [pc, #68]	; (8001f20 <SystemInit+0x80>)
 8001edc:	400a      	ands	r2, r1
 8001ede:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <SystemInit+0x70>)
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <SystemInit+0x70>)
 8001ee4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ee6:	210f      	movs	r1, #15
 8001ee8:	438a      	bics	r2, r1
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <SystemInit+0x70>)
 8001eee:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <SystemInit+0x70>)
 8001ef0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ef2:	490c      	ldr	r1, [pc, #48]	; (8001f24 <SystemInit+0x84>)
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <SystemInit+0x70>)
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <SystemInit+0x70>)
 8001efc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001efe:	2101      	movs	r1, #1
 8001f00:	438a      	bics	r2, r1
 8001f02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001f04:	4b02      	ldr	r3, [pc, #8]	; (8001f10 <SystemInit+0x70>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]

}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	f8ffb80c 	.word	0xf8ffb80c
 8001f18:	fef6ffff 	.word	0xfef6ffff
 8001f1c:	fffbffff 	.word	0xfffbffff
 8001f20:	ffc0ffff 	.word	0xffc0ffff
 8001f24:	fffffeac 	.word	0xfffffeac

08001f28 <wait_for_finger>:

#include "identification.h"
#include "touch.h"
#include "stm32f0xx_hal.h"

static void wait_for_finger() {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	while (!touch_is_press_finger()) {
 8001f2c:	e002      	b.n	8001f34 <wait_for_finger+0xc>
		HAL_Delay(100);
 8001f2e:	2064      	movs	r0, #100	; 0x64
 8001f30:	f7fe f9bc 	bl	80002ac <HAL_Delay>
	while (!touch_is_press_finger()) {
 8001f34:	f000 f9a4 	bl	8002280 <touch_is_press_finger>
 8001f38:	1e03      	subs	r3, r0, #0
 8001f3a:	d0f8      	beq.n	8001f2e <wait_for_finger+0x6>
	}
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <wait_for_finger_release>:

static void wait_for_finger_release() {
 8001f42:	b580      	push	{r7, lr}
 8001f44:	af00      	add	r7, sp, #0
	while (!touch_is_press_finger()) {
 8001f46:	e002      	b.n	8001f4e <wait_for_finger_release+0xc>
		HAL_Delay(100);
 8001f48:	2064      	movs	r0, #100	; 0x64
 8001f4a:	f7fe f9af 	bl	80002ac <HAL_Delay>
	while (!touch_is_press_finger()) {
 8001f4e:	f000 f997 	bl	8002280 <touch_is_press_finger>
 8001f52:	1e03      	subs	r3, r0, #0
 8001f54:	d0f8      	beq.n	8001f48 <wait_for_finger_release+0x6>
	}
}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <identification_enroll_user>:

void identification_enroll_user() {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	touch_delete_all_fingerprints();
 8001f60:	f000 faae 	bl	80024c0 <touch_delete_all_fingerprints>
	touch_enroll_start(48);
 8001f64:	2030      	movs	r0, #48	; 0x30
 8001f66:	f000 f9cb 	bl	8002300 <touch_enroll_start>
	wait_for_finger();
 8001f6a:	f7ff ffdd 	bl	8001f28 <wait_for_finger>
	touch_capture_finger();
 8001f6e:	f000 fa61 	bl	8002434 <touch_capture_finger>
	touch_enroll_1();
 8001f72:	f000 f9e9 	bl	8002348 <touch_enroll_1>
	wait_for_finger_release();
 8001f76:	f7ff ffe4 	bl	8001f42 <wait_for_finger_release>
	wait_for_finger();
 8001f7a:	f7ff ffd5 	bl	8001f28 <wait_for_finger>
	touch_capture_finger();
 8001f7e:	f000 fa59 	bl	8002434 <touch_capture_finger>
	touch_enroll_2();
 8001f82:	f000 f9fb 	bl	800237c <touch_enroll_2>
	wait_for_finger_release();
 8001f86:	f7ff ffdc 	bl	8001f42 <wait_for_finger_release>
	wait_for_finger();
 8001f8a:	f7ff ffcd 	bl	8001f28 <wait_for_finger>
	touch_capture_finger();
 8001f8e:	f000 fa51 	bl	8002434 <touch_capture_finger>
	touch_enroll_3(0);
 8001f92:	2000      	movs	r0, #0
 8001f94:	f000 fa0c 	bl	80023b0 <touch_enroll_3>
	wait_for_finger_release();
 8001f98:	f7ff ffd3 	bl	8001f42 <wait_for_finger_release>
	touch_check_enrolled(48);
 8001f9c:	2030      	movs	r0, #48	; 0x30
 8001f9e:	f000 fa63 	bl	8002468 <touch_check_enrolled>
	touch_check_enrolled(49);
 8001fa2:	2031      	movs	r0, #49	; 0x31
 8001fa4:	f000 fa60 	bl	8002468 <touch_check_enrolled>
}
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <touch_rcv>:
}dev_info;

/****************************
*   RX/TX functions    		*
*****************************/
void touch_rcv(uint8_t* packet, int len,int timeout){
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
	HAL_UART_Receive(&huart1,packet,len,timeout);
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68f9      	ldr	r1, [r7, #12]
 8001fc4:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <touch_rcv+0x24>)
 8001fc6:	f7ff fa31 	bl	800142c <HAL_UART_Receive>
}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b004      	add	sp, #16
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	200000ac 	.word	0x200000ac

08001fd8 <touch_send>:

void touch_send(uint8_t* packet, int len){
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1,packet,len,1000);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	23fa      	movs	r3, #250	; 0xfa
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4803      	ldr	r0, [pc, #12]	; (8001ffc <touch_send+0x24>)
 8001fee:	f7ff f979 	bl	80012e4 <HAL_UART_Transmit>
}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b002      	add	sp, #8
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	200000ac 	.word	0x200000ac

08002000 <get_checksum>:
/****************************
*   Aux functions    		*
*****************************/

uint16_t get_checksum(uint8_t *package, int len)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
    int i = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
    uint16_t checksum = 0;
 800200e:	230a      	movs	r3, #10
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	2200      	movs	r2, #0
 8002014:	801a      	strh	r2, [r3, #0]
    for (; i < len - 2; i++)
 8002016:	e00e      	b.n	8002036 <get_checksum+0x36>
    {
        checksum += *(package + i);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	18d3      	adds	r3, r2, r3
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	b299      	uxth	r1, r3
 8002022:	230a      	movs	r3, #10
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	220a      	movs	r2, #10
 8002028:	18ba      	adds	r2, r7, r2
 800202a:	8812      	ldrh	r2, [r2, #0]
 800202c:	188a      	adds	r2, r1, r2
 800202e:	801a      	strh	r2, [r3, #0]
    for (; i < len - 2; i++)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3301      	adds	r3, #1
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	1e9a      	subs	r2, r3, #2
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	429a      	cmp	r2, r3
 800203e:	dceb      	bgt.n	8002018 <get_checksum+0x18>
    }
    return checksum;
 8002040:	230a      	movs	r3, #10
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	881b      	ldrh	r3, [r3, #0]
}
 8002046:	0018      	movs	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	b004      	add	sp, #16
 800204c:	bd80      	pop	{r7, pc}

0800204e <create_command_package>:

void create_command_package(uint32_t param, uint16_t command,uint8_t* package)
{
 800204e:	b590      	push	{r4, r7, lr}
 8002050:	b087      	sub	sp, #28
 8002052:	af00      	add	r7, sp, #0
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	230a      	movs	r3, #10
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	1c0a      	adds	r2, r1, #0
 800205e:	801a      	strh	r2, [r3, #0]
    uint16_t checksum;
    package[0] = 0x55;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2255      	movs	r2, #85	; 0x55
 8002064:	701a      	strb	r2, [r3, #0]
    package[1] = 0xAA;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3301      	adds	r3, #1
 800206a:	22aa      	movs	r2, #170	; 0xaa
 800206c:	701a      	strb	r2, [r3, #0]
    package[2] = 0x01;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3302      	adds	r3, #2
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
    package[3] = 0x00;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3303      	adds	r3, #3
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
    package[4] = param & 0xFF;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3304      	adds	r3, #4
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	701a      	strb	r2, [r3, #0]
    package[5] = (param >> 8) & 0xFF;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3305      	adds	r3, #5
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	0a12      	lsrs	r2, r2, #8
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	701a      	strb	r2, [r3, #0]
    package[6] = (param >> 16) & 0xFF;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3306      	adds	r3, #6
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	0c12      	lsrs	r2, r2, #16
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	701a      	strb	r2, [r3, #0]
    package[7] = (param >> 24) & 0xFF;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3307      	adds	r3, #7
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	0e12      	lsrs	r2, r2, #24
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	701a      	strb	r2, [r3, #0]
    package[8] = command & 0xFF;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3308      	adds	r3, #8
 80020b0:	220a      	movs	r2, #10
 80020b2:	18ba      	adds	r2, r7, r2
 80020b4:	8812      	ldrh	r2, [r2, #0]
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]
    package[9] = (command >> 8) & 0xFF;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3309      	adds	r3, #9
 80020be:	220a      	movs	r2, #10
 80020c0:	18ba      	adds	r2, r7, r2
 80020c2:	8812      	ldrh	r2, [r2, #0]
 80020c4:	0a12      	lsrs	r2, r2, #8
 80020c6:	b292      	uxth	r2, r2
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	701a      	strb	r2, [r3, #0]
    checksum = get_checksum(package, COMMAND_PACKET_LEN);
 80020cc:	2316      	movs	r3, #22
 80020ce:	18fc      	adds	r4, r7, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	210c      	movs	r1, #12
 80020d4:	0018      	movs	r0, r3
 80020d6:	f7ff ff93 	bl	8002000 <get_checksum>
 80020da:	0003      	movs	r3, r0
 80020dc:	8023      	strh	r3, [r4, #0]
    package[10] = (checksum)&0xFF;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	330a      	adds	r3, #10
 80020e2:	2216      	movs	r2, #22
 80020e4:	18ba      	adds	r2, r7, r2
 80020e6:	8812      	ldrh	r2, [r2, #0]
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]
    package[11] = (checksum >> 8) & 0xFF;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	330b      	adds	r3, #11
 80020f0:	2216      	movs	r2, #22
 80020f2:	18ba      	adds	r2, r7, r2
 80020f4:	8812      	ldrh	r2, [r2, #0]
 80020f6:	0a12      	lsrs	r2, r2, #8
 80020f8:	b292      	uxth	r2, r2
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	701a      	strb	r2, [r3, #0]
}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	46bd      	mov	sp, r7
 8002102:	b007      	add	sp, #28
 8002104:	bd90      	pop	{r4, r7, pc}

08002106 <rcv_ack>:

int rcv_ack(uint8_t* packet, int len,int timeout){
 8002106:	b590      	push	{r4, r7, lr}
 8002108:	b087      	sub	sp, #28
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
	uint16_t calc_checksum;
	uint16_t recv_checksum;
	touch_rcv(packet,len,timeout);
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	0018      	movs	r0, r3
 800211a:	f7ff ff49 	bl	8001fb0 <touch_rcv>
	recv_checksum = packet[len - 2]  | packet[len - 1] << 8;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	3b02      	subs	r3, #2
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	18d3      	adds	r3, r2, r3
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	b21a      	sxth	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	3b01      	subs	r3, #1
 800212e:	68f9      	ldr	r1, [r7, #12]
 8002130:	18cb      	adds	r3, r1, r3
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	b21b      	sxth	r3, r3
 8002138:	4313      	orrs	r3, r2
 800213a:	b21a      	sxth	r2, r3
 800213c:	2316      	movs	r3, #22
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	801a      	strh	r2, [r3, #0]
	calc_checksum = get_checksum(packet,len);
 8002142:	2314      	movs	r3, #20
 8002144:	18fc      	adds	r4, r7, r3
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	0011      	movs	r1, r2
 800214c:	0018      	movs	r0, r3
 800214e:	f7ff ff57 	bl	8002000 <get_checksum>
 8002152:	0003      	movs	r3, r0
 8002154:	8023      	strh	r3, [r4, #0]
	if(recv_checksum != calc_checksum){
 8002156:	2316      	movs	r3, #22
 8002158:	18fa      	adds	r2, r7, r3
 800215a:	2314      	movs	r3, #20
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	8812      	ldrh	r2, [r2, #0]
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d001      	beq.n	800216a <rcv_ack+0x64>
		return UART_CHECKSUM_ERR;
 8002166:	2301      	movs	r3, #1
 8002168:	e007      	b.n	800217a <rcv_ack+0x74>
	}else if(packet[8] != ACK){
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	3308      	adds	r3, #8
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b30      	cmp	r3, #48	; 0x30
 8002172:	d001      	beq.n	8002178 <rcv_ack+0x72>
		return UART_NACK_ERR;
 8002174:	2302      	movs	r3, #2
 8002176:	e000      	b.n	800217a <rcv_ack+0x74>
	}
	return UART_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	0018      	movs	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	b007      	add	sp, #28
 8002180:	bd90      	pop	{r4, r7, pc}
	...

08002184 <touch_open>:
}

/****************************
*   Operations       		*
*****************************/
void touch_open(int verbose){
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	dev_info* extra_info =  (dev_info*)malloc(sizeof(dev_info));
 800218c:	201e      	movs	r0, #30
 800218e:	f000 f9ff 	bl	8002590 <malloc>
 8002192:	0003      	movs	r3, r0
 8002194:	60fb      	str	r3, [r7, #12]
	if(!verbose){
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d118      	bne.n	80021ce <touch_open+0x4a>
		create_command_package(0,1,command_packet);
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <touch_open+0x90>)
 800219e:	001a      	movs	r2, r3
 80021a0:	2101      	movs	r1, #1
 80021a2:	2000      	movs	r0, #0
 80021a4:	f7ff ff53 	bl	800204e <create_command_package>
		touch_send(command_packet,COMMAND_PACKET_LEN);
 80021a8:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <touch_open+0x90>)
 80021aa:	210c      	movs	r1, #12
 80021ac:	0018      	movs	r0, r3
 80021ae:	f7ff ff13 	bl	8001fd8 <touch_send>
		if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != UART_OK){
 80021b2:	23fa      	movs	r3, #250	; 0xfa
 80021b4:	009a      	lsls	r2, r3, #2
 80021b6:	4b18      	ldr	r3, [pc, #96]	; (8002218 <touch_open+0x94>)
 80021b8:	210c      	movs	r1, #12
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7ff ffa3 	bl	8002106 <rcv_ack>
 80021c0:	1e03      	subs	r3, r0, #0
 80021c2:	d024      	beq.n	800220e <touch_open+0x8a>
			//Protocolo de errores
			free(extra_info);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 f9ec 	bl	80025a4 <free>
			return;
 80021cc:	e01f      	b.n	800220e <touch_open+0x8a>
		}
	}else{
		create_command_package(0,1,command_packet);
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <touch_open+0x90>)
 80021d0:	001a      	movs	r2, r3
 80021d2:	2101      	movs	r1, #1
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7ff ff3a 	bl	800204e <create_command_package>
		touch_send(command_packet,COMMAND_PACKET_LEN);
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <touch_open+0x90>)
 80021dc:	210c      	movs	r1, #12
 80021de:	0018      	movs	r0, r3
 80021e0:	f7ff fefa 	bl	8001fd8 <touch_send>
		if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != UART_OK){
 80021e4:	23fa      	movs	r3, #250	; 0xfa
 80021e6:	009a      	lsls	r2, r3, #2
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <touch_open+0x94>)
 80021ea:	210c      	movs	r1, #12
 80021ec:	0018      	movs	r0, r3
 80021ee:	f7ff ff8a 	bl	8002106 <rcv_ack>
 80021f2:	1e03      	subs	r3, r0, #0
 80021f4:	d004      	beq.n	8002200 <touch_open+0x7c>
			//Protocolo de errores
			free(extra_info);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f000 f9d3 	bl	80025a4 <free>
			return;
 80021fe:	e006      	b.n	800220e <touch_open+0x8a>
		}
		touch_rcv((uint8_t*)extra_info,sizeof(dev_info),2000);
 8002200:	23fa      	movs	r3, #250	; 0xfa
 8002202:	00da      	lsls	r2, r3, #3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	211e      	movs	r1, #30
 8002208:	0018      	movs	r0, r3
 800220a:	f7ff fed1 	bl	8001fb0 <touch_rcv>
	}
}
 800220e:	46bd      	mov	sp, r7
 8002210:	b004      	add	sp, #16
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000084 	.word	0x20000084
 8002218:	20000090 	.word	0x20000090

0800221c <touch_bakcklight>:

void touch_bakcklight(int value){
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	create_command_package(value, CMOSLED_CMD, command_packet);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a12      	ldr	r2, [pc, #72]	; (8002270 <touch_bakcklight+0x54>)
 8002228:	2112      	movs	r1, #18
 800222a:	0018      	movs	r0, r3
 800222c:	f7ff ff0f 	bl	800204e <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 8002230:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <touch_bakcklight+0x54>)
 8002232:	210c      	movs	r1, #12
 8002234:	0018      	movs	r0, r3
 8002236:	f7ff fecf 	bl	8001fd8 <touch_send>
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != UART_OK){
 800223a:	23fa      	movs	r3, #250	; 0xfa
 800223c:	009a      	lsls	r2, r3, #2
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <touch_bakcklight+0x58>)
 8002240:	210c      	movs	r1, #12
 8002242:	0018      	movs	r0, r3
 8002244:	f7ff ff5f 	bl	8002106 <rcv_ack>
 8002248:	1e03      	subs	r3, r0, #0
 800224a:	d10c      	bne.n	8002266 <touch_bakcklight+0x4a>
		//Error Handling
		return;
	}
	if(value != 0){
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d004      	beq.n	800225c <touch_bakcklight+0x40>
		printf("Touch: Backlight ON");
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <touch_bakcklight+0x5c>)
 8002254:	0018      	movs	r0, r3
 8002256:	f000 fa57 	bl	8002708 <iprintf>
 800225a:	e005      	b.n	8002268 <touch_bakcklight+0x4c>
	}else{
		printf("Touch: Backlight OFF");
 800225c:	4b07      	ldr	r3, [pc, #28]	; (800227c <touch_bakcklight+0x60>)
 800225e:	0018      	movs	r0, r3
 8002260:	f000 fa52 	bl	8002708 <iprintf>
 8002264:	e000      	b.n	8002268 <touch_bakcklight+0x4c>
		return;
 8002266:	46c0      	nop			; (mov r8, r8)
	}
}
 8002268:	46bd      	mov	sp, r7
 800226a:	b002      	add	sp, #8
 800226c:	bd80      	pop	{r7, pc}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	20000084 	.word	0x20000084
 8002274:	20000090 	.word	0x20000090
 8002278:	080035c0 	.word	0x080035c0
 800227c:	080035d4 	.word	0x080035d4

08002280 <touch_is_press_finger>:

int touch_is_press_finger(){
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	create_command_package(1, ISPRESSFINGER_CMD, command_packet);
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <touch_is_press_finger+0x70>)
 8002286:	001a      	movs	r2, r3
 8002288:	2126      	movs	r1, #38	; 0x26
 800228a:	2001      	movs	r0, #1
 800228c:	f7ff fedf 	bl	800204e <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 8002290:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <touch_is_press_finger+0x70>)
 8002292:	210c      	movs	r1, #12
 8002294:	0018      	movs	r0, r3
 8002296:	f7ff fe9f 	bl	8001fd8 <touch_send>
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != UART_OK){
 800229a:	23fa      	movs	r3, #250	; 0xfa
 800229c:	009a      	lsls	r2, r3, #2
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <touch_is_press_finger+0x74>)
 80022a0:	210c      	movs	r1, #12
 80022a2:	0018      	movs	r0, r3
 80022a4:	f7ff ff2f 	bl	8002106 <rcv_ack>
 80022a8:	1e03      	subs	r3, r0, #0
 80022aa:	d002      	beq.n	80022b2 <touch_is_press_finger+0x32>
		//Error Handling
		return -1;
 80022ac:	2301      	movs	r3, #1
 80022ae:	425b      	negs	r3, r3
 80022b0:	e01a      	b.n	80022e8 <touch_is_press_finger+0x68>
	}
	if(response_packet[4] == 0 && response_packet[5] == 0 && response_packet[6] == 0 && response_packet[7] == 0){
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <touch_is_press_finger+0x74>)
 80022b4:	791b      	ldrb	r3, [r3, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d111      	bne.n	80022de <touch_is_press_finger+0x5e>
 80022ba:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <touch_is_press_finger+0x74>)
 80022bc:	795b      	ldrb	r3, [r3, #5]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10d      	bne.n	80022de <touch_is_press_finger+0x5e>
 80022c2:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <touch_is_press_finger+0x74>)
 80022c4:	799b      	ldrb	r3, [r3, #6]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <touch_is_press_finger+0x5e>
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <touch_is_press_finger+0x74>)
 80022cc:	79db      	ldrb	r3, [r3, #7]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <touch_is_press_finger+0x5e>
		printf("Touch: Finger Press");
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <touch_is_press_finger+0x78>)
 80022d4:	0018      	movs	r0, r3
 80022d6:	f000 fa17 	bl	8002708 <iprintf>
		return 1;
 80022da:	2301      	movs	r3, #1
 80022dc:	e004      	b.n	80022e8 <touch_is_press_finger+0x68>
	}
	printf("Touch: No Finger Press");
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <touch_is_press_finger+0x7c>)
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 fa11 	bl	8002708 <iprintf>
	return 0;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	20000084 	.word	0x20000084
 80022f4:	20000090 	.word	0x20000090
 80022f8:	080035ec 	.word	0x080035ec
 80022fc:	08003600 	.word	0x08003600

08002300 <touch_enroll_start>:

void touch_enroll_start(int id){
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	//if poss > 200 no save mode
	if(id >= 200){
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2bc7      	cmp	r3, #199	; 0xc7
 800230c:	dd02      	ble.n	8002314 <touch_enroll_start+0x14>
		id = -1;
 800230e:	2301      	movs	r3, #1
 8002310:	425b      	negs	r3, r3
 8002312:	607b      	str	r3, [r7, #4]
	}
	create_command_package(id, ENROLLSTART_CMD, command_packet);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <touch_enroll_start+0x40>)
 8002318:	2122      	movs	r1, #34	; 0x22
 800231a:	0018      	movs	r0, r3
 800231c:	f7ff fe97 	bl	800204e <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 8002320:	4b07      	ldr	r3, [pc, #28]	; (8002340 <touch_enroll_start+0x40>)
 8002322:	210c      	movs	r1, #12
 8002324:	0018      	movs	r0, r3
 8002326:	f7ff fe57 	bl	8001fd8 <touch_send>
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != UART_OK){
 800232a:	23fa      	movs	r3, #250	; 0xfa
 800232c:	009a      	lsls	r2, r3, #2
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <touch_enroll_start+0x44>)
 8002330:	210c      	movs	r1, #12
 8002332:	0018      	movs	r0, r3
 8002334:	f7ff fee7 	bl	8002106 <rcv_ack>
		//Error Handling
		return;
	}
}
 8002338:	46bd      	mov	sp, r7
 800233a:	b002      	add	sp, #8
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	20000084 	.word	0x20000084
 8002344:	20000090 	.word	0x20000090

08002348 <touch_enroll_1>:

void touch_enroll_1(){
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	//Non zero argument to capture best image posible
	create_command_package(1, ENROLL1_CMD, command_packet);
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <touch_enroll_1+0x2c>)
 800234e:	001a      	movs	r2, r3
 8002350:	2123      	movs	r1, #35	; 0x23
 8002352:	2001      	movs	r0, #1
 8002354:	f7ff fe7b 	bl	800204e <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <touch_enroll_1+0x2c>)
 800235a:	210c      	movs	r1, #12
 800235c:	0018      	movs	r0, r3
 800235e:	f7ff fe3b 	bl	8001fd8 <touch_send>
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != UART_OK){
 8002362:	23fa      	movs	r3, #250	; 0xfa
 8002364:	009a      	lsls	r2, r3, #2
 8002366:	4b04      	ldr	r3, [pc, #16]	; (8002378 <touch_enroll_1+0x30>)
 8002368:	210c      	movs	r1, #12
 800236a:	0018      	movs	r0, r3
 800236c:	f7ff fecb 	bl	8002106 <rcv_ack>
		//Error Handling
		return;
	}
}
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000084 	.word	0x20000084
 8002378:	20000090 	.word	0x20000090

0800237c <touch_enroll_2>:
void touch_enroll_2(){
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	//Non zero argument to capture best image posible
	create_command_package(1, ENROLL2_CMD, command_packet);
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <touch_enroll_2+0x2c>)
 8002382:	001a      	movs	r2, r3
 8002384:	2124      	movs	r1, #36	; 0x24
 8002386:	2001      	movs	r0, #1
 8002388:	f7ff fe61 	bl	800204e <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <touch_enroll_2+0x2c>)
 800238e:	210c      	movs	r1, #12
 8002390:	0018      	movs	r0, r3
 8002392:	f7ff fe21 	bl	8001fd8 <touch_send>
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != UART_OK){
 8002396:	23fa      	movs	r3, #250	; 0xfa
 8002398:	009a      	lsls	r2, r3, #2
 800239a:	4b04      	ldr	r3, [pc, #16]	; (80023ac <touch_enroll_2+0x30>)
 800239c:	210c      	movs	r1, #12
 800239e:	0018      	movs	r0, r3
 80023a0:	f7ff feb1 	bl	8002106 <rcv_ack>
		//Error Handling
		return;
	}
}
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000084 	.word	0x20000084
 80023ac:	20000090 	.word	0x20000090

080023b0 <touch_enroll_3>:

//if no save mode extra data would be sent
void touch_enroll_3(int no_save_mode){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	uint8_t* extra_data;
	//Non zero argument to capture best image posible
	create_command_package(1, ENROLL3_CMD, command_packet);
 80023b8:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <touch_enroll_3+0x78>)
 80023ba:	001a      	movs	r2, r3
 80023bc:	2125      	movs	r1, #37	; 0x25
 80023be:	2001      	movs	r0, #1
 80023c0:	f7ff fe45 	bl	800204e <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 80023c4:	4b18      	ldr	r3, [pc, #96]	; (8002428 <touch_enroll_3+0x78>)
 80023c6:	210c      	movs	r1, #12
 80023c8:	0018      	movs	r0, r3
 80023ca:	f7ff fe05 	bl	8001fd8 <touch_send>
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != UART_OK){
 80023ce:	23fa      	movs	r3, #250	; 0xfa
 80023d0:	009a      	lsls	r2, r3, #2
 80023d2:	4b16      	ldr	r3, [pc, #88]	; (800242c <touch_enroll_3+0x7c>)
 80023d4:	210c      	movs	r1, #12
 80023d6:	0018      	movs	r0, r3
 80023d8:	f7ff fe95 	bl	8002106 <rcv_ack>
 80023dc:	1e03      	subs	r3, r0, #0
 80023de:	d11a      	bne.n	8002416 <touch_enroll_3+0x66>
		//Error Handling
		return;
	}
	if(!no_save_mode){
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d019      	beq.n	800241a <touch_enroll_3+0x6a>
		return;
	}
	//TODO: Delete Magic Number
	extra_data = (uint8_t*)malloc(498);
 80023e6:	23f9      	movs	r3, #249	; 0xf9
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	0018      	movs	r0, r3
 80023ec:	f000 f8d0 	bl	8002590 <malloc>
 80023f0:	0003      	movs	r3, r0
 80023f2:	60fb      	str	r3, [r7, #12]
	//TODO: Calc real accurate timeout
	touch_rcv(extra_data,498,10000);
 80023f4:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <touch_enroll_3+0x80>)
 80023f6:	23f9      	movs	r3, #249	; 0xf9
 80023f8:	0059      	lsls	r1, r3, #1
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f7ff fdd7 	bl	8001fb0 <touch_rcv>
	//TODO: Info handling
	if(extra_data[1]){
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	3301      	adds	r3, #1
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <touch_enroll_3+0x6e>
		printf("s");
 800240c:	2073      	movs	r0, #115	; 0x73
 800240e:	f000 f995 	bl	800273c <putchar>
	}
	return;
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	e003      	b.n	800241e <touch_enroll_3+0x6e>
		return;
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	e002      	b.n	8002420 <touch_enroll_3+0x70>
		return;
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	e000      	b.n	8002420 <touch_enroll_3+0x70>
	return;
 800241e:	46c0      	nop			; (mov r8, r8)
}
 8002420:	46bd      	mov	sp, r7
 8002422:	b004      	add	sp, #16
 8002424:	bd80      	pop	{r7, pc}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	20000084 	.word	0x20000084
 800242c:	20000090 	.word	0x20000090
 8002430:	00002710 	.word	0x00002710

08002434 <touch_capture_finger>:

void touch_capture_finger(){
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
	//Non zero argument to capture best image posible
	create_command_package(1, CAPTUREFINGERPRINT_CMD, command_packet);
 8002438:	4b09      	ldr	r3, [pc, #36]	; (8002460 <touch_capture_finger+0x2c>)
 800243a:	001a      	movs	r2, r3
 800243c:	2160      	movs	r1, #96	; 0x60
 800243e:	2001      	movs	r0, #1
 8002440:	f7ff fe05 	bl	800204e <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <touch_capture_finger+0x2c>)
 8002446:	210c      	movs	r1, #12
 8002448:	0018      	movs	r0, r3
 800244a:	f7ff fdc5 	bl	8001fd8 <touch_send>
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != UART_OK){
 800244e:	23fa      	movs	r3, #250	; 0xfa
 8002450:	009a      	lsls	r2, r3, #2
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <touch_capture_finger+0x30>)
 8002454:	210c      	movs	r1, #12
 8002456:	0018      	movs	r0, r3
 8002458:	f7ff fe55 	bl	8002106 <rcv_ack>
		//Error Handling
		return;
	}
}
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000084 	.word	0x20000084
 8002464:	20000090 	.word	0x20000090

08002468 <touch_check_enrolled>:

int touch_check_enrolled(int id){
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	int ack_reponse_code;
	//Non zero argument to capture best image posible
	create_command_package(id, CHECKENROLLMENT_CMD, command_packet);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a11      	ldr	r2, [pc, #68]	; (80024b8 <touch_check_enrolled+0x50>)
 8002474:	2121      	movs	r1, #33	; 0x21
 8002476:	0018      	movs	r0, r3
 8002478:	f7ff fde9 	bl	800204e <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <touch_check_enrolled+0x50>)
 800247e:	210c      	movs	r1, #12
 8002480:	0018      	movs	r0, r3
 8002482:	f7ff fda9 	bl	8001fd8 <touch_send>
	ack_reponse_code = rcv_ack(response_packet,REPONSE_PACKET_LEN,1000);
 8002486:	23fa      	movs	r3, #250	; 0xfa
 8002488:	009a      	lsls	r2, r3, #2
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <touch_check_enrolled+0x54>)
 800248c:	210c      	movs	r1, #12
 800248e:	0018      	movs	r0, r3
 8002490:	f7ff fe39 	bl	8002106 <rcv_ack>
 8002494:	0003      	movs	r3, r0
 8002496:	60fb      	str	r3, [r7, #12]
	switch(ack_reponse_code){
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <touch_check_enrolled+0x3c>
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d002      	beq.n	80024a8 <touch_check_enrolled+0x40>
 80024a2:	e003      	b.n	80024ac <touch_check_enrolled+0x44>
	case UART_OK:
		return 1;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e003      	b.n	80024b0 <touch_check_enrolled+0x48>
	case UART_NACK_ERR:
		return 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	e001      	b.n	80024b0 <touch_check_enrolled+0x48>
	default:
		return -1;
 80024ac:	2301      	movs	r3, #1
 80024ae:	425b      	negs	r3, r3
	}
}
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b004      	add	sp, #16
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000084 	.word	0x20000084
 80024bc:	20000090 	.word	0x20000090

080024c0 <touch_delete_all_fingerprints>:
	default:
		return -1;
	}
}

void touch_delete_all_fingerprints(){
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
	create_command_package(0, DELETE_ALL_FINGERPRINTS_CMD, command_packet);
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <touch_delete_all_fingerprints+0x2c>)
 80024c6:	001a      	movs	r2, r3
 80024c8:	2141      	movs	r1, #65	; 0x41
 80024ca:	2000      	movs	r0, #0
 80024cc:	f7ff fdbf 	bl	800204e <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <touch_delete_all_fingerprints+0x2c>)
 80024d2:	210c      	movs	r1, #12
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7ff fd7f 	bl	8001fd8 <touch_send>
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != UART_OK){
 80024da:	23fa      	movs	r3, #250	; 0xfa
 80024dc:	009a      	lsls	r2, r3, #2
 80024de:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <touch_delete_all_fingerprints+0x30>)
 80024e0:	210c      	movs	r1, #12
 80024e2:	0018      	movs	r0, r3
 80024e4:	f7ff fe0f 	bl	8002106 <rcv_ack>
		//Error Handling
		return;
	}
}
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000084 	.word	0x20000084
 80024f0:	20000090 	.word	0x20000090

080024f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024f4:	480d      	ldr	r0, [pc, #52]	; (800252c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024f8:	480d      	ldr	r0, [pc, #52]	; (8002530 <LoopForever+0x6>)
  ldr r1, =_edata
 80024fa:	490e      	ldr	r1, [pc, #56]	; (8002534 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024fc:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <LoopForever+0xe>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002500:	e002      	b.n	8002508 <LoopCopyDataInit>

08002502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002506:	3304      	adds	r3, #4

08002508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800250a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800250c:	d3f9      	bcc.n	8002502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800250e:	4a0b      	ldr	r2, [pc, #44]	; (800253c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002510:	4c0b      	ldr	r4, [pc, #44]	; (8002540 <LoopForever+0x16>)
  movs r3, #0
 8002512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002514:	e001      	b.n	800251a <LoopFillZerobss>

08002516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002518:	3204      	adds	r2, #4

0800251a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800251a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800251c:	d3fb      	bcc.n	8002516 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800251e:	f7ff fcbf 	bl	8001ea0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002522:	f000 f811 	bl	8002548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002526:	f7ff fb0f 	bl	8001b48 <main>

0800252a <LoopForever>:

LoopForever:
    b LoopForever
 800252a:	e7fe      	b.n	800252a <LoopForever>
  ldr   r0, =_estack
 800252c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002534:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002538:	080036b8 	.word	0x080036b8
  ldr r2, =_sbss
 800253c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002540:	20000120 	.word	0x20000120

08002544 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002544:	e7fe      	b.n	8002544 <ADC1_COMP_IRQHandler>
	...

08002548 <__libc_init_array>:
 8002548:	b570      	push	{r4, r5, r6, lr}
 800254a:	2600      	movs	r6, #0
 800254c:	4d0c      	ldr	r5, [pc, #48]	; (8002580 <__libc_init_array+0x38>)
 800254e:	4c0d      	ldr	r4, [pc, #52]	; (8002584 <__libc_init_array+0x3c>)
 8002550:	1b64      	subs	r4, r4, r5
 8002552:	10a4      	asrs	r4, r4, #2
 8002554:	42a6      	cmp	r6, r4
 8002556:	d109      	bne.n	800256c <__libc_init_array+0x24>
 8002558:	2600      	movs	r6, #0
 800255a:	f000 ffef 	bl	800353c <_init>
 800255e:	4d0a      	ldr	r5, [pc, #40]	; (8002588 <__libc_init_array+0x40>)
 8002560:	4c0a      	ldr	r4, [pc, #40]	; (800258c <__libc_init_array+0x44>)
 8002562:	1b64      	subs	r4, r4, r5
 8002564:	10a4      	asrs	r4, r4, #2
 8002566:	42a6      	cmp	r6, r4
 8002568:	d105      	bne.n	8002576 <__libc_init_array+0x2e>
 800256a:	bd70      	pop	{r4, r5, r6, pc}
 800256c:	00b3      	lsls	r3, r6, #2
 800256e:	58eb      	ldr	r3, [r5, r3]
 8002570:	4798      	blx	r3
 8002572:	3601      	adds	r6, #1
 8002574:	e7ee      	b.n	8002554 <__libc_init_array+0xc>
 8002576:	00b3      	lsls	r3, r6, #2
 8002578:	58eb      	ldr	r3, [r5, r3]
 800257a:	4798      	blx	r3
 800257c:	3601      	adds	r6, #1
 800257e:	e7f2      	b.n	8002566 <__libc_init_array+0x1e>
 8002580:	080036b0 	.word	0x080036b0
 8002584:	080036b0 	.word	0x080036b0
 8002588:	080036b0 	.word	0x080036b0
 800258c:	080036b4 	.word	0x080036b4

08002590 <malloc>:
 8002590:	b510      	push	{r4, lr}
 8002592:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <malloc+0x10>)
 8002594:	0001      	movs	r1, r0
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	f000 f858 	bl	800264c <_malloc_r>
 800259c:	bd10      	pop	{r4, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	20000004 	.word	0x20000004

080025a4 <free>:
 80025a4:	b510      	push	{r4, lr}
 80025a6:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <free+0x10>)
 80025a8:	0001      	movs	r1, r0
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	f000 f804 	bl	80025b8 <_free_r>
 80025b0:	bd10      	pop	{r4, pc}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	20000004 	.word	0x20000004

080025b8 <_free_r>:
 80025b8:	b570      	push	{r4, r5, r6, lr}
 80025ba:	0005      	movs	r5, r0
 80025bc:	2900      	cmp	r1, #0
 80025be:	d010      	beq.n	80025e2 <_free_r+0x2a>
 80025c0:	1f0c      	subs	r4, r1, #4
 80025c2:	6823      	ldr	r3, [r4, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	da00      	bge.n	80025ca <_free_r+0x12>
 80025c8:	18e4      	adds	r4, r4, r3
 80025ca:	0028      	movs	r0, r5
 80025cc:	f000 f9bb 	bl	8002946 <__malloc_lock>
 80025d0:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <_free_r+0x90>)
 80025d2:	6813      	ldr	r3, [r2, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d105      	bne.n	80025e4 <_free_r+0x2c>
 80025d8:	6063      	str	r3, [r4, #4]
 80025da:	6014      	str	r4, [r2, #0]
 80025dc:	0028      	movs	r0, r5
 80025de:	f000 f9b3 	bl	8002948 <__malloc_unlock>
 80025e2:	bd70      	pop	{r4, r5, r6, pc}
 80025e4:	42a3      	cmp	r3, r4
 80025e6:	d909      	bls.n	80025fc <_free_r+0x44>
 80025e8:	6821      	ldr	r1, [r4, #0]
 80025ea:	1860      	adds	r0, r4, r1
 80025ec:	4283      	cmp	r3, r0
 80025ee:	d1f3      	bne.n	80025d8 <_free_r+0x20>
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	1841      	adds	r1, r0, r1
 80025f6:	6021      	str	r1, [r4, #0]
 80025f8:	e7ee      	b.n	80025d8 <_free_r+0x20>
 80025fa:	0013      	movs	r3, r2
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	2a00      	cmp	r2, #0
 8002600:	d001      	beq.n	8002606 <_free_r+0x4e>
 8002602:	42a2      	cmp	r2, r4
 8002604:	d9f9      	bls.n	80025fa <_free_r+0x42>
 8002606:	6819      	ldr	r1, [r3, #0]
 8002608:	1858      	adds	r0, r3, r1
 800260a:	42a0      	cmp	r0, r4
 800260c:	d10b      	bne.n	8002626 <_free_r+0x6e>
 800260e:	6820      	ldr	r0, [r4, #0]
 8002610:	1809      	adds	r1, r1, r0
 8002612:	1858      	adds	r0, r3, r1
 8002614:	6019      	str	r1, [r3, #0]
 8002616:	4282      	cmp	r2, r0
 8002618:	d1e0      	bne.n	80025dc <_free_r+0x24>
 800261a:	6810      	ldr	r0, [r2, #0]
 800261c:	6852      	ldr	r2, [r2, #4]
 800261e:	1841      	adds	r1, r0, r1
 8002620:	6019      	str	r1, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]
 8002624:	e7da      	b.n	80025dc <_free_r+0x24>
 8002626:	42a0      	cmp	r0, r4
 8002628:	d902      	bls.n	8002630 <_free_r+0x78>
 800262a:	230c      	movs	r3, #12
 800262c:	602b      	str	r3, [r5, #0]
 800262e:	e7d5      	b.n	80025dc <_free_r+0x24>
 8002630:	6821      	ldr	r1, [r4, #0]
 8002632:	1860      	adds	r0, r4, r1
 8002634:	4282      	cmp	r2, r0
 8002636:	d103      	bne.n	8002640 <_free_r+0x88>
 8002638:	6810      	ldr	r0, [r2, #0]
 800263a:	6852      	ldr	r2, [r2, #4]
 800263c:	1841      	adds	r1, r0, r1
 800263e:	6021      	str	r1, [r4, #0]
 8002640:	6062      	str	r2, [r4, #4]
 8002642:	605c      	str	r4, [r3, #4]
 8002644:	e7ca      	b.n	80025dc <_free_r+0x24>
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	2000009c 	.word	0x2000009c

0800264c <_malloc_r>:
 800264c:	2303      	movs	r3, #3
 800264e:	b570      	push	{r4, r5, r6, lr}
 8002650:	1ccd      	adds	r5, r1, #3
 8002652:	439d      	bics	r5, r3
 8002654:	3508      	adds	r5, #8
 8002656:	0006      	movs	r6, r0
 8002658:	2d0c      	cmp	r5, #12
 800265a:	d21e      	bcs.n	800269a <_malloc_r+0x4e>
 800265c:	250c      	movs	r5, #12
 800265e:	42a9      	cmp	r1, r5
 8002660:	d81d      	bhi.n	800269e <_malloc_r+0x52>
 8002662:	0030      	movs	r0, r6
 8002664:	f000 f96f 	bl	8002946 <__malloc_lock>
 8002668:	4a25      	ldr	r2, [pc, #148]	; (8002700 <_malloc_r+0xb4>)
 800266a:	6814      	ldr	r4, [r2, #0]
 800266c:	0021      	movs	r1, r4
 800266e:	2900      	cmp	r1, #0
 8002670:	d119      	bne.n	80026a6 <_malloc_r+0x5a>
 8002672:	4c24      	ldr	r4, [pc, #144]	; (8002704 <_malloc_r+0xb8>)
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d103      	bne.n	8002682 <_malloc_r+0x36>
 800267a:	0030      	movs	r0, r6
 800267c:	f000 f872 	bl	8002764 <_sbrk_r>
 8002680:	6020      	str	r0, [r4, #0]
 8002682:	0029      	movs	r1, r5
 8002684:	0030      	movs	r0, r6
 8002686:	f000 f86d 	bl	8002764 <_sbrk_r>
 800268a:	1c43      	adds	r3, r0, #1
 800268c:	d12c      	bne.n	80026e8 <_malloc_r+0x9c>
 800268e:	230c      	movs	r3, #12
 8002690:	0030      	movs	r0, r6
 8002692:	6033      	str	r3, [r6, #0]
 8002694:	f000 f958 	bl	8002948 <__malloc_unlock>
 8002698:	e003      	b.n	80026a2 <_malloc_r+0x56>
 800269a:	2d00      	cmp	r5, #0
 800269c:	dadf      	bge.n	800265e <_malloc_r+0x12>
 800269e:	230c      	movs	r3, #12
 80026a0:	6033      	str	r3, [r6, #0]
 80026a2:	2000      	movs	r0, #0
 80026a4:	bd70      	pop	{r4, r5, r6, pc}
 80026a6:	680b      	ldr	r3, [r1, #0]
 80026a8:	1b5b      	subs	r3, r3, r5
 80026aa:	d41a      	bmi.n	80026e2 <_malloc_r+0x96>
 80026ac:	2b0b      	cmp	r3, #11
 80026ae:	d903      	bls.n	80026b8 <_malloc_r+0x6c>
 80026b0:	600b      	str	r3, [r1, #0]
 80026b2:	18cc      	adds	r4, r1, r3
 80026b4:	6025      	str	r5, [r4, #0]
 80026b6:	e003      	b.n	80026c0 <_malloc_r+0x74>
 80026b8:	428c      	cmp	r4, r1
 80026ba:	d10e      	bne.n	80026da <_malloc_r+0x8e>
 80026bc:	6863      	ldr	r3, [r4, #4]
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	0030      	movs	r0, r6
 80026c2:	f000 f941 	bl	8002948 <__malloc_unlock>
 80026c6:	0020      	movs	r0, r4
 80026c8:	2207      	movs	r2, #7
 80026ca:	300b      	adds	r0, #11
 80026cc:	1d23      	adds	r3, r4, #4
 80026ce:	4390      	bics	r0, r2
 80026d0:	1ac3      	subs	r3, r0, r3
 80026d2:	d0e7      	beq.n	80026a4 <_malloc_r+0x58>
 80026d4:	425a      	negs	r2, r3
 80026d6:	50e2      	str	r2, [r4, r3]
 80026d8:	e7e4      	b.n	80026a4 <_malloc_r+0x58>
 80026da:	684b      	ldr	r3, [r1, #4]
 80026dc:	6063      	str	r3, [r4, #4]
 80026de:	000c      	movs	r4, r1
 80026e0:	e7ee      	b.n	80026c0 <_malloc_r+0x74>
 80026e2:	000c      	movs	r4, r1
 80026e4:	6849      	ldr	r1, [r1, #4]
 80026e6:	e7c2      	b.n	800266e <_malloc_r+0x22>
 80026e8:	2303      	movs	r3, #3
 80026ea:	1cc4      	adds	r4, r0, #3
 80026ec:	439c      	bics	r4, r3
 80026ee:	42a0      	cmp	r0, r4
 80026f0:	d0e0      	beq.n	80026b4 <_malloc_r+0x68>
 80026f2:	1a21      	subs	r1, r4, r0
 80026f4:	0030      	movs	r0, r6
 80026f6:	f000 f835 	bl	8002764 <_sbrk_r>
 80026fa:	1c43      	adds	r3, r0, #1
 80026fc:	d1da      	bne.n	80026b4 <_malloc_r+0x68>
 80026fe:	e7c6      	b.n	800268e <_malloc_r+0x42>
 8002700:	2000009c 	.word	0x2000009c
 8002704:	200000a0 	.word	0x200000a0

08002708 <iprintf>:
 8002708:	b40f      	push	{r0, r1, r2, r3}
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <iprintf+0x30>)
 800270c:	b513      	push	{r0, r1, r4, lr}
 800270e:	681c      	ldr	r4, [r3, #0]
 8002710:	2c00      	cmp	r4, #0
 8002712:	d005      	beq.n	8002720 <iprintf+0x18>
 8002714:	69a3      	ldr	r3, [r4, #24]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d102      	bne.n	8002720 <iprintf+0x18>
 800271a:	0020      	movs	r0, r4
 800271c:	f000 f876 	bl	800280c <__sinit>
 8002720:	ab05      	add	r3, sp, #20
 8002722:	9a04      	ldr	r2, [sp, #16]
 8002724:	68a1      	ldr	r1, [r4, #8]
 8002726:	0020      	movs	r0, r4
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	f000 f935 	bl	8002998 <_vfiprintf_r>
 800272e:	bc16      	pop	{r1, r2, r4}
 8002730:	bc08      	pop	{r3}
 8002732:	b004      	add	sp, #16
 8002734:	4718      	bx	r3
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	20000004 	.word	0x20000004

0800273c <putchar>:
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <putchar+0x24>)
 800273e:	b570      	push	{r4, r5, r6, lr}
 8002740:	681c      	ldr	r4, [r3, #0]
 8002742:	0005      	movs	r5, r0
 8002744:	2c00      	cmp	r4, #0
 8002746:	d005      	beq.n	8002754 <putchar+0x18>
 8002748:	69a3      	ldr	r3, [r4, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d102      	bne.n	8002754 <putchar+0x18>
 800274e:	0020      	movs	r0, r4
 8002750:	f000 f85c 	bl	800280c <__sinit>
 8002754:	0029      	movs	r1, r5
 8002756:	68a2      	ldr	r2, [r4, #8]
 8002758:	0020      	movs	r0, r4
 800275a:	f000 fbc1 	bl	8002ee0 <_putc_r>
 800275e:	bd70      	pop	{r4, r5, r6, pc}
 8002760:	20000004 	.word	0x20000004

08002764 <_sbrk_r>:
 8002764:	2300      	movs	r3, #0
 8002766:	b570      	push	{r4, r5, r6, lr}
 8002768:	4c06      	ldr	r4, [pc, #24]	; (8002784 <_sbrk_r+0x20>)
 800276a:	0005      	movs	r5, r0
 800276c:	0008      	movs	r0, r1
 800276e:	6023      	str	r3, [r4, #0]
 8002770:	f000 fecc 	bl	800350c <_sbrk>
 8002774:	1c43      	adds	r3, r0, #1
 8002776:	d103      	bne.n	8002780 <_sbrk_r+0x1c>
 8002778:	6823      	ldr	r3, [r4, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d000      	beq.n	8002780 <_sbrk_r+0x1c>
 800277e:	602b      	str	r3, [r5, #0]
 8002780:	bd70      	pop	{r4, r5, r6, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	2000011c 	.word	0x2000011c

08002788 <_cleanup_r>:
 8002788:	b510      	push	{r4, lr}
 800278a:	4902      	ldr	r1, [pc, #8]	; (8002794 <_cleanup_r+0xc>)
 800278c:	f000 f8b2 	bl	80028f4 <_fwalk_reent>
 8002790:	bd10      	pop	{r4, pc}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	080032dd 	.word	0x080032dd

08002798 <std.isra.0>:
 8002798:	2300      	movs	r3, #0
 800279a:	b510      	push	{r4, lr}
 800279c:	0004      	movs	r4, r0
 800279e:	6003      	str	r3, [r0, #0]
 80027a0:	6043      	str	r3, [r0, #4]
 80027a2:	6083      	str	r3, [r0, #8]
 80027a4:	8181      	strh	r1, [r0, #12]
 80027a6:	6643      	str	r3, [r0, #100]	; 0x64
 80027a8:	81c2      	strh	r2, [r0, #14]
 80027aa:	6103      	str	r3, [r0, #16]
 80027ac:	6143      	str	r3, [r0, #20]
 80027ae:	6183      	str	r3, [r0, #24]
 80027b0:	0019      	movs	r1, r3
 80027b2:	2208      	movs	r2, #8
 80027b4:	305c      	adds	r0, #92	; 0x5c
 80027b6:	f000 f8be 	bl	8002936 <memset>
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <std.isra.0+0x38>)
 80027bc:	6224      	str	r4, [r4, #32]
 80027be:	6263      	str	r3, [r4, #36]	; 0x24
 80027c0:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <std.isra.0+0x3c>)
 80027c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <std.isra.0+0x40>)
 80027c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <std.isra.0+0x44>)
 80027ca:	6323      	str	r3, [r4, #48]	; 0x30
 80027cc:	bd10      	pop	{r4, pc}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	08002f4d 	.word	0x08002f4d
 80027d4:	08002f75 	.word	0x08002f75
 80027d8:	08002fad 	.word	0x08002fad
 80027dc:	08002fd9 	.word	0x08002fd9

080027e0 <__sfmoreglue>:
 80027e0:	b570      	push	{r4, r5, r6, lr}
 80027e2:	2568      	movs	r5, #104	; 0x68
 80027e4:	1e4a      	subs	r2, r1, #1
 80027e6:	4355      	muls	r5, r2
 80027e8:	000e      	movs	r6, r1
 80027ea:	0029      	movs	r1, r5
 80027ec:	3174      	adds	r1, #116	; 0x74
 80027ee:	f7ff ff2d 	bl	800264c <_malloc_r>
 80027f2:	1e04      	subs	r4, r0, #0
 80027f4:	d008      	beq.n	8002808 <__sfmoreglue+0x28>
 80027f6:	2100      	movs	r1, #0
 80027f8:	002a      	movs	r2, r5
 80027fa:	6001      	str	r1, [r0, #0]
 80027fc:	6046      	str	r6, [r0, #4]
 80027fe:	300c      	adds	r0, #12
 8002800:	60a0      	str	r0, [r4, #8]
 8002802:	3268      	adds	r2, #104	; 0x68
 8002804:	f000 f897 	bl	8002936 <memset>
 8002808:	0020      	movs	r0, r4
 800280a:	bd70      	pop	{r4, r5, r6, pc}

0800280c <__sinit>:
 800280c:	6983      	ldr	r3, [r0, #24]
 800280e:	b513      	push	{r0, r1, r4, lr}
 8002810:	0004      	movs	r4, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d128      	bne.n	8002868 <__sinit+0x5c>
 8002816:	6483      	str	r3, [r0, #72]	; 0x48
 8002818:	64c3      	str	r3, [r0, #76]	; 0x4c
 800281a:	6503      	str	r3, [r0, #80]	; 0x50
 800281c:	4b13      	ldr	r3, [pc, #76]	; (800286c <__sinit+0x60>)
 800281e:	4a14      	ldr	r2, [pc, #80]	; (8002870 <__sinit+0x64>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6282      	str	r2, [r0, #40]	; 0x28
 8002824:	9301      	str	r3, [sp, #4]
 8002826:	4298      	cmp	r0, r3
 8002828:	d101      	bne.n	800282e <__sinit+0x22>
 800282a:	2301      	movs	r3, #1
 800282c:	6183      	str	r3, [r0, #24]
 800282e:	0020      	movs	r0, r4
 8002830:	f000 f820 	bl	8002874 <__sfp>
 8002834:	6060      	str	r0, [r4, #4]
 8002836:	0020      	movs	r0, r4
 8002838:	f000 f81c 	bl	8002874 <__sfp>
 800283c:	60a0      	str	r0, [r4, #8]
 800283e:	0020      	movs	r0, r4
 8002840:	f000 f818 	bl	8002874 <__sfp>
 8002844:	2200      	movs	r2, #0
 8002846:	60e0      	str	r0, [r4, #12]
 8002848:	2104      	movs	r1, #4
 800284a:	6860      	ldr	r0, [r4, #4]
 800284c:	f7ff ffa4 	bl	8002798 <std.isra.0>
 8002850:	2201      	movs	r2, #1
 8002852:	2109      	movs	r1, #9
 8002854:	68a0      	ldr	r0, [r4, #8]
 8002856:	f7ff ff9f 	bl	8002798 <std.isra.0>
 800285a:	2202      	movs	r2, #2
 800285c:	2112      	movs	r1, #18
 800285e:	68e0      	ldr	r0, [r4, #12]
 8002860:	f7ff ff9a 	bl	8002798 <std.isra.0>
 8002864:	2301      	movs	r3, #1
 8002866:	61a3      	str	r3, [r4, #24]
 8002868:	bd13      	pop	{r0, r1, r4, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	08003678 	.word	0x08003678
 8002870:	08002789 	.word	0x08002789

08002874 <__sfp>:
 8002874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <__sfp+0x7c>)
 8002878:	0007      	movs	r7, r0
 800287a:	681e      	ldr	r6, [r3, #0]
 800287c:	69b3      	ldr	r3, [r6, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d102      	bne.n	8002888 <__sfp+0x14>
 8002882:	0030      	movs	r0, r6
 8002884:	f7ff ffc2 	bl	800280c <__sinit>
 8002888:	3648      	adds	r6, #72	; 0x48
 800288a:	68b4      	ldr	r4, [r6, #8]
 800288c:	6873      	ldr	r3, [r6, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	d504      	bpl.n	800289c <__sfp+0x28>
 8002892:	6833      	ldr	r3, [r6, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <__sfp+0x34>
 8002898:	6836      	ldr	r6, [r6, #0]
 800289a:	e7f6      	b.n	800288a <__sfp+0x16>
 800289c:	220c      	movs	r2, #12
 800289e:	5ea5      	ldrsh	r5, [r4, r2]
 80028a0:	2d00      	cmp	r5, #0
 80028a2:	d00d      	beq.n	80028c0 <__sfp+0x4c>
 80028a4:	3468      	adds	r4, #104	; 0x68
 80028a6:	e7f2      	b.n	800288e <__sfp+0x1a>
 80028a8:	2104      	movs	r1, #4
 80028aa:	0038      	movs	r0, r7
 80028ac:	f7ff ff98 	bl	80027e0 <__sfmoreglue>
 80028b0:	6030      	str	r0, [r6, #0]
 80028b2:	2800      	cmp	r0, #0
 80028b4:	d1f0      	bne.n	8002898 <__sfp+0x24>
 80028b6:	230c      	movs	r3, #12
 80028b8:	0004      	movs	r4, r0
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	0020      	movs	r0, r4
 80028be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028c0:	2301      	movs	r3, #1
 80028c2:	0020      	movs	r0, r4
 80028c4:	425b      	negs	r3, r3
 80028c6:	81e3      	strh	r3, [r4, #14]
 80028c8:	3302      	adds	r3, #2
 80028ca:	81a3      	strh	r3, [r4, #12]
 80028cc:	6665      	str	r5, [r4, #100]	; 0x64
 80028ce:	6025      	str	r5, [r4, #0]
 80028d0:	60a5      	str	r5, [r4, #8]
 80028d2:	6065      	str	r5, [r4, #4]
 80028d4:	6125      	str	r5, [r4, #16]
 80028d6:	6165      	str	r5, [r4, #20]
 80028d8:	61a5      	str	r5, [r4, #24]
 80028da:	2208      	movs	r2, #8
 80028dc:	0029      	movs	r1, r5
 80028de:	305c      	adds	r0, #92	; 0x5c
 80028e0:	f000 f829 	bl	8002936 <memset>
 80028e4:	6365      	str	r5, [r4, #52]	; 0x34
 80028e6:	63a5      	str	r5, [r4, #56]	; 0x38
 80028e8:	64a5      	str	r5, [r4, #72]	; 0x48
 80028ea:	64e5      	str	r5, [r4, #76]	; 0x4c
 80028ec:	e7e6      	b.n	80028bc <__sfp+0x48>
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	08003678 	.word	0x08003678

080028f4 <_fwalk_reent>:
 80028f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028f6:	0004      	movs	r4, r0
 80028f8:	0007      	movs	r7, r0
 80028fa:	2600      	movs	r6, #0
 80028fc:	9101      	str	r1, [sp, #4]
 80028fe:	3448      	adds	r4, #72	; 0x48
 8002900:	2c00      	cmp	r4, #0
 8002902:	d101      	bne.n	8002908 <_fwalk_reent+0x14>
 8002904:	0030      	movs	r0, r6
 8002906:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002908:	6863      	ldr	r3, [r4, #4]
 800290a:	68a5      	ldr	r5, [r4, #8]
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	9b00      	ldr	r3, [sp, #0]
 8002910:	3b01      	subs	r3, #1
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	d501      	bpl.n	800291a <_fwalk_reent+0x26>
 8002916:	6824      	ldr	r4, [r4, #0]
 8002918:	e7f2      	b.n	8002900 <_fwalk_reent+0xc>
 800291a:	89ab      	ldrh	r3, [r5, #12]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d908      	bls.n	8002932 <_fwalk_reent+0x3e>
 8002920:	220e      	movs	r2, #14
 8002922:	5eab      	ldrsh	r3, [r5, r2]
 8002924:	3301      	adds	r3, #1
 8002926:	d004      	beq.n	8002932 <_fwalk_reent+0x3e>
 8002928:	0029      	movs	r1, r5
 800292a:	0038      	movs	r0, r7
 800292c:	9b01      	ldr	r3, [sp, #4]
 800292e:	4798      	blx	r3
 8002930:	4306      	orrs	r6, r0
 8002932:	3568      	adds	r5, #104	; 0x68
 8002934:	e7eb      	b.n	800290e <_fwalk_reent+0x1a>

08002936 <memset>:
 8002936:	0003      	movs	r3, r0
 8002938:	1882      	adds	r2, r0, r2
 800293a:	4293      	cmp	r3, r2
 800293c:	d100      	bne.n	8002940 <memset+0xa>
 800293e:	4770      	bx	lr
 8002940:	7019      	strb	r1, [r3, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	e7f9      	b.n	800293a <memset+0x4>

08002946 <__malloc_lock>:
 8002946:	4770      	bx	lr

08002948 <__malloc_unlock>:
 8002948:	4770      	bx	lr

0800294a <__sfputc_r>:
 800294a:	6893      	ldr	r3, [r2, #8]
 800294c:	b510      	push	{r4, lr}
 800294e:	3b01      	subs	r3, #1
 8002950:	6093      	str	r3, [r2, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	da05      	bge.n	8002962 <__sfputc_r+0x18>
 8002956:	6994      	ldr	r4, [r2, #24]
 8002958:	42a3      	cmp	r3, r4
 800295a:	db08      	blt.n	800296e <__sfputc_r+0x24>
 800295c:	b2cb      	uxtb	r3, r1
 800295e:	2b0a      	cmp	r3, #10
 8002960:	d005      	beq.n	800296e <__sfputc_r+0x24>
 8002962:	6813      	ldr	r3, [r2, #0]
 8002964:	1c58      	adds	r0, r3, #1
 8002966:	6010      	str	r0, [r2, #0]
 8002968:	7019      	strb	r1, [r3, #0]
 800296a:	b2c8      	uxtb	r0, r1
 800296c:	bd10      	pop	{r4, pc}
 800296e:	f000 fb39 	bl	8002fe4 <__swbuf_r>
 8002972:	e7fb      	b.n	800296c <__sfputc_r+0x22>

08002974 <__sfputs_r>:
 8002974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002976:	0006      	movs	r6, r0
 8002978:	000f      	movs	r7, r1
 800297a:	0014      	movs	r4, r2
 800297c:	18d5      	adds	r5, r2, r3
 800297e:	42ac      	cmp	r4, r5
 8002980:	d101      	bne.n	8002986 <__sfputs_r+0x12>
 8002982:	2000      	movs	r0, #0
 8002984:	e007      	b.n	8002996 <__sfputs_r+0x22>
 8002986:	7821      	ldrb	r1, [r4, #0]
 8002988:	003a      	movs	r2, r7
 800298a:	0030      	movs	r0, r6
 800298c:	f7ff ffdd 	bl	800294a <__sfputc_r>
 8002990:	3401      	adds	r4, #1
 8002992:	1c43      	adds	r3, r0, #1
 8002994:	d1f3      	bne.n	800297e <__sfputs_r+0xa>
 8002996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002998 <_vfiprintf_r>:
 8002998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299a:	b09f      	sub	sp, #124	; 0x7c
 800299c:	0006      	movs	r6, r0
 800299e:	000f      	movs	r7, r1
 80029a0:	0014      	movs	r4, r2
 80029a2:	9305      	str	r3, [sp, #20]
 80029a4:	2800      	cmp	r0, #0
 80029a6:	d004      	beq.n	80029b2 <_vfiprintf_r+0x1a>
 80029a8:	6983      	ldr	r3, [r0, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <_vfiprintf_r+0x1a>
 80029ae:	f7ff ff2d 	bl	800280c <__sinit>
 80029b2:	4b7f      	ldr	r3, [pc, #508]	; (8002bb0 <_vfiprintf_r+0x218>)
 80029b4:	429f      	cmp	r7, r3
 80029b6:	d15c      	bne.n	8002a72 <_vfiprintf_r+0xda>
 80029b8:	6877      	ldr	r7, [r6, #4]
 80029ba:	89bb      	ldrh	r3, [r7, #12]
 80029bc:	071b      	lsls	r3, r3, #28
 80029be:	d562      	bpl.n	8002a86 <_vfiprintf_r+0xee>
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d05f      	beq.n	8002a86 <_vfiprintf_r+0xee>
 80029c6:	2300      	movs	r3, #0
 80029c8:	ad06      	add	r5, sp, #24
 80029ca:	616b      	str	r3, [r5, #20]
 80029cc:	3320      	adds	r3, #32
 80029ce:	766b      	strb	r3, [r5, #25]
 80029d0:	3310      	adds	r3, #16
 80029d2:	76ab      	strb	r3, [r5, #26]
 80029d4:	9402      	str	r4, [sp, #8]
 80029d6:	9c02      	ldr	r4, [sp, #8]
 80029d8:	7823      	ldrb	r3, [r4, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d15d      	bne.n	8002a9a <_vfiprintf_r+0x102>
 80029de:	9b02      	ldr	r3, [sp, #8]
 80029e0:	1ae3      	subs	r3, r4, r3
 80029e2:	9304      	str	r3, [sp, #16]
 80029e4:	d00d      	beq.n	8002a02 <_vfiprintf_r+0x6a>
 80029e6:	9b04      	ldr	r3, [sp, #16]
 80029e8:	9a02      	ldr	r2, [sp, #8]
 80029ea:	0039      	movs	r1, r7
 80029ec:	0030      	movs	r0, r6
 80029ee:	f7ff ffc1 	bl	8002974 <__sfputs_r>
 80029f2:	1c43      	adds	r3, r0, #1
 80029f4:	d100      	bne.n	80029f8 <_vfiprintf_r+0x60>
 80029f6:	e0cc      	b.n	8002b92 <_vfiprintf_r+0x1fa>
 80029f8:	696a      	ldr	r2, [r5, #20]
 80029fa:	9b04      	ldr	r3, [sp, #16]
 80029fc:	4694      	mov	ip, r2
 80029fe:	4463      	add	r3, ip
 8002a00:	616b      	str	r3, [r5, #20]
 8002a02:	7823      	ldrb	r3, [r4, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d100      	bne.n	8002a0a <_vfiprintf_r+0x72>
 8002a08:	e0c3      	b.n	8002b92 <_vfiprintf_r+0x1fa>
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	4252      	negs	r2, r2
 8002a10:	606a      	str	r2, [r5, #4]
 8002a12:	a902      	add	r1, sp, #8
 8002a14:	3254      	adds	r2, #84	; 0x54
 8002a16:	1852      	adds	r2, r2, r1
 8002a18:	3401      	adds	r4, #1
 8002a1a:	602b      	str	r3, [r5, #0]
 8002a1c:	60eb      	str	r3, [r5, #12]
 8002a1e:	60ab      	str	r3, [r5, #8]
 8002a20:	7013      	strb	r3, [r2, #0]
 8002a22:	65ab      	str	r3, [r5, #88]	; 0x58
 8002a24:	7821      	ldrb	r1, [r4, #0]
 8002a26:	2205      	movs	r2, #5
 8002a28:	4862      	ldr	r0, [pc, #392]	; (8002bb4 <_vfiprintf_r+0x21c>)
 8002a2a:	f000 fd03 	bl	8003434 <memchr>
 8002a2e:	1c63      	adds	r3, r4, #1
 8002a30:	469c      	mov	ip, r3
 8002a32:	2800      	cmp	r0, #0
 8002a34:	d135      	bne.n	8002aa2 <_vfiprintf_r+0x10a>
 8002a36:	6829      	ldr	r1, [r5, #0]
 8002a38:	06cb      	lsls	r3, r1, #27
 8002a3a:	d504      	bpl.n	8002a46 <_vfiprintf_r+0xae>
 8002a3c:	2353      	movs	r3, #83	; 0x53
 8002a3e:	aa02      	add	r2, sp, #8
 8002a40:	3020      	adds	r0, #32
 8002a42:	189b      	adds	r3, r3, r2
 8002a44:	7018      	strb	r0, [r3, #0]
 8002a46:	070b      	lsls	r3, r1, #28
 8002a48:	d504      	bpl.n	8002a54 <_vfiprintf_r+0xbc>
 8002a4a:	2353      	movs	r3, #83	; 0x53
 8002a4c:	202b      	movs	r0, #43	; 0x2b
 8002a4e:	aa02      	add	r2, sp, #8
 8002a50:	189b      	adds	r3, r3, r2
 8002a52:	7018      	strb	r0, [r3, #0]
 8002a54:	7823      	ldrb	r3, [r4, #0]
 8002a56:	2b2a      	cmp	r3, #42	; 0x2a
 8002a58:	d02c      	beq.n	8002ab4 <_vfiprintf_r+0x11c>
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	210a      	movs	r1, #10
 8002a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a60:	7822      	ldrb	r2, [r4, #0]
 8002a62:	3a30      	subs	r2, #48	; 0x30
 8002a64:	2a09      	cmp	r2, #9
 8002a66:	d800      	bhi.n	8002a6a <_vfiprintf_r+0xd2>
 8002a68:	e06b      	b.n	8002b42 <_vfiprintf_r+0x1aa>
 8002a6a:	2800      	cmp	r0, #0
 8002a6c:	d02a      	beq.n	8002ac4 <_vfiprintf_r+0x12c>
 8002a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a70:	e028      	b.n	8002ac4 <_vfiprintf_r+0x12c>
 8002a72:	4b51      	ldr	r3, [pc, #324]	; (8002bb8 <_vfiprintf_r+0x220>)
 8002a74:	429f      	cmp	r7, r3
 8002a76:	d101      	bne.n	8002a7c <_vfiprintf_r+0xe4>
 8002a78:	68b7      	ldr	r7, [r6, #8]
 8002a7a:	e79e      	b.n	80029ba <_vfiprintf_r+0x22>
 8002a7c:	4b4f      	ldr	r3, [pc, #316]	; (8002bbc <_vfiprintf_r+0x224>)
 8002a7e:	429f      	cmp	r7, r3
 8002a80:	d19b      	bne.n	80029ba <_vfiprintf_r+0x22>
 8002a82:	68f7      	ldr	r7, [r6, #12]
 8002a84:	e799      	b.n	80029ba <_vfiprintf_r+0x22>
 8002a86:	0039      	movs	r1, r7
 8002a88:	0030      	movs	r0, r6
 8002a8a:	f000 fb15 	bl	80030b8 <__swsetup_r>
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d099      	beq.n	80029c6 <_vfiprintf_r+0x2e>
 8002a92:	2001      	movs	r0, #1
 8002a94:	4240      	negs	r0, r0
 8002a96:	b01f      	add	sp, #124	; 0x7c
 8002a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a9a:	2b25      	cmp	r3, #37	; 0x25
 8002a9c:	d09f      	beq.n	80029de <_vfiprintf_r+0x46>
 8002a9e:	3401      	adds	r4, #1
 8002aa0:	e79a      	b.n	80029d8 <_vfiprintf_r+0x40>
 8002aa2:	4b44      	ldr	r3, [pc, #272]	; (8002bb4 <_vfiprintf_r+0x21c>)
 8002aa4:	6829      	ldr	r1, [r5, #0]
 8002aa6:	1ac0      	subs	r0, r0, r3
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	4083      	lsls	r3, r0
 8002aac:	430b      	orrs	r3, r1
 8002aae:	602b      	str	r3, [r5, #0]
 8002ab0:	4664      	mov	r4, ip
 8002ab2:	e7b7      	b.n	8002a24 <_vfiprintf_r+0x8c>
 8002ab4:	9b05      	ldr	r3, [sp, #20]
 8002ab6:	1d18      	adds	r0, r3, #4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	9005      	str	r0, [sp, #20]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	db3a      	blt.n	8002b36 <_vfiprintf_r+0x19e>
 8002ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ac2:	4664      	mov	r4, ip
 8002ac4:	7823      	ldrb	r3, [r4, #0]
 8002ac6:	2b2e      	cmp	r3, #46	; 0x2e
 8002ac8:	d10b      	bne.n	8002ae2 <_vfiprintf_r+0x14a>
 8002aca:	7863      	ldrb	r3, [r4, #1]
 8002acc:	1c62      	adds	r2, r4, #1
 8002ace:	2b2a      	cmp	r3, #42	; 0x2a
 8002ad0:	d13f      	bne.n	8002b52 <_vfiprintf_r+0x1ba>
 8002ad2:	9b05      	ldr	r3, [sp, #20]
 8002ad4:	3402      	adds	r4, #2
 8002ad6:	1d1a      	adds	r2, r3, #4
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	9205      	str	r2, [sp, #20]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	db35      	blt.n	8002b4c <_vfiprintf_r+0x1b4>
 8002ae0:	9307      	str	r3, [sp, #28]
 8002ae2:	7821      	ldrb	r1, [r4, #0]
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	4836      	ldr	r0, [pc, #216]	; (8002bc0 <_vfiprintf_r+0x228>)
 8002ae8:	f000 fca4 	bl	8003434 <memchr>
 8002aec:	2800      	cmp	r0, #0
 8002aee:	d007      	beq.n	8002b00 <_vfiprintf_r+0x168>
 8002af0:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <_vfiprintf_r+0x228>)
 8002af2:	682a      	ldr	r2, [r5, #0]
 8002af4:	1ac0      	subs	r0, r0, r3
 8002af6:	2340      	movs	r3, #64	; 0x40
 8002af8:	4083      	lsls	r3, r0
 8002afa:	4313      	orrs	r3, r2
 8002afc:	602b      	str	r3, [r5, #0]
 8002afe:	3401      	adds	r4, #1
 8002b00:	7821      	ldrb	r1, [r4, #0]
 8002b02:	1c63      	adds	r3, r4, #1
 8002b04:	2206      	movs	r2, #6
 8002b06:	482f      	ldr	r0, [pc, #188]	; (8002bc4 <_vfiprintf_r+0x22c>)
 8002b08:	9302      	str	r3, [sp, #8]
 8002b0a:	7629      	strb	r1, [r5, #24]
 8002b0c:	f000 fc92 	bl	8003434 <memchr>
 8002b10:	2800      	cmp	r0, #0
 8002b12:	d044      	beq.n	8002b9e <_vfiprintf_r+0x206>
 8002b14:	4b2c      	ldr	r3, [pc, #176]	; (8002bc8 <_vfiprintf_r+0x230>)
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d12f      	bne.n	8002b7a <_vfiprintf_r+0x1e2>
 8002b1a:	6829      	ldr	r1, [r5, #0]
 8002b1c:	9b05      	ldr	r3, [sp, #20]
 8002b1e:	2207      	movs	r2, #7
 8002b20:	05c9      	lsls	r1, r1, #23
 8002b22:	d528      	bpl.n	8002b76 <_vfiprintf_r+0x1de>
 8002b24:	189b      	adds	r3, r3, r2
 8002b26:	4393      	bics	r3, r2
 8002b28:	3308      	adds	r3, #8
 8002b2a:	9305      	str	r3, [sp, #20]
 8002b2c:	696b      	ldr	r3, [r5, #20]
 8002b2e:	9a03      	ldr	r2, [sp, #12]
 8002b30:	189b      	adds	r3, r3, r2
 8002b32:	616b      	str	r3, [r5, #20]
 8002b34:	e74f      	b.n	80029d6 <_vfiprintf_r+0x3e>
 8002b36:	425b      	negs	r3, r3
 8002b38:	60eb      	str	r3, [r5, #12]
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	602b      	str	r3, [r5, #0]
 8002b40:	e7bf      	b.n	8002ac2 <_vfiprintf_r+0x12a>
 8002b42:	434b      	muls	r3, r1
 8002b44:	3401      	adds	r4, #1
 8002b46:	189b      	adds	r3, r3, r2
 8002b48:	2001      	movs	r0, #1
 8002b4a:	e789      	b.n	8002a60 <_vfiprintf_r+0xc8>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	425b      	negs	r3, r3
 8002b50:	e7c6      	b.n	8002ae0 <_vfiprintf_r+0x148>
 8002b52:	2300      	movs	r3, #0
 8002b54:	0014      	movs	r4, r2
 8002b56:	200a      	movs	r0, #10
 8002b58:	001a      	movs	r2, r3
 8002b5a:	606b      	str	r3, [r5, #4]
 8002b5c:	7821      	ldrb	r1, [r4, #0]
 8002b5e:	3930      	subs	r1, #48	; 0x30
 8002b60:	2909      	cmp	r1, #9
 8002b62:	d903      	bls.n	8002b6c <_vfiprintf_r+0x1d4>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0bc      	beq.n	8002ae2 <_vfiprintf_r+0x14a>
 8002b68:	9207      	str	r2, [sp, #28]
 8002b6a:	e7ba      	b.n	8002ae2 <_vfiprintf_r+0x14a>
 8002b6c:	4342      	muls	r2, r0
 8002b6e:	3401      	adds	r4, #1
 8002b70:	1852      	adds	r2, r2, r1
 8002b72:	2301      	movs	r3, #1
 8002b74:	e7f2      	b.n	8002b5c <_vfiprintf_r+0x1c4>
 8002b76:	3307      	adds	r3, #7
 8002b78:	e7d5      	b.n	8002b26 <_vfiprintf_r+0x18e>
 8002b7a:	ab05      	add	r3, sp, #20
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	003a      	movs	r2, r7
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <_vfiprintf_r+0x234>)
 8002b82:	0029      	movs	r1, r5
 8002b84:	0030      	movs	r0, r6
 8002b86:	e000      	b.n	8002b8a <_vfiprintf_r+0x1f2>
 8002b88:	bf00      	nop
 8002b8a:	9003      	str	r0, [sp, #12]
 8002b8c:	9b03      	ldr	r3, [sp, #12]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	d1cc      	bne.n	8002b2c <_vfiprintf_r+0x194>
 8002b92:	89bb      	ldrh	r3, [r7, #12]
 8002b94:	065b      	lsls	r3, r3, #25
 8002b96:	d500      	bpl.n	8002b9a <_vfiprintf_r+0x202>
 8002b98:	e77b      	b.n	8002a92 <_vfiprintf_r+0xfa>
 8002b9a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002b9c:	e77b      	b.n	8002a96 <_vfiprintf_r+0xfe>
 8002b9e:	ab05      	add	r3, sp, #20
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	003a      	movs	r2, r7
 8002ba4:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <_vfiprintf_r+0x234>)
 8002ba6:	0029      	movs	r1, r5
 8002ba8:	0030      	movs	r0, r6
 8002baa:	f000 f87f 	bl	8002cac <_printf_i>
 8002bae:	e7ec      	b.n	8002b8a <_vfiprintf_r+0x1f2>
 8002bb0:	08003638 	.word	0x08003638
 8002bb4:	0800367c 	.word	0x0800367c
 8002bb8:	08003658 	.word	0x08003658
 8002bbc:	08003618 	.word	0x08003618
 8002bc0:	08003682 	.word	0x08003682
 8002bc4:	08003686 	.word	0x08003686
 8002bc8:	00000000 	.word	0x00000000
 8002bcc:	08002975 	.word	0x08002975

08002bd0 <_printf_common>:
 8002bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bd2:	0015      	movs	r5, r2
 8002bd4:	9301      	str	r3, [sp, #4]
 8002bd6:	688a      	ldr	r2, [r1, #8]
 8002bd8:	690b      	ldr	r3, [r1, #16]
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	000c      	movs	r4, r1
 8002bde:	4293      	cmp	r3, r2
 8002be0:	da00      	bge.n	8002be4 <_printf_common+0x14>
 8002be2:	0013      	movs	r3, r2
 8002be4:	0022      	movs	r2, r4
 8002be6:	602b      	str	r3, [r5, #0]
 8002be8:	3243      	adds	r2, #67	; 0x43
 8002bea:	7812      	ldrb	r2, [r2, #0]
 8002bec:	2a00      	cmp	r2, #0
 8002bee:	d001      	beq.n	8002bf4 <_printf_common+0x24>
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	602b      	str	r3, [r5, #0]
 8002bf4:	6823      	ldr	r3, [r4, #0]
 8002bf6:	069b      	lsls	r3, r3, #26
 8002bf8:	d502      	bpl.n	8002c00 <_printf_common+0x30>
 8002bfa:	682b      	ldr	r3, [r5, #0]
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	602b      	str	r3, [r5, #0]
 8002c00:	2706      	movs	r7, #6
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	401f      	ands	r7, r3
 8002c06:	d027      	beq.n	8002c58 <_printf_common+0x88>
 8002c08:	0023      	movs	r3, r4
 8002c0a:	3343      	adds	r3, #67	; 0x43
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	1e5a      	subs	r2, r3, #1
 8002c10:	4193      	sbcs	r3, r2
 8002c12:	6822      	ldr	r2, [r4, #0]
 8002c14:	0692      	lsls	r2, r2, #26
 8002c16:	d430      	bmi.n	8002c7a <_printf_common+0xaa>
 8002c18:	0022      	movs	r2, r4
 8002c1a:	9901      	ldr	r1, [sp, #4]
 8002c1c:	3243      	adds	r2, #67	; 0x43
 8002c1e:	9800      	ldr	r0, [sp, #0]
 8002c20:	9e08      	ldr	r6, [sp, #32]
 8002c22:	47b0      	blx	r6
 8002c24:	1c43      	adds	r3, r0, #1
 8002c26:	d025      	beq.n	8002c74 <_printf_common+0xa4>
 8002c28:	2306      	movs	r3, #6
 8002c2a:	6820      	ldr	r0, [r4, #0]
 8002c2c:	682a      	ldr	r2, [r5, #0]
 8002c2e:	68e1      	ldr	r1, [r4, #12]
 8002c30:	4003      	ands	r3, r0
 8002c32:	2500      	movs	r5, #0
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d103      	bne.n	8002c40 <_printf_common+0x70>
 8002c38:	1a8d      	subs	r5, r1, r2
 8002c3a:	43eb      	mvns	r3, r5
 8002c3c:	17db      	asrs	r3, r3, #31
 8002c3e:	401d      	ands	r5, r3
 8002c40:	68a3      	ldr	r3, [r4, #8]
 8002c42:	6922      	ldr	r2, [r4, #16]
 8002c44:	4293      	cmp	r3, r2
 8002c46:	dd01      	ble.n	8002c4c <_printf_common+0x7c>
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	18ed      	adds	r5, r5, r3
 8002c4c:	2700      	movs	r7, #0
 8002c4e:	42bd      	cmp	r5, r7
 8002c50:	d120      	bne.n	8002c94 <_printf_common+0xc4>
 8002c52:	2000      	movs	r0, #0
 8002c54:	e010      	b.n	8002c78 <_printf_common+0xa8>
 8002c56:	3701      	adds	r7, #1
 8002c58:	68e3      	ldr	r3, [r4, #12]
 8002c5a:	682a      	ldr	r2, [r5, #0]
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	429f      	cmp	r7, r3
 8002c60:	dad2      	bge.n	8002c08 <_printf_common+0x38>
 8002c62:	0022      	movs	r2, r4
 8002c64:	2301      	movs	r3, #1
 8002c66:	3219      	adds	r2, #25
 8002c68:	9901      	ldr	r1, [sp, #4]
 8002c6a:	9800      	ldr	r0, [sp, #0]
 8002c6c:	9e08      	ldr	r6, [sp, #32]
 8002c6e:	47b0      	blx	r6
 8002c70:	1c43      	adds	r3, r0, #1
 8002c72:	d1f0      	bne.n	8002c56 <_printf_common+0x86>
 8002c74:	2001      	movs	r0, #1
 8002c76:	4240      	negs	r0, r0
 8002c78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c7a:	2030      	movs	r0, #48	; 0x30
 8002c7c:	18e1      	adds	r1, r4, r3
 8002c7e:	3143      	adds	r1, #67	; 0x43
 8002c80:	7008      	strb	r0, [r1, #0]
 8002c82:	0021      	movs	r1, r4
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	3145      	adds	r1, #69	; 0x45
 8002c88:	7809      	ldrb	r1, [r1, #0]
 8002c8a:	18a2      	adds	r2, r4, r2
 8002c8c:	3243      	adds	r2, #67	; 0x43
 8002c8e:	3302      	adds	r3, #2
 8002c90:	7011      	strb	r1, [r2, #0]
 8002c92:	e7c1      	b.n	8002c18 <_printf_common+0x48>
 8002c94:	0022      	movs	r2, r4
 8002c96:	2301      	movs	r3, #1
 8002c98:	321a      	adds	r2, #26
 8002c9a:	9901      	ldr	r1, [sp, #4]
 8002c9c:	9800      	ldr	r0, [sp, #0]
 8002c9e:	9e08      	ldr	r6, [sp, #32]
 8002ca0:	47b0      	blx	r6
 8002ca2:	1c43      	adds	r3, r0, #1
 8002ca4:	d0e6      	beq.n	8002c74 <_printf_common+0xa4>
 8002ca6:	3701      	adds	r7, #1
 8002ca8:	e7d1      	b.n	8002c4e <_printf_common+0x7e>
	...

08002cac <_printf_i>:
 8002cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cae:	b08b      	sub	sp, #44	; 0x2c
 8002cb0:	9206      	str	r2, [sp, #24]
 8002cb2:	000a      	movs	r2, r1
 8002cb4:	3243      	adds	r2, #67	; 0x43
 8002cb6:	9307      	str	r3, [sp, #28]
 8002cb8:	9005      	str	r0, [sp, #20]
 8002cba:	9204      	str	r2, [sp, #16]
 8002cbc:	7e0a      	ldrb	r2, [r1, #24]
 8002cbe:	000c      	movs	r4, r1
 8002cc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002cc2:	2a6e      	cmp	r2, #110	; 0x6e
 8002cc4:	d100      	bne.n	8002cc8 <_printf_i+0x1c>
 8002cc6:	e08f      	b.n	8002de8 <_printf_i+0x13c>
 8002cc8:	d817      	bhi.n	8002cfa <_printf_i+0x4e>
 8002cca:	2a63      	cmp	r2, #99	; 0x63
 8002ccc:	d02c      	beq.n	8002d28 <_printf_i+0x7c>
 8002cce:	d808      	bhi.n	8002ce2 <_printf_i+0x36>
 8002cd0:	2a00      	cmp	r2, #0
 8002cd2:	d100      	bne.n	8002cd6 <_printf_i+0x2a>
 8002cd4:	e099      	b.n	8002e0a <_printf_i+0x15e>
 8002cd6:	2a58      	cmp	r2, #88	; 0x58
 8002cd8:	d054      	beq.n	8002d84 <_printf_i+0xd8>
 8002cda:	0026      	movs	r6, r4
 8002cdc:	3642      	adds	r6, #66	; 0x42
 8002cde:	7032      	strb	r2, [r6, #0]
 8002ce0:	e029      	b.n	8002d36 <_printf_i+0x8a>
 8002ce2:	2a64      	cmp	r2, #100	; 0x64
 8002ce4:	d001      	beq.n	8002cea <_printf_i+0x3e>
 8002ce6:	2a69      	cmp	r2, #105	; 0x69
 8002ce8:	d1f7      	bne.n	8002cda <_printf_i+0x2e>
 8002cea:	6821      	ldr	r1, [r4, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	0608      	lsls	r0, r1, #24
 8002cf0:	d523      	bpl.n	8002d3a <_printf_i+0x8e>
 8002cf2:	1d11      	adds	r1, r2, #4
 8002cf4:	6019      	str	r1, [r3, #0]
 8002cf6:	6815      	ldr	r5, [r2, #0]
 8002cf8:	e025      	b.n	8002d46 <_printf_i+0x9a>
 8002cfa:	2a73      	cmp	r2, #115	; 0x73
 8002cfc:	d100      	bne.n	8002d00 <_printf_i+0x54>
 8002cfe:	e088      	b.n	8002e12 <_printf_i+0x166>
 8002d00:	d808      	bhi.n	8002d14 <_printf_i+0x68>
 8002d02:	2a6f      	cmp	r2, #111	; 0x6f
 8002d04:	d029      	beq.n	8002d5a <_printf_i+0xae>
 8002d06:	2a70      	cmp	r2, #112	; 0x70
 8002d08:	d1e7      	bne.n	8002cda <_printf_i+0x2e>
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	6809      	ldr	r1, [r1, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	6022      	str	r2, [r4, #0]
 8002d12:	e003      	b.n	8002d1c <_printf_i+0x70>
 8002d14:	2a75      	cmp	r2, #117	; 0x75
 8002d16:	d020      	beq.n	8002d5a <_printf_i+0xae>
 8002d18:	2a78      	cmp	r2, #120	; 0x78
 8002d1a:	d1de      	bne.n	8002cda <_printf_i+0x2e>
 8002d1c:	0022      	movs	r2, r4
 8002d1e:	2178      	movs	r1, #120	; 0x78
 8002d20:	3245      	adds	r2, #69	; 0x45
 8002d22:	7011      	strb	r1, [r2, #0]
 8002d24:	4a6c      	ldr	r2, [pc, #432]	; (8002ed8 <_printf_i+0x22c>)
 8002d26:	e030      	b.n	8002d8a <_printf_i+0xde>
 8002d28:	000e      	movs	r6, r1
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	3642      	adds	r6, #66	; 0x42
 8002d2e:	1d11      	adds	r1, r2, #4
 8002d30:	6019      	str	r1, [r3, #0]
 8002d32:	6813      	ldr	r3, [r2, #0]
 8002d34:	7033      	strb	r3, [r6, #0]
 8002d36:	2301      	movs	r3, #1
 8002d38:	e079      	b.n	8002e2e <_printf_i+0x182>
 8002d3a:	0649      	lsls	r1, r1, #25
 8002d3c:	d5d9      	bpl.n	8002cf2 <_printf_i+0x46>
 8002d3e:	1d11      	adds	r1, r2, #4
 8002d40:	6019      	str	r1, [r3, #0]
 8002d42:	2300      	movs	r3, #0
 8002d44:	5ed5      	ldrsh	r5, [r2, r3]
 8002d46:	2d00      	cmp	r5, #0
 8002d48:	da03      	bge.n	8002d52 <_printf_i+0xa6>
 8002d4a:	232d      	movs	r3, #45	; 0x2d
 8002d4c:	9a04      	ldr	r2, [sp, #16]
 8002d4e:	426d      	negs	r5, r5
 8002d50:	7013      	strb	r3, [r2, #0]
 8002d52:	4b62      	ldr	r3, [pc, #392]	; (8002edc <_printf_i+0x230>)
 8002d54:	270a      	movs	r7, #10
 8002d56:	9303      	str	r3, [sp, #12]
 8002d58:	e02f      	b.n	8002dba <_printf_i+0x10e>
 8002d5a:	6820      	ldr	r0, [r4, #0]
 8002d5c:	6819      	ldr	r1, [r3, #0]
 8002d5e:	0605      	lsls	r5, r0, #24
 8002d60:	d503      	bpl.n	8002d6a <_printf_i+0xbe>
 8002d62:	1d08      	adds	r0, r1, #4
 8002d64:	6018      	str	r0, [r3, #0]
 8002d66:	680d      	ldr	r5, [r1, #0]
 8002d68:	e005      	b.n	8002d76 <_printf_i+0xca>
 8002d6a:	0640      	lsls	r0, r0, #25
 8002d6c:	d5f9      	bpl.n	8002d62 <_printf_i+0xb6>
 8002d6e:	680d      	ldr	r5, [r1, #0]
 8002d70:	1d08      	adds	r0, r1, #4
 8002d72:	6018      	str	r0, [r3, #0]
 8002d74:	b2ad      	uxth	r5, r5
 8002d76:	4b59      	ldr	r3, [pc, #356]	; (8002edc <_printf_i+0x230>)
 8002d78:	2708      	movs	r7, #8
 8002d7a:	9303      	str	r3, [sp, #12]
 8002d7c:	2a6f      	cmp	r2, #111	; 0x6f
 8002d7e:	d018      	beq.n	8002db2 <_printf_i+0x106>
 8002d80:	270a      	movs	r7, #10
 8002d82:	e016      	b.n	8002db2 <_printf_i+0x106>
 8002d84:	3145      	adds	r1, #69	; 0x45
 8002d86:	700a      	strb	r2, [r1, #0]
 8002d88:	4a54      	ldr	r2, [pc, #336]	; (8002edc <_printf_i+0x230>)
 8002d8a:	9203      	str	r2, [sp, #12]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	6821      	ldr	r1, [r4, #0]
 8002d90:	1d10      	adds	r0, r2, #4
 8002d92:	6018      	str	r0, [r3, #0]
 8002d94:	6815      	ldr	r5, [r2, #0]
 8002d96:	0608      	lsls	r0, r1, #24
 8002d98:	d522      	bpl.n	8002de0 <_printf_i+0x134>
 8002d9a:	07cb      	lsls	r3, r1, #31
 8002d9c:	d502      	bpl.n	8002da4 <_printf_i+0xf8>
 8002d9e:	2320      	movs	r3, #32
 8002da0:	4319      	orrs	r1, r3
 8002da2:	6021      	str	r1, [r4, #0]
 8002da4:	2710      	movs	r7, #16
 8002da6:	2d00      	cmp	r5, #0
 8002da8:	d103      	bne.n	8002db2 <_printf_i+0x106>
 8002daa:	2320      	movs	r3, #32
 8002dac:	6822      	ldr	r2, [r4, #0]
 8002dae:	439a      	bics	r2, r3
 8002db0:	6022      	str	r2, [r4, #0]
 8002db2:	0023      	movs	r3, r4
 8002db4:	2200      	movs	r2, #0
 8002db6:	3343      	adds	r3, #67	; 0x43
 8002db8:	701a      	strb	r2, [r3, #0]
 8002dba:	6863      	ldr	r3, [r4, #4]
 8002dbc:	60a3      	str	r3, [r4, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	db5c      	blt.n	8002e7c <_printf_i+0x1d0>
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	6821      	ldr	r1, [r4, #0]
 8002dc6:	4391      	bics	r1, r2
 8002dc8:	6021      	str	r1, [r4, #0]
 8002dca:	2d00      	cmp	r5, #0
 8002dcc:	d158      	bne.n	8002e80 <_printf_i+0x1d4>
 8002dce:	9e04      	ldr	r6, [sp, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d064      	beq.n	8002e9e <_printf_i+0x1f2>
 8002dd4:	0026      	movs	r6, r4
 8002dd6:	9b03      	ldr	r3, [sp, #12]
 8002dd8:	3642      	adds	r6, #66	; 0x42
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	7033      	strb	r3, [r6, #0]
 8002dde:	e05e      	b.n	8002e9e <_printf_i+0x1f2>
 8002de0:	0648      	lsls	r0, r1, #25
 8002de2:	d5da      	bpl.n	8002d9a <_printf_i+0xee>
 8002de4:	b2ad      	uxth	r5, r5
 8002de6:	e7d8      	b.n	8002d9a <_printf_i+0xee>
 8002de8:	6809      	ldr	r1, [r1, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	0608      	lsls	r0, r1, #24
 8002dee:	d505      	bpl.n	8002dfc <_printf_i+0x150>
 8002df0:	1d11      	adds	r1, r2, #4
 8002df2:	6019      	str	r1, [r3, #0]
 8002df4:	6813      	ldr	r3, [r2, #0]
 8002df6:	6962      	ldr	r2, [r4, #20]
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	e006      	b.n	8002e0a <_printf_i+0x15e>
 8002dfc:	0649      	lsls	r1, r1, #25
 8002dfe:	d5f7      	bpl.n	8002df0 <_printf_i+0x144>
 8002e00:	1d11      	adds	r1, r2, #4
 8002e02:	6019      	str	r1, [r3, #0]
 8002e04:	6813      	ldr	r3, [r2, #0]
 8002e06:	8aa2      	ldrh	r2, [r4, #20]
 8002e08:	801a      	strh	r2, [r3, #0]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	9e04      	ldr	r6, [sp, #16]
 8002e0e:	6123      	str	r3, [r4, #16]
 8002e10:	e054      	b.n	8002ebc <_printf_i+0x210>
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	1d11      	adds	r1, r2, #4
 8002e16:	6019      	str	r1, [r3, #0]
 8002e18:	6816      	ldr	r6, [r2, #0]
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	6862      	ldr	r2, [r4, #4]
 8002e1e:	0030      	movs	r0, r6
 8002e20:	f000 fb08 	bl	8003434 <memchr>
 8002e24:	2800      	cmp	r0, #0
 8002e26:	d001      	beq.n	8002e2c <_printf_i+0x180>
 8002e28:	1b80      	subs	r0, r0, r6
 8002e2a:	6060      	str	r0, [r4, #4]
 8002e2c:	6863      	ldr	r3, [r4, #4]
 8002e2e:	6123      	str	r3, [r4, #16]
 8002e30:	2300      	movs	r3, #0
 8002e32:	9a04      	ldr	r2, [sp, #16]
 8002e34:	7013      	strb	r3, [r2, #0]
 8002e36:	e041      	b.n	8002ebc <_printf_i+0x210>
 8002e38:	6923      	ldr	r3, [r4, #16]
 8002e3a:	0032      	movs	r2, r6
 8002e3c:	9906      	ldr	r1, [sp, #24]
 8002e3e:	9805      	ldr	r0, [sp, #20]
 8002e40:	9d07      	ldr	r5, [sp, #28]
 8002e42:	47a8      	blx	r5
 8002e44:	1c43      	adds	r3, r0, #1
 8002e46:	d043      	beq.n	8002ed0 <_printf_i+0x224>
 8002e48:	6823      	ldr	r3, [r4, #0]
 8002e4a:	2500      	movs	r5, #0
 8002e4c:	079b      	lsls	r3, r3, #30
 8002e4e:	d40f      	bmi.n	8002e70 <_printf_i+0x1c4>
 8002e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e52:	68e0      	ldr	r0, [r4, #12]
 8002e54:	4298      	cmp	r0, r3
 8002e56:	da3d      	bge.n	8002ed4 <_printf_i+0x228>
 8002e58:	0018      	movs	r0, r3
 8002e5a:	e03b      	b.n	8002ed4 <_printf_i+0x228>
 8002e5c:	0022      	movs	r2, r4
 8002e5e:	2301      	movs	r3, #1
 8002e60:	3219      	adds	r2, #25
 8002e62:	9906      	ldr	r1, [sp, #24]
 8002e64:	9805      	ldr	r0, [sp, #20]
 8002e66:	9e07      	ldr	r6, [sp, #28]
 8002e68:	47b0      	blx	r6
 8002e6a:	1c43      	adds	r3, r0, #1
 8002e6c:	d030      	beq.n	8002ed0 <_printf_i+0x224>
 8002e6e:	3501      	adds	r5, #1
 8002e70:	68e3      	ldr	r3, [r4, #12]
 8002e72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	429d      	cmp	r5, r3
 8002e78:	dbf0      	blt.n	8002e5c <_printf_i+0x1b0>
 8002e7a:	e7e9      	b.n	8002e50 <_printf_i+0x1a4>
 8002e7c:	2d00      	cmp	r5, #0
 8002e7e:	d0a9      	beq.n	8002dd4 <_printf_i+0x128>
 8002e80:	9e04      	ldr	r6, [sp, #16]
 8002e82:	0028      	movs	r0, r5
 8002e84:	0039      	movs	r1, r7
 8002e86:	f7fd f9c5 	bl	8000214 <__aeabi_uidivmod>
 8002e8a:	9b03      	ldr	r3, [sp, #12]
 8002e8c:	3e01      	subs	r6, #1
 8002e8e:	5c5b      	ldrb	r3, [r3, r1]
 8002e90:	0028      	movs	r0, r5
 8002e92:	7033      	strb	r3, [r6, #0]
 8002e94:	0039      	movs	r1, r7
 8002e96:	f7fd f937 	bl	8000108 <__udivsi3>
 8002e9a:	1e05      	subs	r5, r0, #0
 8002e9c:	d1f1      	bne.n	8002e82 <_printf_i+0x1d6>
 8002e9e:	2f08      	cmp	r7, #8
 8002ea0:	d109      	bne.n	8002eb6 <_printf_i+0x20a>
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	07db      	lsls	r3, r3, #31
 8002ea6:	d506      	bpl.n	8002eb6 <_printf_i+0x20a>
 8002ea8:	6863      	ldr	r3, [r4, #4]
 8002eaa:	6922      	ldr	r2, [r4, #16]
 8002eac:	4293      	cmp	r3, r2
 8002eae:	dc02      	bgt.n	8002eb6 <_printf_i+0x20a>
 8002eb0:	2330      	movs	r3, #48	; 0x30
 8002eb2:	3e01      	subs	r6, #1
 8002eb4:	7033      	strb	r3, [r6, #0]
 8002eb6:	9b04      	ldr	r3, [sp, #16]
 8002eb8:	1b9b      	subs	r3, r3, r6
 8002eba:	6123      	str	r3, [r4, #16]
 8002ebc:	9b07      	ldr	r3, [sp, #28]
 8002ebe:	aa09      	add	r2, sp, #36	; 0x24
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	0021      	movs	r1, r4
 8002ec4:	9b06      	ldr	r3, [sp, #24]
 8002ec6:	9805      	ldr	r0, [sp, #20]
 8002ec8:	f7ff fe82 	bl	8002bd0 <_printf_common>
 8002ecc:	1c43      	adds	r3, r0, #1
 8002ece:	d1b3      	bne.n	8002e38 <_printf_i+0x18c>
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	4240      	negs	r0, r0
 8002ed4:	b00b      	add	sp, #44	; 0x2c
 8002ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ed8:	0800369e 	.word	0x0800369e
 8002edc:	0800368d 	.word	0x0800368d

08002ee0 <_putc_r>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	0006      	movs	r6, r0
 8002ee4:	000d      	movs	r5, r1
 8002ee6:	0014      	movs	r4, r2
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	d004      	beq.n	8002ef6 <_putc_r+0x16>
 8002eec:	6983      	ldr	r3, [r0, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <_putc_r+0x16>
 8002ef2:	f7ff fc8b 	bl	800280c <__sinit>
 8002ef6:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <_putc_r+0x60>)
 8002ef8:	429c      	cmp	r4, r3
 8002efa:	d111      	bne.n	8002f20 <_putc_r+0x40>
 8002efc:	6874      	ldr	r4, [r6, #4]
 8002efe:	68a3      	ldr	r3, [r4, #8]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	60a3      	str	r3, [r4, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	da05      	bge.n	8002f14 <_putc_r+0x34>
 8002f08:	69a2      	ldr	r2, [r4, #24]
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	db12      	blt.n	8002f34 <_putc_r+0x54>
 8002f0e:	b2eb      	uxtb	r3, r5
 8002f10:	2b0a      	cmp	r3, #10
 8002f12:	d00f      	beq.n	8002f34 <_putc_r+0x54>
 8002f14:	6823      	ldr	r3, [r4, #0]
 8002f16:	b2e8      	uxtb	r0, r5
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	6022      	str	r2, [r4, #0]
 8002f1c:	701d      	strb	r5, [r3, #0]
 8002f1e:	bd70      	pop	{r4, r5, r6, pc}
 8002f20:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <_putc_r+0x64>)
 8002f22:	429c      	cmp	r4, r3
 8002f24:	d101      	bne.n	8002f2a <_putc_r+0x4a>
 8002f26:	68b4      	ldr	r4, [r6, #8]
 8002f28:	e7e9      	b.n	8002efe <_putc_r+0x1e>
 8002f2a:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <_putc_r+0x68>)
 8002f2c:	429c      	cmp	r4, r3
 8002f2e:	d1e6      	bne.n	8002efe <_putc_r+0x1e>
 8002f30:	68f4      	ldr	r4, [r6, #12]
 8002f32:	e7e4      	b.n	8002efe <_putc_r+0x1e>
 8002f34:	0022      	movs	r2, r4
 8002f36:	0029      	movs	r1, r5
 8002f38:	0030      	movs	r0, r6
 8002f3a:	f000 f853 	bl	8002fe4 <__swbuf_r>
 8002f3e:	e7ee      	b.n	8002f1e <_putc_r+0x3e>
 8002f40:	08003638 	.word	0x08003638
 8002f44:	08003658 	.word	0x08003658
 8002f48:	08003618 	.word	0x08003618

08002f4c <__sread>:
 8002f4c:	b570      	push	{r4, r5, r6, lr}
 8002f4e:	000c      	movs	r4, r1
 8002f50:	250e      	movs	r5, #14
 8002f52:	5f49      	ldrsh	r1, [r1, r5]
 8002f54:	f000 fa7a 	bl	800344c <_read_r>
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	db03      	blt.n	8002f64 <__sread+0x18>
 8002f5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f5e:	181b      	adds	r3, r3, r0
 8002f60:	6563      	str	r3, [r4, #84]	; 0x54
 8002f62:	bd70      	pop	{r4, r5, r6, pc}
 8002f64:	89a3      	ldrh	r3, [r4, #12]
 8002f66:	4a02      	ldr	r2, [pc, #8]	; (8002f70 <__sread+0x24>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	81a3      	strh	r3, [r4, #12]
 8002f6c:	e7f9      	b.n	8002f62 <__sread+0x16>
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	ffffefff 	.word	0xffffefff

08002f74 <__swrite>:
 8002f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f76:	001f      	movs	r7, r3
 8002f78:	898b      	ldrh	r3, [r1, #12]
 8002f7a:	0005      	movs	r5, r0
 8002f7c:	000c      	movs	r4, r1
 8002f7e:	0016      	movs	r6, r2
 8002f80:	05db      	lsls	r3, r3, #23
 8002f82:	d505      	bpl.n	8002f90 <__swrite+0x1c>
 8002f84:	230e      	movs	r3, #14
 8002f86:	5ec9      	ldrsh	r1, [r1, r3]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	f000 f9d2 	bl	8003334 <_lseek_r>
 8002f90:	89a3      	ldrh	r3, [r4, #12]
 8002f92:	4a05      	ldr	r2, [pc, #20]	; (8002fa8 <__swrite+0x34>)
 8002f94:	0028      	movs	r0, r5
 8002f96:	4013      	ands	r3, r2
 8002f98:	81a3      	strh	r3, [r4, #12]
 8002f9a:	0032      	movs	r2, r6
 8002f9c:	230e      	movs	r3, #14
 8002f9e:	5ee1      	ldrsh	r1, [r4, r3]
 8002fa0:	003b      	movs	r3, r7
 8002fa2:	f000 f875 	bl	8003090 <_write_r>
 8002fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fa8:	ffffefff 	.word	0xffffefff

08002fac <__sseek>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	000c      	movs	r4, r1
 8002fb0:	250e      	movs	r5, #14
 8002fb2:	5f49      	ldrsh	r1, [r1, r5]
 8002fb4:	f000 f9be 	bl	8003334 <_lseek_r>
 8002fb8:	89a3      	ldrh	r3, [r4, #12]
 8002fba:	1c42      	adds	r2, r0, #1
 8002fbc:	d103      	bne.n	8002fc6 <__sseek+0x1a>
 8002fbe:	4a05      	ldr	r2, [pc, #20]	; (8002fd4 <__sseek+0x28>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	81a3      	strh	r3, [r4, #12]
 8002fc4:	bd70      	pop	{r4, r5, r6, pc}
 8002fc6:	2280      	movs	r2, #128	; 0x80
 8002fc8:	0152      	lsls	r2, r2, #5
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	81a3      	strh	r3, [r4, #12]
 8002fce:	6560      	str	r0, [r4, #84]	; 0x54
 8002fd0:	e7f8      	b.n	8002fc4 <__sseek+0x18>
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	ffffefff 	.word	0xffffefff

08002fd8 <__sclose>:
 8002fd8:	b510      	push	{r4, lr}
 8002fda:	230e      	movs	r3, #14
 8002fdc:	5ec9      	ldrsh	r1, [r1, r3]
 8002fde:	f000 f8e1 	bl	80031a4 <_close_r>
 8002fe2:	bd10      	pop	{r4, pc}

08002fe4 <__swbuf_r>:
 8002fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe6:	0005      	movs	r5, r0
 8002fe8:	000e      	movs	r6, r1
 8002fea:	0014      	movs	r4, r2
 8002fec:	2800      	cmp	r0, #0
 8002fee:	d004      	beq.n	8002ffa <__swbuf_r+0x16>
 8002ff0:	6983      	ldr	r3, [r0, #24]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <__swbuf_r+0x16>
 8002ff6:	f7ff fc09 	bl	800280c <__sinit>
 8002ffa:	4b22      	ldr	r3, [pc, #136]	; (8003084 <__swbuf_r+0xa0>)
 8002ffc:	429c      	cmp	r4, r3
 8002ffe:	d12d      	bne.n	800305c <__swbuf_r+0x78>
 8003000:	686c      	ldr	r4, [r5, #4]
 8003002:	69a3      	ldr	r3, [r4, #24]
 8003004:	60a3      	str	r3, [r4, #8]
 8003006:	89a3      	ldrh	r3, [r4, #12]
 8003008:	071b      	lsls	r3, r3, #28
 800300a:	d531      	bpl.n	8003070 <__swbuf_r+0x8c>
 800300c:	6923      	ldr	r3, [r4, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d02e      	beq.n	8003070 <__swbuf_r+0x8c>
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	6922      	ldr	r2, [r4, #16]
 8003016:	b2f7      	uxtb	r7, r6
 8003018:	1a98      	subs	r0, r3, r2
 800301a:	6963      	ldr	r3, [r4, #20]
 800301c:	b2f6      	uxtb	r6, r6
 800301e:	4298      	cmp	r0, r3
 8003020:	db05      	blt.n	800302e <__swbuf_r+0x4a>
 8003022:	0021      	movs	r1, r4
 8003024:	0028      	movs	r0, r5
 8003026:	f000 f959 	bl	80032dc <_fflush_r>
 800302a:	2800      	cmp	r0, #0
 800302c:	d126      	bne.n	800307c <__swbuf_r+0x98>
 800302e:	68a3      	ldr	r3, [r4, #8]
 8003030:	3001      	adds	r0, #1
 8003032:	3b01      	subs	r3, #1
 8003034:	60a3      	str	r3, [r4, #8]
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	6022      	str	r2, [r4, #0]
 800303c:	701f      	strb	r7, [r3, #0]
 800303e:	6963      	ldr	r3, [r4, #20]
 8003040:	4298      	cmp	r0, r3
 8003042:	d004      	beq.n	800304e <__swbuf_r+0x6a>
 8003044:	89a3      	ldrh	r3, [r4, #12]
 8003046:	07db      	lsls	r3, r3, #31
 8003048:	d51a      	bpl.n	8003080 <__swbuf_r+0x9c>
 800304a:	2e0a      	cmp	r6, #10
 800304c:	d118      	bne.n	8003080 <__swbuf_r+0x9c>
 800304e:	0021      	movs	r1, r4
 8003050:	0028      	movs	r0, r5
 8003052:	f000 f943 	bl	80032dc <_fflush_r>
 8003056:	2800      	cmp	r0, #0
 8003058:	d012      	beq.n	8003080 <__swbuf_r+0x9c>
 800305a:	e00f      	b.n	800307c <__swbuf_r+0x98>
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <__swbuf_r+0xa4>)
 800305e:	429c      	cmp	r4, r3
 8003060:	d101      	bne.n	8003066 <__swbuf_r+0x82>
 8003062:	68ac      	ldr	r4, [r5, #8]
 8003064:	e7cd      	b.n	8003002 <__swbuf_r+0x1e>
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <__swbuf_r+0xa8>)
 8003068:	429c      	cmp	r4, r3
 800306a:	d1ca      	bne.n	8003002 <__swbuf_r+0x1e>
 800306c:	68ec      	ldr	r4, [r5, #12]
 800306e:	e7c8      	b.n	8003002 <__swbuf_r+0x1e>
 8003070:	0021      	movs	r1, r4
 8003072:	0028      	movs	r0, r5
 8003074:	f000 f820 	bl	80030b8 <__swsetup_r>
 8003078:	2800      	cmp	r0, #0
 800307a:	d0ca      	beq.n	8003012 <__swbuf_r+0x2e>
 800307c:	2601      	movs	r6, #1
 800307e:	4276      	negs	r6, r6
 8003080:	0030      	movs	r0, r6
 8003082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003084:	08003638 	.word	0x08003638
 8003088:	08003658 	.word	0x08003658
 800308c:	08003618 	.word	0x08003618

08003090 <_write_r>:
 8003090:	b570      	push	{r4, r5, r6, lr}
 8003092:	0005      	movs	r5, r0
 8003094:	0008      	movs	r0, r1
 8003096:	0011      	movs	r1, r2
 8003098:	2200      	movs	r2, #0
 800309a:	4c06      	ldr	r4, [pc, #24]	; (80030b4 <_write_r+0x24>)
 800309c:	6022      	str	r2, [r4, #0]
 800309e:	001a      	movs	r2, r3
 80030a0:	f000 fa44 	bl	800352c <_write>
 80030a4:	1c43      	adds	r3, r0, #1
 80030a6:	d103      	bne.n	80030b0 <_write_r+0x20>
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d000      	beq.n	80030b0 <_write_r+0x20>
 80030ae:	602b      	str	r3, [r5, #0]
 80030b0:	bd70      	pop	{r4, r5, r6, pc}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	2000011c 	.word	0x2000011c

080030b8 <__swsetup_r>:
 80030b8:	4b36      	ldr	r3, [pc, #216]	; (8003194 <__swsetup_r+0xdc>)
 80030ba:	b570      	push	{r4, r5, r6, lr}
 80030bc:	681d      	ldr	r5, [r3, #0]
 80030be:	0006      	movs	r6, r0
 80030c0:	000c      	movs	r4, r1
 80030c2:	2d00      	cmp	r5, #0
 80030c4:	d005      	beq.n	80030d2 <__swsetup_r+0x1a>
 80030c6:	69ab      	ldr	r3, [r5, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d102      	bne.n	80030d2 <__swsetup_r+0x1a>
 80030cc:	0028      	movs	r0, r5
 80030ce:	f7ff fb9d 	bl	800280c <__sinit>
 80030d2:	4b31      	ldr	r3, [pc, #196]	; (8003198 <__swsetup_r+0xe0>)
 80030d4:	429c      	cmp	r4, r3
 80030d6:	d10f      	bne.n	80030f8 <__swsetup_r+0x40>
 80030d8:	686c      	ldr	r4, [r5, #4]
 80030da:	230c      	movs	r3, #12
 80030dc:	5ee2      	ldrsh	r2, [r4, r3]
 80030de:	b293      	uxth	r3, r2
 80030e0:	0719      	lsls	r1, r3, #28
 80030e2:	d42d      	bmi.n	8003140 <__swsetup_r+0x88>
 80030e4:	06d9      	lsls	r1, r3, #27
 80030e6:	d411      	bmi.n	800310c <__swsetup_r+0x54>
 80030e8:	2309      	movs	r3, #9
 80030ea:	2001      	movs	r0, #1
 80030ec:	6033      	str	r3, [r6, #0]
 80030ee:	3337      	adds	r3, #55	; 0x37
 80030f0:	4313      	orrs	r3, r2
 80030f2:	81a3      	strh	r3, [r4, #12]
 80030f4:	4240      	negs	r0, r0
 80030f6:	bd70      	pop	{r4, r5, r6, pc}
 80030f8:	4b28      	ldr	r3, [pc, #160]	; (800319c <__swsetup_r+0xe4>)
 80030fa:	429c      	cmp	r4, r3
 80030fc:	d101      	bne.n	8003102 <__swsetup_r+0x4a>
 80030fe:	68ac      	ldr	r4, [r5, #8]
 8003100:	e7eb      	b.n	80030da <__swsetup_r+0x22>
 8003102:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <__swsetup_r+0xe8>)
 8003104:	429c      	cmp	r4, r3
 8003106:	d1e8      	bne.n	80030da <__swsetup_r+0x22>
 8003108:	68ec      	ldr	r4, [r5, #12]
 800310a:	e7e6      	b.n	80030da <__swsetup_r+0x22>
 800310c:	075b      	lsls	r3, r3, #29
 800310e:	d513      	bpl.n	8003138 <__swsetup_r+0x80>
 8003110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003112:	2900      	cmp	r1, #0
 8003114:	d008      	beq.n	8003128 <__swsetup_r+0x70>
 8003116:	0023      	movs	r3, r4
 8003118:	3344      	adds	r3, #68	; 0x44
 800311a:	4299      	cmp	r1, r3
 800311c:	d002      	beq.n	8003124 <__swsetup_r+0x6c>
 800311e:	0030      	movs	r0, r6
 8003120:	f7ff fa4a 	bl	80025b8 <_free_r>
 8003124:	2300      	movs	r3, #0
 8003126:	6363      	str	r3, [r4, #52]	; 0x34
 8003128:	2224      	movs	r2, #36	; 0x24
 800312a:	89a3      	ldrh	r3, [r4, #12]
 800312c:	4393      	bics	r3, r2
 800312e:	81a3      	strh	r3, [r4, #12]
 8003130:	2300      	movs	r3, #0
 8003132:	6063      	str	r3, [r4, #4]
 8003134:	6923      	ldr	r3, [r4, #16]
 8003136:	6023      	str	r3, [r4, #0]
 8003138:	2308      	movs	r3, #8
 800313a:	89a2      	ldrh	r2, [r4, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	81a3      	strh	r3, [r4, #12]
 8003140:	6923      	ldr	r3, [r4, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10b      	bne.n	800315e <__swsetup_r+0xa6>
 8003146:	21a0      	movs	r1, #160	; 0xa0
 8003148:	2280      	movs	r2, #128	; 0x80
 800314a:	89a3      	ldrh	r3, [r4, #12]
 800314c:	0089      	lsls	r1, r1, #2
 800314e:	0092      	lsls	r2, r2, #2
 8003150:	400b      	ands	r3, r1
 8003152:	4293      	cmp	r3, r2
 8003154:	d003      	beq.n	800315e <__swsetup_r+0xa6>
 8003156:	0021      	movs	r1, r4
 8003158:	0030      	movs	r0, r6
 800315a:	f000 f927 	bl	80033ac <__smakebuf_r>
 800315e:	2301      	movs	r3, #1
 8003160:	89a2      	ldrh	r2, [r4, #12]
 8003162:	4013      	ands	r3, r2
 8003164:	d011      	beq.n	800318a <__swsetup_r+0xd2>
 8003166:	2300      	movs	r3, #0
 8003168:	60a3      	str	r3, [r4, #8]
 800316a:	6963      	ldr	r3, [r4, #20]
 800316c:	425b      	negs	r3, r3
 800316e:	61a3      	str	r3, [r4, #24]
 8003170:	2000      	movs	r0, #0
 8003172:	6923      	ldr	r3, [r4, #16]
 8003174:	4283      	cmp	r3, r0
 8003176:	d1be      	bne.n	80030f6 <__swsetup_r+0x3e>
 8003178:	230c      	movs	r3, #12
 800317a:	5ee2      	ldrsh	r2, [r4, r3]
 800317c:	0613      	lsls	r3, r2, #24
 800317e:	d5ba      	bpl.n	80030f6 <__swsetup_r+0x3e>
 8003180:	2340      	movs	r3, #64	; 0x40
 8003182:	4313      	orrs	r3, r2
 8003184:	81a3      	strh	r3, [r4, #12]
 8003186:	3801      	subs	r0, #1
 8003188:	e7b5      	b.n	80030f6 <__swsetup_r+0x3e>
 800318a:	0792      	lsls	r2, r2, #30
 800318c:	d400      	bmi.n	8003190 <__swsetup_r+0xd8>
 800318e:	6963      	ldr	r3, [r4, #20]
 8003190:	60a3      	str	r3, [r4, #8]
 8003192:	e7ed      	b.n	8003170 <__swsetup_r+0xb8>
 8003194:	20000004 	.word	0x20000004
 8003198:	08003638 	.word	0x08003638
 800319c:	08003658 	.word	0x08003658
 80031a0:	08003618 	.word	0x08003618

080031a4 <_close_r>:
 80031a4:	2300      	movs	r3, #0
 80031a6:	b570      	push	{r4, r5, r6, lr}
 80031a8:	4c06      	ldr	r4, [pc, #24]	; (80031c4 <_close_r+0x20>)
 80031aa:	0005      	movs	r5, r0
 80031ac:	0008      	movs	r0, r1
 80031ae:	6023      	str	r3, [r4, #0]
 80031b0:	f000 f984 	bl	80034bc <_close>
 80031b4:	1c43      	adds	r3, r0, #1
 80031b6:	d103      	bne.n	80031c0 <_close_r+0x1c>
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d000      	beq.n	80031c0 <_close_r+0x1c>
 80031be:	602b      	str	r3, [r5, #0]
 80031c0:	bd70      	pop	{r4, r5, r6, pc}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	2000011c 	.word	0x2000011c

080031c8 <__sflush_r>:
 80031c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031ca:	898a      	ldrh	r2, [r1, #12]
 80031cc:	0005      	movs	r5, r0
 80031ce:	000c      	movs	r4, r1
 80031d0:	0713      	lsls	r3, r2, #28
 80031d2:	d460      	bmi.n	8003296 <__sflush_r+0xce>
 80031d4:	684b      	ldr	r3, [r1, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	dc04      	bgt.n	80031e4 <__sflush_r+0x1c>
 80031da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80031dc:	2b00      	cmp	r3, #0
 80031de:	dc01      	bgt.n	80031e4 <__sflush_r+0x1c>
 80031e0:	2000      	movs	r0, #0
 80031e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80031e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d0fa      	beq.n	80031e0 <__sflush_r+0x18>
 80031ea:	2300      	movs	r3, #0
 80031ec:	682e      	ldr	r6, [r5, #0]
 80031ee:	602b      	str	r3, [r5, #0]
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	015b      	lsls	r3, r3, #5
 80031f4:	401a      	ands	r2, r3
 80031f6:	d034      	beq.n	8003262 <__sflush_r+0x9a>
 80031f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031fa:	89a3      	ldrh	r3, [r4, #12]
 80031fc:	075b      	lsls	r3, r3, #29
 80031fe:	d506      	bpl.n	800320e <__sflush_r+0x46>
 8003200:	6863      	ldr	r3, [r4, #4]
 8003202:	1ac0      	subs	r0, r0, r3
 8003204:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <__sflush_r+0x46>
 800320a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800320c:	1ac0      	subs	r0, r0, r3
 800320e:	0002      	movs	r2, r0
 8003210:	6a21      	ldr	r1, [r4, #32]
 8003212:	2300      	movs	r3, #0
 8003214:	0028      	movs	r0, r5
 8003216:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003218:	47b8      	blx	r7
 800321a:	89a1      	ldrh	r1, [r4, #12]
 800321c:	1c43      	adds	r3, r0, #1
 800321e:	d106      	bne.n	800322e <__sflush_r+0x66>
 8003220:	682b      	ldr	r3, [r5, #0]
 8003222:	2b1d      	cmp	r3, #29
 8003224:	d831      	bhi.n	800328a <__sflush_r+0xc2>
 8003226:	4a2c      	ldr	r2, [pc, #176]	; (80032d8 <__sflush_r+0x110>)
 8003228:	40da      	lsrs	r2, r3
 800322a:	07d3      	lsls	r3, r2, #31
 800322c:	d52d      	bpl.n	800328a <__sflush_r+0xc2>
 800322e:	2300      	movs	r3, #0
 8003230:	6063      	str	r3, [r4, #4]
 8003232:	6923      	ldr	r3, [r4, #16]
 8003234:	6023      	str	r3, [r4, #0]
 8003236:	04cb      	lsls	r3, r1, #19
 8003238:	d505      	bpl.n	8003246 <__sflush_r+0x7e>
 800323a:	1c43      	adds	r3, r0, #1
 800323c:	d102      	bne.n	8003244 <__sflush_r+0x7c>
 800323e:	682b      	ldr	r3, [r5, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d100      	bne.n	8003246 <__sflush_r+0x7e>
 8003244:	6560      	str	r0, [r4, #84]	; 0x54
 8003246:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003248:	602e      	str	r6, [r5, #0]
 800324a:	2900      	cmp	r1, #0
 800324c:	d0c8      	beq.n	80031e0 <__sflush_r+0x18>
 800324e:	0023      	movs	r3, r4
 8003250:	3344      	adds	r3, #68	; 0x44
 8003252:	4299      	cmp	r1, r3
 8003254:	d002      	beq.n	800325c <__sflush_r+0x94>
 8003256:	0028      	movs	r0, r5
 8003258:	f7ff f9ae 	bl	80025b8 <_free_r>
 800325c:	2000      	movs	r0, #0
 800325e:	6360      	str	r0, [r4, #52]	; 0x34
 8003260:	e7bf      	b.n	80031e2 <__sflush_r+0x1a>
 8003262:	2301      	movs	r3, #1
 8003264:	6a21      	ldr	r1, [r4, #32]
 8003266:	0028      	movs	r0, r5
 8003268:	47b8      	blx	r7
 800326a:	1c43      	adds	r3, r0, #1
 800326c:	d1c5      	bne.n	80031fa <__sflush_r+0x32>
 800326e:	682b      	ldr	r3, [r5, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0c2      	beq.n	80031fa <__sflush_r+0x32>
 8003274:	2b1d      	cmp	r3, #29
 8003276:	d001      	beq.n	800327c <__sflush_r+0xb4>
 8003278:	2b16      	cmp	r3, #22
 800327a:	d101      	bne.n	8003280 <__sflush_r+0xb8>
 800327c:	602e      	str	r6, [r5, #0]
 800327e:	e7af      	b.n	80031e0 <__sflush_r+0x18>
 8003280:	2340      	movs	r3, #64	; 0x40
 8003282:	89a2      	ldrh	r2, [r4, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	81a3      	strh	r3, [r4, #12]
 8003288:	e7ab      	b.n	80031e2 <__sflush_r+0x1a>
 800328a:	2340      	movs	r3, #64	; 0x40
 800328c:	430b      	orrs	r3, r1
 800328e:	2001      	movs	r0, #1
 8003290:	81a3      	strh	r3, [r4, #12]
 8003292:	4240      	negs	r0, r0
 8003294:	e7a5      	b.n	80031e2 <__sflush_r+0x1a>
 8003296:	690f      	ldr	r7, [r1, #16]
 8003298:	2f00      	cmp	r7, #0
 800329a:	d0a1      	beq.n	80031e0 <__sflush_r+0x18>
 800329c:	680b      	ldr	r3, [r1, #0]
 800329e:	600f      	str	r7, [r1, #0]
 80032a0:	1bdb      	subs	r3, r3, r7
 80032a2:	9301      	str	r3, [sp, #4]
 80032a4:	2300      	movs	r3, #0
 80032a6:	0792      	lsls	r2, r2, #30
 80032a8:	d100      	bne.n	80032ac <__sflush_r+0xe4>
 80032aa:	694b      	ldr	r3, [r1, #20]
 80032ac:	60a3      	str	r3, [r4, #8]
 80032ae:	9b01      	ldr	r3, [sp, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	dc00      	bgt.n	80032b6 <__sflush_r+0xee>
 80032b4:	e794      	b.n	80031e0 <__sflush_r+0x18>
 80032b6:	9b01      	ldr	r3, [sp, #4]
 80032b8:	003a      	movs	r2, r7
 80032ba:	6a21      	ldr	r1, [r4, #32]
 80032bc:	0028      	movs	r0, r5
 80032be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80032c0:	47b0      	blx	r6
 80032c2:	2800      	cmp	r0, #0
 80032c4:	dc03      	bgt.n	80032ce <__sflush_r+0x106>
 80032c6:	2340      	movs	r3, #64	; 0x40
 80032c8:	89a2      	ldrh	r2, [r4, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	e7df      	b.n	800328e <__sflush_r+0xc6>
 80032ce:	9b01      	ldr	r3, [sp, #4]
 80032d0:	183f      	adds	r7, r7, r0
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	9301      	str	r3, [sp, #4]
 80032d6:	e7ea      	b.n	80032ae <__sflush_r+0xe6>
 80032d8:	20400001 	.word	0x20400001

080032dc <_fflush_r>:
 80032dc:	690b      	ldr	r3, [r1, #16]
 80032de:	b570      	push	{r4, r5, r6, lr}
 80032e0:	0005      	movs	r5, r0
 80032e2:	000c      	movs	r4, r1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <_fflush_r+0x10>
 80032e8:	2000      	movs	r0, #0
 80032ea:	bd70      	pop	{r4, r5, r6, pc}
 80032ec:	2800      	cmp	r0, #0
 80032ee:	d004      	beq.n	80032fa <_fflush_r+0x1e>
 80032f0:	6983      	ldr	r3, [r0, #24]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <_fflush_r+0x1e>
 80032f6:	f7ff fa89 	bl	800280c <__sinit>
 80032fa:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <_fflush_r+0x4c>)
 80032fc:	429c      	cmp	r4, r3
 80032fe:	d109      	bne.n	8003314 <_fflush_r+0x38>
 8003300:	686c      	ldr	r4, [r5, #4]
 8003302:	220c      	movs	r2, #12
 8003304:	5ea3      	ldrsh	r3, [r4, r2]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ee      	beq.n	80032e8 <_fflush_r+0xc>
 800330a:	0021      	movs	r1, r4
 800330c:	0028      	movs	r0, r5
 800330e:	f7ff ff5b 	bl	80031c8 <__sflush_r>
 8003312:	e7ea      	b.n	80032ea <_fflush_r+0xe>
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <_fflush_r+0x50>)
 8003316:	429c      	cmp	r4, r3
 8003318:	d101      	bne.n	800331e <_fflush_r+0x42>
 800331a:	68ac      	ldr	r4, [r5, #8]
 800331c:	e7f1      	b.n	8003302 <_fflush_r+0x26>
 800331e:	4b04      	ldr	r3, [pc, #16]	; (8003330 <_fflush_r+0x54>)
 8003320:	429c      	cmp	r4, r3
 8003322:	d1ee      	bne.n	8003302 <_fflush_r+0x26>
 8003324:	68ec      	ldr	r4, [r5, #12]
 8003326:	e7ec      	b.n	8003302 <_fflush_r+0x26>
 8003328:	08003638 	.word	0x08003638
 800332c:	08003658 	.word	0x08003658
 8003330:	08003618 	.word	0x08003618

08003334 <_lseek_r>:
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	0005      	movs	r5, r0
 8003338:	0008      	movs	r0, r1
 800333a:	0011      	movs	r1, r2
 800333c:	2200      	movs	r2, #0
 800333e:	4c06      	ldr	r4, [pc, #24]	; (8003358 <_lseek_r+0x24>)
 8003340:	6022      	str	r2, [r4, #0]
 8003342:	001a      	movs	r2, r3
 8003344:	f000 f8d2 	bl	80034ec <_lseek>
 8003348:	1c43      	adds	r3, r0, #1
 800334a:	d103      	bne.n	8003354 <_lseek_r+0x20>
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d000      	beq.n	8003354 <_lseek_r+0x20>
 8003352:	602b      	str	r3, [r5, #0]
 8003354:	bd70      	pop	{r4, r5, r6, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	2000011c 	.word	0x2000011c

0800335c <__swhatbuf_r>:
 800335c:	b570      	push	{r4, r5, r6, lr}
 800335e:	000e      	movs	r6, r1
 8003360:	001d      	movs	r5, r3
 8003362:	230e      	movs	r3, #14
 8003364:	5ec9      	ldrsh	r1, [r1, r3]
 8003366:	b090      	sub	sp, #64	; 0x40
 8003368:	0014      	movs	r4, r2
 800336a:	2900      	cmp	r1, #0
 800336c:	da07      	bge.n	800337e <__swhatbuf_r+0x22>
 800336e:	2300      	movs	r3, #0
 8003370:	602b      	str	r3, [r5, #0]
 8003372:	89b3      	ldrh	r3, [r6, #12]
 8003374:	061b      	lsls	r3, r3, #24
 8003376:	d411      	bmi.n	800339c <__swhatbuf_r+0x40>
 8003378:	2380      	movs	r3, #128	; 0x80
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	e00f      	b.n	800339e <__swhatbuf_r+0x42>
 800337e:	aa01      	add	r2, sp, #4
 8003380:	f000 f878 	bl	8003474 <_fstat_r>
 8003384:	2800      	cmp	r0, #0
 8003386:	dbf2      	blt.n	800336e <__swhatbuf_r+0x12>
 8003388:	22f0      	movs	r2, #240	; 0xf0
 800338a:	9b02      	ldr	r3, [sp, #8]
 800338c:	0212      	lsls	r2, r2, #8
 800338e:	4013      	ands	r3, r2
 8003390:	4a05      	ldr	r2, [pc, #20]	; (80033a8 <__swhatbuf_r+0x4c>)
 8003392:	189b      	adds	r3, r3, r2
 8003394:	425a      	negs	r2, r3
 8003396:	4153      	adcs	r3, r2
 8003398:	602b      	str	r3, [r5, #0]
 800339a:	e7ed      	b.n	8003378 <__swhatbuf_r+0x1c>
 800339c:	2340      	movs	r3, #64	; 0x40
 800339e:	2000      	movs	r0, #0
 80033a0:	6023      	str	r3, [r4, #0]
 80033a2:	b010      	add	sp, #64	; 0x40
 80033a4:	bd70      	pop	{r4, r5, r6, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	ffffe000 	.word	0xffffe000

080033ac <__smakebuf_r>:
 80033ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033ae:	2602      	movs	r6, #2
 80033b0:	898b      	ldrh	r3, [r1, #12]
 80033b2:	0005      	movs	r5, r0
 80033b4:	000c      	movs	r4, r1
 80033b6:	4233      	tst	r3, r6
 80033b8:	d006      	beq.n	80033c8 <__smakebuf_r+0x1c>
 80033ba:	0023      	movs	r3, r4
 80033bc:	3347      	adds	r3, #71	; 0x47
 80033be:	6023      	str	r3, [r4, #0]
 80033c0:	6123      	str	r3, [r4, #16]
 80033c2:	2301      	movs	r3, #1
 80033c4:	6163      	str	r3, [r4, #20]
 80033c6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80033c8:	ab01      	add	r3, sp, #4
 80033ca:	466a      	mov	r2, sp
 80033cc:	f7ff ffc6 	bl	800335c <__swhatbuf_r>
 80033d0:	9900      	ldr	r1, [sp, #0]
 80033d2:	0007      	movs	r7, r0
 80033d4:	0028      	movs	r0, r5
 80033d6:	f7ff f939 	bl	800264c <_malloc_r>
 80033da:	2800      	cmp	r0, #0
 80033dc:	d108      	bne.n	80033f0 <__smakebuf_r+0x44>
 80033de:	220c      	movs	r2, #12
 80033e0:	5ea3      	ldrsh	r3, [r4, r2]
 80033e2:	059a      	lsls	r2, r3, #22
 80033e4:	d4ef      	bmi.n	80033c6 <__smakebuf_r+0x1a>
 80033e6:	2203      	movs	r2, #3
 80033e8:	4393      	bics	r3, r2
 80033ea:	431e      	orrs	r6, r3
 80033ec:	81a6      	strh	r6, [r4, #12]
 80033ee:	e7e4      	b.n	80033ba <__smakebuf_r+0xe>
 80033f0:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <__smakebuf_r+0x84>)
 80033f2:	62ab      	str	r3, [r5, #40]	; 0x28
 80033f4:	2380      	movs	r3, #128	; 0x80
 80033f6:	89a2      	ldrh	r2, [r4, #12]
 80033f8:	6020      	str	r0, [r4, #0]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	81a3      	strh	r3, [r4, #12]
 80033fe:	9b00      	ldr	r3, [sp, #0]
 8003400:	6120      	str	r0, [r4, #16]
 8003402:	6163      	str	r3, [r4, #20]
 8003404:	9b01      	ldr	r3, [sp, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <__smakebuf_r+0x7a>
 800340a:	230e      	movs	r3, #14
 800340c:	5ee1      	ldrsh	r1, [r4, r3]
 800340e:	0028      	movs	r0, r5
 8003410:	f000 f842 	bl	8003498 <_isatty_r>
 8003414:	2800      	cmp	r0, #0
 8003416:	d006      	beq.n	8003426 <__smakebuf_r+0x7a>
 8003418:	2203      	movs	r2, #3
 800341a:	89a3      	ldrh	r3, [r4, #12]
 800341c:	4393      	bics	r3, r2
 800341e:	001a      	movs	r2, r3
 8003420:	2301      	movs	r3, #1
 8003422:	4313      	orrs	r3, r2
 8003424:	81a3      	strh	r3, [r4, #12]
 8003426:	89a0      	ldrh	r0, [r4, #12]
 8003428:	4338      	orrs	r0, r7
 800342a:	81a0      	strh	r0, [r4, #12]
 800342c:	e7cb      	b.n	80033c6 <__smakebuf_r+0x1a>
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	08002789 	.word	0x08002789

08003434 <memchr>:
 8003434:	b2c9      	uxtb	r1, r1
 8003436:	1882      	adds	r2, r0, r2
 8003438:	4290      	cmp	r0, r2
 800343a:	d101      	bne.n	8003440 <memchr+0xc>
 800343c:	2000      	movs	r0, #0
 800343e:	4770      	bx	lr
 8003440:	7803      	ldrb	r3, [r0, #0]
 8003442:	428b      	cmp	r3, r1
 8003444:	d0fb      	beq.n	800343e <memchr+0xa>
 8003446:	3001      	adds	r0, #1
 8003448:	e7f6      	b.n	8003438 <memchr+0x4>
	...

0800344c <_read_r>:
 800344c:	b570      	push	{r4, r5, r6, lr}
 800344e:	0005      	movs	r5, r0
 8003450:	0008      	movs	r0, r1
 8003452:	0011      	movs	r1, r2
 8003454:	2200      	movs	r2, #0
 8003456:	4c06      	ldr	r4, [pc, #24]	; (8003470 <_read_r+0x24>)
 8003458:	6022      	str	r2, [r4, #0]
 800345a:	001a      	movs	r2, r3
 800345c:	f000 f84e 	bl	80034fc <_read>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d103      	bne.n	800346c <_read_r+0x20>
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d000      	beq.n	800346c <_read_r+0x20>
 800346a:	602b      	str	r3, [r5, #0]
 800346c:	bd70      	pop	{r4, r5, r6, pc}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	2000011c 	.word	0x2000011c

08003474 <_fstat_r>:
 8003474:	2300      	movs	r3, #0
 8003476:	b570      	push	{r4, r5, r6, lr}
 8003478:	4c06      	ldr	r4, [pc, #24]	; (8003494 <_fstat_r+0x20>)
 800347a:	0005      	movs	r5, r0
 800347c:	0008      	movs	r0, r1
 800347e:	0011      	movs	r1, r2
 8003480:	6023      	str	r3, [r4, #0]
 8003482:	f000 f823 	bl	80034cc <_fstat>
 8003486:	1c43      	adds	r3, r0, #1
 8003488:	d103      	bne.n	8003492 <_fstat_r+0x1e>
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d000      	beq.n	8003492 <_fstat_r+0x1e>
 8003490:	602b      	str	r3, [r5, #0]
 8003492:	bd70      	pop	{r4, r5, r6, pc}
 8003494:	2000011c 	.word	0x2000011c

08003498 <_isatty_r>:
 8003498:	2300      	movs	r3, #0
 800349a:	b570      	push	{r4, r5, r6, lr}
 800349c:	4c06      	ldr	r4, [pc, #24]	; (80034b8 <_isatty_r+0x20>)
 800349e:	0005      	movs	r5, r0
 80034a0:	0008      	movs	r0, r1
 80034a2:	6023      	str	r3, [r4, #0]
 80034a4:	f000 f81a 	bl	80034dc <_isatty>
 80034a8:	1c43      	adds	r3, r0, #1
 80034aa:	d103      	bne.n	80034b4 <_isatty_r+0x1c>
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d000      	beq.n	80034b4 <_isatty_r+0x1c>
 80034b2:	602b      	str	r3, [r5, #0]
 80034b4:	bd70      	pop	{r4, r5, r6, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	2000011c 	.word	0x2000011c

080034bc <_close>:
 80034bc:	2258      	movs	r2, #88	; 0x58
 80034be:	2001      	movs	r0, #1
 80034c0:	4b01      	ldr	r3, [pc, #4]	; (80034c8 <_close+0xc>)
 80034c2:	4240      	negs	r0, r0
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	4770      	bx	lr
 80034c8:	2000011c 	.word	0x2000011c

080034cc <_fstat>:
 80034cc:	2258      	movs	r2, #88	; 0x58
 80034ce:	2001      	movs	r0, #1
 80034d0:	4b01      	ldr	r3, [pc, #4]	; (80034d8 <_fstat+0xc>)
 80034d2:	4240      	negs	r0, r0
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	4770      	bx	lr
 80034d8:	2000011c 	.word	0x2000011c

080034dc <_isatty>:
 80034dc:	2258      	movs	r2, #88	; 0x58
 80034de:	4b02      	ldr	r3, [pc, #8]	; (80034e8 <_isatty+0xc>)
 80034e0:	2000      	movs	r0, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	4770      	bx	lr
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	2000011c 	.word	0x2000011c

080034ec <_lseek>:
 80034ec:	2258      	movs	r2, #88	; 0x58
 80034ee:	2001      	movs	r0, #1
 80034f0:	4b01      	ldr	r3, [pc, #4]	; (80034f8 <_lseek+0xc>)
 80034f2:	4240      	negs	r0, r0
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	4770      	bx	lr
 80034f8:	2000011c 	.word	0x2000011c

080034fc <_read>:
 80034fc:	2258      	movs	r2, #88	; 0x58
 80034fe:	2001      	movs	r0, #1
 8003500:	4b01      	ldr	r3, [pc, #4]	; (8003508 <_read+0xc>)
 8003502:	4240      	negs	r0, r0
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	4770      	bx	lr
 8003508:	2000011c 	.word	0x2000011c

0800350c <_sbrk>:
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <_sbrk+0x18>)
 800350e:	0002      	movs	r2, r0
 8003510:	6819      	ldr	r1, [r3, #0]
 8003512:	2900      	cmp	r1, #0
 8003514:	d101      	bne.n	800351a <_sbrk+0xe>
 8003516:	4904      	ldr	r1, [pc, #16]	; (8003528 <_sbrk+0x1c>)
 8003518:	6019      	str	r1, [r3, #0]
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	1882      	adds	r2, r0, r2
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	200000a4 	.word	0x200000a4
 8003528:	20000120 	.word	0x20000120

0800352c <_write>:
 800352c:	2258      	movs	r2, #88	; 0x58
 800352e:	2001      	movs	r0, #1
 8003530:	4b01      	ldr	r3, [pc, #4]	; (8003538 <_write+0xc>)
 8003532:	4240      	negs	r0, r0
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	4770      	bx	lr
 8003538:	2000011c 	.word	0x2000011c

0800353c <_init>:
 800353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003542:	bc08      	pop	{r3}
 8003544:	469e      	mov	lr, r3
 8003546:	4770      	bx	lr

08003548 <_fini>:
 8003548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354e:	bc08      	pop	{r3}
 8003550:	469e      	mov	lr, r3
 8003552:	4770      	bx	lr
